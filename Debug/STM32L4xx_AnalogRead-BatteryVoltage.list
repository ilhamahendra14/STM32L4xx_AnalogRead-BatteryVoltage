
STM32L4xx_AnalogRead-BatteryVoltage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007520  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080076b0  080076b0  000176b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ae4  08007ae4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007ae4  08007ae4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ae4  08007ae4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ae4  08007ae4  00017ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ae8  08007ae8  00017ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001dc  08007cc8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08007cc8  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f128  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000259e  00000000  00000000  0002f334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  000318d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  000326e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f16  00000000  00000000  000333d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e898  00000000  00000000  000562e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d502c  00000000  00000000  00064b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139baa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  00139bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007698 	.word	0x08007698

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007698 	.word	0x08007698

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c94:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d013      	beq.n	8000cc8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ca0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ca4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ca8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00b      	beq.n	8000cc8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cb0:	e000      	b.n	8000cb4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cb2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000cb4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f9      	beq.n	8000cb2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000cbe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
     int DataIdx;
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e009      	b.n	8000cfc <_write+0x26>
         ITM_SendChar((*ptr++));
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ffc9 	bl	8000c88 <ITM_SendChar>
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbf1      	blt.n	8000ce8 <_write+0x12>
     }
     return len;
 8000d04:	687b      	ldr	r3, [r7, #4]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <readBat>:

void readBat(){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
	uint8_t bat = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ls_bat_GPIO_Port, ls_bat_Pin, SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	484c      	ldr	r0, [pc, #304]	; (8000e50 <readBat+0x140>)
 8000d20:	f002 fb08 	bl	8003334 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000d24:	2064      	movs	r0, #100	; 0x64
 8000d26:	f000 fcc7 	bl	80016b8 <HAL_Delay>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d2a:	217f      	movs	r1, #127	; 0x7f
 8000d2c:	4849      	ldr	r0, [pc, #292]	; (8000e54 <readBat+0x144>)
 8000d2e:	f001 fff3 	bl	8002d18 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8000d32:	4848      	ldr	r0, [pc, #288]	; (8000e54 <readBat+0x144>)
 8000d34:	f001 f82c 	bl	8001d90 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 20);
 8000d38:	2114      	movs	r1, #20
 8000d3a:	4846      	ldr	r0, [pc, #280]	; (8000e54 <readBat+0x144>)
 8000d3c:	f001 f88b 	bl	8001e56 <HAL_ADC_PollForConversion>
	float adc_val = 0;
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	e012      	b.n	8000d72 <readBat+0x62>
		adc_val += HAL_ADC_GetValue(&hadc1);
 8000d4c:	4841      	ldr	r0, [pc, #260]	; (8000e54 <readBat+0x144>)
 8000d4e:	f001 f911 	bl	8001f74 <HAL_ADC_GetValue>
 8000d52:	ee07 0a90 	vmov	s15, r0
 8000d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d62:	edc7 7a03 	vstr	s15, [r7, #12]
		HAL_Delay(5);
 8000d66:	2005      	movs	r0, #5
 8000d68:	f000 fca6 	bl	80016b8 <HAL_Delay>
	for (int i = 0; i < 100; i++) {
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	2b63      	cmp	r3, #99	; 0x63
 8000d76:	dde9      	ble.n	8000d4c <readBat+0x3c>
	}
	HAL_GPIO_WritePin(ls_bat_GPIO_Port, ls_bat_Pin, RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	4834      	ldr	r0, [pc, #208]	; (8000e50 <readBat+0x140>)
 8000d7e:	f002 fad9 	bl	8003334 <HAL_GPIO_WritePin>
	adc_val = adc_val / 100;
 8000d82:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d86:	eddf 6a34 	vldr	s13, [pc, #208]	; 8000e58 <readBat+0x148>
 8000d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d8e:	edc7 7a03 	vstr	s15, [r7, #12]
	float vadc = (adc_val / 4096) * 3.3;
 8000d92:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d96:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000e5c <readBat+0x14c>
 8000d9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d9e:	ee16 0a90 	vmov	r0, s13
 8000da2:	f7ff fbd1 	bl	8000548 <__aeabi_f2d>
 8000da6:	a326      	add	r3, pc, #152	; (adr r3, 8000e40 <readBat+0x130>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fc24 	bl	80005f8 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	f7ff ff16 	bl	8000be8 <__aeabi_d2f>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	603b      	str	r3, [r7, #0]
	bat = ((vadc * (5.1 + 10) / 10) * 100) - 200;
 8000dc0:	6838      	ldr	r0, [r7, #0]
 8000dc2:	f7ff fbc1 	bl	8000548 <__aeabi_f2d>
 8000dc6:	a320      	add	r3, pc, #128	; (adr r3, 8000e48 <readBat+0x138>)
 8000dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dcc:	f7ff fc14 	bl	80005f8 <__aeabi_dmul>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <readBat+0x150>)
 8000dde:	f7ff fd35 	bl	800084c <__aeabi_ddiv>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	4610      	mov	r0, r2
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 0200 	mov.w	r2, #0
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <readBat+0x154>)
 8000df0:	f7ff fc02 	bl	80005f8 <__aeabi_dmul>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 0200 	mov.w	r2, #0
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <readBat+0x158>)
 8000e02:	f7ff fa41 	bl	8000288 <__aeabi_dsub>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f7ff fecb 	bl	8000ba8 <__aeabi_d2uiz>
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	printf("battery voltage : %.2fV\n", (bat + 200)/100.0);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	33c8      	adds	r3, #200	; 0xc8
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fb82 	bl	8000524 <__aeabi_i2d>
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <readBat+0x154>)
 8000e26:	f7ff fd11 	bl	800084c <__aeabi_ddiv>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	480f      	ldr	r0, [pc, #60]	; (8000e6c <readBat+0x15c>)
 8000e30:	f004 fb6e 	bl	8005510 <iprintf>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	f3af 8000 	nop.w
 8000e40:	66666666 	.word	0x66666666
 8000e44:	400a6666 	.word	0x400a6666
 8000e48:	33333333 	.word	0x33333333
 8000e4c:	402e3333 	.word	0x402e3333
 8000e50:	48000400 	.word	0x48000400
 8000e54:	200001f8 	.word	0x200001f8
 8000e58:	42c80000 	.word	0x42c80000
 8000e5c:	45800000 	.word	0x45800000
 8000e60:	40240000 	.word	0x40240000
 8000e64:	40590000 	.word	0x40590000
 8000e68:	40690000 	.word	0x40690000
 8000e6c:	080076b0 	.word	0x080076b0

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e74:	f000 fbab 	bl	80015ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 f812 	bl	8000ea0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e7c:	f000 f870 	bl	8000f60 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e80:	f000 f970 	bl	8001164 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e84:	f000 f89a 	bl	8000fbc <MX_ADC1_Init>
  MX_RNG_Init();
 8000e88:	f000 f8fc 	bl	8001084 <MX_RNG_Init>
  MX_RTC_Init();
 8000e8c:	f000 f90e 	bl	80010ac <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  readBat();
 8000e90:	f7ff ff3e 	bl	8000d10 <readBat>
	  HAL_Delay(500);
 8000e94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e98:	f000 fc0e 	bl	80016b8 <HAL_Delay>
	  readBat();
 8000e9c:	e7f8      	b.n	8000e90 <main+0x20>
	...

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b096      	sub	sp, #88	; 0x58
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	2244      	movs	r2, #68	; 0x44
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f003 febc 	bl	8004c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ec2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ec6:	f002 fa6b 	bl	80033a0 <HAL_PWREx_ControlVoltageScaling>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ed0:	f000 f992 	bl	80011f8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ed4:	f002 fa46 	bl	8003364 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <SystemClock_Config+0xbc>)
 8000eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <SystemClock_Config+0xbc>)
 8000ee0:	f023 0318 	bic.w	r3, r3, #24
 8000ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000ee8:	2306      	movs	r3, #6
 8000eea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efa:	2302      	movs	r3, #2
 8000efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000efe:	2302      	movs	r3, #2
 8000f00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f06:	230a      	movs	r3, #10
 8000f08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fa96 	bl	800344c <HAL_RCC_OscConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f26:	f000 f967 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2104      	movs	r1, #4
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 fe96 	bl	8003c74 <HAL_RCC_ClockConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f4e:	f000 f953 	bl	80011f8 <Error_Handler>
  }
}
 8000f52:	bf00      	nop
 8000f54:	3758      	adds	r7, #88	; 0x58
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000

08000f60 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b096      	sub	sp, #88	; 0x58
 8000f64:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2254      	movs	r2, #84	; 0x54
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 fe5d 	bl	8004c2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
 8000f72:	f44f 2388 	mov.w	r3, #278528	; 0x44000
 8000f76:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000f7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f82:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000f84:	2302      	movs	r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f90:	2307      	movs	r3, #7
 8000f92:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000f94:	2304      	movs	r3, #4
 8000f96:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000f9c:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000fa0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 f851 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000fb0:	f000 f922 	bl	80011f8 <Error_Handler>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3758      	adds	r7, #88	; 0x58
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <MX_ADC1_Init+0xbc>)
 8000fd4:	4a29      	ldr	r2, [pc, #164]	; (800107c <MX_ADC1_Init+0xc0>)
 8000fd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <MX_ADC1_Init+0xbc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <MX_ADC1_Init+0xbc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <MX_ADC1_Init+0xbc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <MX_ADC1_Init+0xbc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_ADC1_Init+0xbc>)
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <MX_ADC1_Init+0xbc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_ADC1_Init+0xbc>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_ADC1_Init+0xbc>)
 8001004:	2201      	movs	r2, #1
 8001006:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_ADC1_Init+0xbc>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_ADC1_Init+0xbc>)
 8001012:	2200      	movs	r2, #0
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_ADC1_Init+0xbc>)
 8001018:	2200      	movs	r2, #0
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_ADC1_Init+0xbc>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_ADC1_Init+0xbc>)
 8001026:	2200      	movs	r2, #0
 8001028:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_ADC1_Init+0xbc>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001032:	4811      	ldr	r0, [pc, #68]	; (8001078 <MX_ADC1_Init+0xbc>)
 8001034:	f000 fd64 	bl	8001b00 <HAL_ADC_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800103e:	f000 f8db 	bl	80011f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_ADC1_Init+0xc4>)
 8001044:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001046:	2306      	movs	r3, #6
 8001048:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800104e:	237f      	movs	r3, #127	; 0x7f
 8001050:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001052:	2304      	movs	r3, #4
 8001054:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_ADC1_Init+0xbc>)
 8001060:	f001 f968 	bl	8002334 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800106a:	f000 f8c5 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200001f8 	.word	0x200001f8
 800107c:	50040000 	.word	0x50040000
 8001080:	14f00020 	.word	0x14f00020

08001084 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_RNG_Init+0x20>)
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <MX_RNG_Init+0x24>)
 800108c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_RNG_Init+0x20>)
 8001090:	f003 fac4 	bl	800461c <HAL_RNG_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800109a:	f000 f8ad 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000025c 	.word	0x2000025c
 80010a8:	50060800 	.word	0x50060800

080010ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010c0:	2300      	movs	r3, #0
 80010c2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <MX_RTC_Init+0xb0>)
 80010c6:	4a26      	ldr	r2, [pc, #152]	; (8001160 <MX_RTC_Init+0xb4>)
 80010c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <MX_RTC_Init+0xb0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_RTC_Init+0xb0>)
 80010d2:	227f      	movs	r2, #127	; 0x7f
 80010d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_RTC_Init+0xb0>)
 80010d8:	22ff      	movs	r2, #255	; 0xff
 80010da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_RTC_Init+0xb0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010e2:	4b1e      	ldr	r3, [pc, #120]	; (800115c <MX_RTC_Init+0xb0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_RTC_Init+0xb0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_RTC_Init+0xb0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010f4:	4819      	ldr	r0, [pc, #100]	; (800115c <MX_RTC_Init+0xb0>)
 80010f6:	f003 fae8 	bl	80046ca <HAL_RTC_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001100:	f000 f87a 	bl	80011f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001104:	2300      	movs	r3, #0
 8001106:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001108:	2300      	movs	r3, #0
 800110a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800110c:	2300      	movs	r3, #0
 800110e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2201      	movs	r2, #1
 800111c:	4619      	mov	r1, r3
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <MX_RTC_Init+0xb0>)
 8001120:	f003 fb4e 	bl	80047c0 <HAL_RTC_SetTime>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800112a:	f000 f865 	bl	80011f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800112e:	2301      	movs	r3, #1
 8001130:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001132:	2301      	movs	r3, #1
 8001134:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001136:	2301      	movs	r3, #1
 8001138:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800113a:	2300      	movs	r3, #0
 800113c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	2201      	movs	r2, #1
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_RTC_Init+0xb0>)
 8001146:	f003 fbd8 	bl	80048fa <HAL_RTC_SetDate>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001150:	f000 f852 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000026c 	.word	0x2000026c
 8001160:	40002800 	.word	0x40002800

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_GPIO_Init+0x8c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <MX_GPIO_Init+0x8c>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_GPIO_Init+0x8c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_GPIO_Init+0x8c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <MX_GPIO_Init+0x8c>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_GPIO_Init+0x8c>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_GPIO_Init+0x8c>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <MX_GPIO_Init+0x8c>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_GPIO_Init+0x8c>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ls_bat_GPIO_Port, ls_bat_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	480b      	ldr	r0, [pc, #44]	; (80011f4 <MX_GPIO_Init+0x90>)
 80011c8:	f002 f8b4 	bl	8003334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ls_bat_Pin */
  GPIO_InitStruct.Pin = ls_bat_Pin;
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ls_bat_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_GPIO_Init+0x90>)
 80011e4:	f001 ff3c 	bl	8003060 <HAL_GPIO_Init>

}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000
 80011f4:	48000400 	.word	0x48000400

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	e7fe      	b.n	8001200 <Error_Handler+0x8>
	...

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_MspInit+0x44>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <HAL_MspInit+0x44>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6613      	str	r3, [r2, #96]	; 0x60
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_MspInit+0x44>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_MspInit+0x44>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_MspInit+0x44>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	6593      	str	r3, [r2, #88]	; 0x58
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_MspInit+0x44>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <HAL_ADC_MspInit+0x84>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d12c      	bne.n	80012c8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_ADC_MspInit+0x88>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_ADC_MspInit+0x88>)
 8001274:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_ADC_MspInit+0x88>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_ADC_MspInit+0x88>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <HAL_ADC_MspInit+0x88>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_ADC_MspInit+0x88>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Bat_Pin;
 800129e:	2301      	movs	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012a2:	230b      	movs	r3, #11
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Bat_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b4:	f001 fed4 	bl	8003060 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	2012      	movs	r0, #18
 80012be:	f001 fe98 	bl	8002ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80012c2:	2012      	movs	r0, #18
 80012c4:	f001 feb1 	bl	800302a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	50040000 	.word	0x50040000
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_RNG_MspInit+0x38>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10b      	bne.n	8001302 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_RNG_MspInit+0x3c>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a09      	ldr	r2, [pc, #36]	; (8001314 <HAL_RNG_MspInit+0x3c>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <HAL_RNG_MspInit+0x3c>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	50060800 	.word	0x50060800
 8001314:	40021000 	.word	0x40021000

08001318 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b098      	sub	sp, #96	; 0x60
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2254      	movs	r2, #84	; 0x54
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f003 fc7f 	bl	8004c2c <memset>
  if(hrtc->Instance==RTC)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a13      	ldr	r2, [pc, #76]	; (8001380 <HAL_RTC_MspInit+0x68>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d11f      	bne.n	8001378 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800133c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800133e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001342:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4618      	mov	r0, r3
 800134a:	f002 fe7f 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001354:	f7ff ff50 	bl	80011f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_RTC_MspInit+0x6c>)
 800135a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <HAL_RTC_MspInit+0x6c>)
 8001360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	2003      	movs	r0, #3
 800136e:	f001 fe40 	bl	8002ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001372:	2003      	movs	r0, #3
 8001374:	f001 fe59 	bl	800302a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001378:	bf00      	nop
 800137a:	3760      	adds	r7, #96	; 0x60
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40002800 	.word	0x40002800
 8001384:	40021000 	.word	0x40021000

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800138c:	e7fe      	b.n	800138c <NMI_Handler+0x4>

0800138e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <HardFault_Handler+0x4>

08001394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <MemManage_Handler+0x4>

0800139a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <BusFault_Handler+0x4>

080013a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <UsageFault_Handler+0x4>

080013a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d4:	f000 f950 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <RTC_WKUP_IRQHandler+0x10>)
 80013e2:	f003 fbc9 	bl	8004b78 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000026c 	.word	0x2000026c

080013f0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <ADC1_IRQHandler+0x10>)
 80013f6:	f000 fdca 	bl	8001f8e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200001f8 	.word	0x200001f8

08001404 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	return 1;
 8001408:	2301      	movs	r3, #1
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_kill>:

int _kill(int pid, int sig)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800141e:	f003 fbdb 	bl	8004bd8 <__errno>
 8001422:	4603      	mov	r3, r0
 8001424:	2216      	movs	r2, #22
 8001426:	601a      	str	r2, [r3, #0]
	return -1;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_exit>:

void _exit (int status)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ffe7 	bl	8001414 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001446:	e7fe      	b.n	8001446 <_exit+0x12>

08001448 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e00a      	b.n	8001470 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800145a:	f3af 8000 	nop.w
 800145e:	4601      	mov	r1, r0
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf0      	blt.n	800145a <_read+0x12>
	}

return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
	return -1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014aa:	605a      	str	r2, [r3, #4]
	return 0;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_isatty>:

int _isatty(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	return 1;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
	return 0;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <_sbrk+0x5c>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <_sbrk+0x60>)
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <_sbrk+0x64>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <_sbrk+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800151c:	f003 fb5c 	bl	8004bd8 <__errno>
 8001520:	4603      	mov	r3, r0
 8001522:	220c      	movs	r2, #12
 8001524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e009      	b.n	8001540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20010000 	.word	0x20010000
 800154c:	00000400 	.word	0x00000400
 8001550:	20000290 	.word	0x20000290
 8001554:	200002a8 	.word	0x200002a8

08001558 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001580:	f7ff ffea 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	; (80015b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	; (80015bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <LoopForever+0xe>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	; (80015c8 <LoopForever+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015aa:	f003 fb1b 	bl	8004be4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ae:	f7ff fc5f 	bl	8000e70 <main>

080015b2 <LoopForever>:

LoopForever:
    b LoopForever
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80015c0:	08007aec 	.word	0x08007aec
  ldr r2, =_sbss
 80015c4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80015c8:	200002a8 	.word	0x200002a8

080015cc <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <CAN1_RX0_IRQHandler>

080015ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f001 fcff 	bl	8002fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015de:	200f      	movs	r0, #15
 80015e0:	f000 f80e 	bl	8001600 <HAL_InitTick>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	e001      	b.n	80015f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015f0:	f7ff fe08 	bl	8001204 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f4:	79fb      	ldrb	r3, [r7, #7]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_InitTick+0x6c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <HAL_InitTick+0x70>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_InitTick+0x6c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fd0b 	bl	8003046 <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10f      	bne.n	8001656 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d809      	bhi.n	8001650 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f001 fcd5 	bl	8002ff2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001648:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_InitTick+0x74>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e007      	b.n	8001660 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	e004      	b.n	8001660 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e001      	b.n	8001660 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000008 	.word	0x20000008
 800169c:	20000294 	.word	0x20000294

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000294 	.word	0x20000294

080016b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff ffee 	bl	80016a0 <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d005      	beq.n	80016de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_Delay+0x44>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016de:	bf00      	nop
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f7      	bhi.n	80016e0 <HAL_Delay+0x28>
  {
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008

08001700 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3360      	adds	r3, #96	; 0x60
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <LL_ADC_SetOffset+0x44>)
 800178a:	4013      	ands	r3, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	4313      	orrs	r3, r2
 8001798:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	03fff000 	.word	0x03fff000

080017b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3360      	adds	r3, #96	; 0x60
 80017be:	461a      	mov	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3360      	adds	r3, #96	; 0x60
 80017ec:	461a      	mov	r2, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	431a      	orrs	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001806:	bf00      	nop
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3330      	adds	r3, #48	; 0x30
 8001848:	461a      	mov	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	4413      	add	r3, r2
 8001856:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	211f      	movs	r1, #31
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	0e9b      	lsrs	r3, r3, #26
 8001870:	f003 011f 	and.w	r1, r3, #31
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	431a      	orrs	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001884:	bf00      	nop
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b087      	sub	sp, #28
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3314      	adds	r3, #20
 80018c6:	461a      	mov	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	0e5b      	lsrs	r3, r3, #25
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	4413      	add	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	0d1b      	lsrs	r3, r3, #20
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	2107      	movs	r1, #7
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	0d1b      	lsrs	r3, r3, #20
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	431a      	orrs	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001900:	bf00      	nop
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0318 	and.w	r3, r3, #24
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001930:	40d9      	lsrs	r1, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	400b      	ands	r3, r1
 8001936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193a:	431a      	orrs	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	0007ffff 	.word	0x0007ffff

08001954 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6093      	str	r3, [r2, #8]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800198c:	d101      	bne.n	8001992 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019dc:	d101      	bne.n	80019e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a2c:	f043 0202 	orr.w	r2, r3, #2
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <LL_ADC_IsEnabled+0x18>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <LL_ADC_IsEnabled+0x1a>
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d101      	bne.n	8001a7e <LL_ADC_IsDisableOngoing+0x18>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_ADC_IsDisableOngoing+0x1a>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aa0:	f043 0204 	orr.w	r2, r3, #4
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d101      	bne.n	8001acc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d101      	bne.n	8001af2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e12c      	b.n	8001d74 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff fb8f 	bl	800124c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff19 	bl	8001978 <LL_ADC_IsDeepPowerDownEnabled>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff feff 	bl	8001954 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff34 	bl	80019c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d115      	bne.n	8001b92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff18 	bl	80019a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b70:	4b82      	ldr	r3, [pc, #520]	; (8001d7c <HAL_ADC_Init+0x27c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	099b      	lsrs	r3, r3, #6
 8001b76:	4a82      	ldr	r2, [pc, #520]	; (8001d80 <HAL_ADC_Init+0x280>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	3301      	adds	r3, #1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b84:	e002      	b.n	8001b8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f9      	bne.n	8001b86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff16 	bl	80019c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10d      	bne.n	8001bbe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f043 0210 	orr.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff76 	bl	8001ab4 <LL_ADC_REG_IsConversionOngoing>
 8001bc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 80c5 	bne.w	8001d62 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 80c1 	bne.w	8001d62 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001be8:	f043 0202 	orr.w	r2, r3, #2
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff23 	bl	8001a40 <LL_ADC_IsEnabled>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10b      	bne.n	8001c18 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c00:	4860      	ldr	r0, [pc, #384]	; (8001d84 <HAL_ADC_Init+0x284>)
 8001c02:	f7ff ff1d 	bl	8001a40 <LL_ADC_IsEnabled>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4619      	mov	r1, r3
 8001c12:	485d      	ldr	r0, [pc, #372]	; (8001d88 <HAL_ADC_Init+0x288>)
 8001c14:	f7ff fd74 	bl	8001700 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7e5b      	ldrb	r3, [r3, #25]
 8001c1c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c22:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c28:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c2e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c36:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d106      	bne.n	8001c54 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	045b      	lsls	r3, r3, #17
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d009      	beq.n	8001c70 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	4b45      	ldr	r3, [pc, #276]	; (8001d8c <HAL_ADC_Init+0x28c>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	430b      	orrs	r3, r1
 8001c82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff13 	bl	8001ab4 <LL_ADC_REG_IsConversionOngoing>
 8001c8e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff20 	bl	8001ada <LL_ADC_INJ_IsConversionOngoing>
 8001c9a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d13d      	bne.n	8001d1e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d13a      	bne.n	8001d1e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cb4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cc4:	f023 0302 	bic.w	r3, r3, #2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	69b9      	ldr	r1, [r7, #24]
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d118      	bne.n	8001d0e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ce6:	f023 0304 	bic.w	r3, r3, #4
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cf8:	4311      	orrs	r1, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	611a      	str	r2, [r3, #16]
 8001d0c:	e007      	b.n	8001d1e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d10c      	bne.n	8001d40 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	f023 010f 	bic.w	r1, r3, #15
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	1e5a      	subs	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3e:	e007      	b.n	8001d50 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 020f 	bic.w	r2, r2, #15
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f023 0303 	bic.w	r3, r3, #3
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
 8001d60:	e007      	b.n	8001d72 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	f043 0210 	orr.w	r2, r3, #16
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	053e2d63 	.word	0x053e2d63
 8001d84:	50040000 	.word	0x50040000
 8001d88:	50040300 	.word	0x50040300
 8001d8c:	fff0c007 	.word	0xfff0c007

08001d90 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fe89 	bl	8001ab4 <LL_ADC_REG_IsConversionOngoing>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d14f      	bne.n	8001e48 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_Start+0x26>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e04b      	b.n	8001e4e <HAL_ADC_Start+0xbe>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fe98 	bl	8002af4 <ADC_Enable>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d137      	bne.n	8001e3e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dee:	d106      	bne.n	8001dfe <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	f023 0206 	bic.w	r2, r3, #6
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	659a      	str	r2, [r3, #88]	; 0x58
 8001dfc:	e002      	b.n	8001e04 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	221c      	movs	r2, #28
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fe28 	bl	8001a8c <LL_ADC_REG_StartConversion>
 8001e3c:	e006      	b.n	8001e4c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e46:	e001      	b.n	8001e4c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d102      	bne.n	8001e6e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e68:	2308      	movs	r3, #8
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e010      	b.n	8001e90 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	f043 0220 	orr.w	r2, r3, #32
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e06f      	b.n	8001f6c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e90:	f7ff fc06 	bl	80016a0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e96:	e021      	b.n	8001edc <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9e:	d01d      	beq.n	8001edc <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ea0:	f7ff fbfe 	bl	80016a0 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d302      	bcc.n	8001eb6 <HAL_ADC_PollForConversion+0x60>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d112      	bne.n	8001edc <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec8:	f043 0204 	orr.w	r2, r3, #4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e047      	b.n	8001f6c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0d6      	beq.n	8001e98 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fc89 	bl	8001812 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01c      	beq.n	8001f40 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7e5b      	ldrb	r3, [r3, #25]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d118      	bne.n	8001f40 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d111      	bne.n	8001f40 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d104      	bne.n	8001f58 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2208      	movs	r2, #8
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e008      	b.n	8001f6a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	220c      	movs	r2, #12
 8001f68:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b088      	sub	sp, #32
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d017      	beq.n	8001fe4 <HAL_ADC_IRQHandler+0x56>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 ff26 	bl	8002e28 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d004      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x6a>
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d05e      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d059      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fbf2 	bl	8001812 <LL_ADC_REG_IsTriggerSourceSWStart>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d03e      	beq.n	80020b2 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d135      	bne.n	80020b2 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b08      	cmp	r3, #8
 8002052:	d12e      	bne.n	80020b2 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fd2b 	bl	8001ab4 <LL_ADC_REG_IsConversionOngoing>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d11a      	bne.n	800209a <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 020c 	bic.w	r2, r2, #12
 8002072:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d112      	bne.n	80020b2 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	655a      	str	r2, [r3, #84]	; 0x54
 8002098:	e00b      	b.n	80020b2 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	f043 0210 	orr.w	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f91f 	bl	80022f6 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	220c      	movs	r2, #12
 80020be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <HAL_ADC_IRQHandler+0x146>
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d072      	beq.n	80021c4 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d06d      	beq.n	80021c4 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fbc3 	bl	8001890 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800210a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fb7e 	bl	8001812 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002116:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d047      	beq.n	80021b6 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d007      	beq.n	8002140 <HAL_ADC_IRQHandler+0x1b2>
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d03f      	beq.n	80021b6 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800213c:	2b00      	cmp	r3, #0
 800213e:	d13a      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214a:	2b40      	cmp	r3, #64	; 0x40
 800214c:	d133      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d12e      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fcbc 	bl	8001ada <LL_ADC_INJ_IsConversionOngoing>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d11a      	bne.n	800219e <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002176:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d112      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	655a      	str	r2, [r3, #84]	; 0x54
 800219c:	e00b      	b.n	80021b6 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f043 0210 	orr.w	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	f043 0201 	orr.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fe0e 	bl	8002dd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2260      	movs	r2, #96	; 0x60
 80021c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d011      	beq.n	80021f2 <HAL_ADC_IRQHandler+0x264>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00c      	beq.n	80021f2 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f890 	bl	800230a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d012      	beq.n	8002222 <HAL_ADC_IRQHandler+0x294>
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fdf4 	bl	8002e00 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002228:	2b00      	cmp	r3, #0
 800222a:	d012      	beq.n	8002252 <HAL_ADC_IRQHandler+0x2c4>
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00d      	beq.n	8002252 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fde6 	bl	8002e14 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02a      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x324>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d025      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226a:	2b00      	cmp	r3, #0
 800226c:	d102      	bne.n	8002274 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800226e:	2301      	movs	r3, #1
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e008      	b.n	8002286 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002282:	2301      	movs	r3, #1
 8002284:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10e      	bne.n	80022aa <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	f043 0202 	orr.w	r2, r3, #2
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f83a 	bl	800231e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2210      	movs	r2, #16
 80022b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d018      	beq.n	80022ee <HAL_ADC_IRQHandler+0x360>
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d013      	beq.n	80022ee <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f043 0208 	orr.w	r2, r3, #8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 fd7f 	bl	8002dec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80022ee:	bf00      	nop
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0b6      	sub	sp, #216	; 0xd8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x22>
 8002352:	2302      	movs	r3, #2
 8002354:	e3b9      	b.n	8002aca <HAL_ADC_ConfigChannel+0x796>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fba6 	bl	8001ab4 <LL_ADC_REG_IsConversionOngoing>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 839e 	bne.w	8002aac <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d824      	bhi.n	80023c2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	3b02      	subs	r3, #2
 800237e:	2b03      	cmp	r3, #3
 8002380:	d81b      	bhi.n	80023ba <HAL_ADC_ConfigChannel+0x86>
 8002382:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <HAL_ADC_ConfigChannel+0x54>)
 8002384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002388:	08002399 	.word	0x08002399
 800238c:	080023a1 	.word	0x080023a1
 8002390:	080023a9 	.word	0x080023a9
 8002394:	080023b1 	.word	0x080023b1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	220c      	movs	r2, #12
 800239c:	605a      	str	r2, [r3, #4]
          break;
 800239e:	e011      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2212      	movs	r2, #18
 80023a4:	605a      	str	r2, [r3, #4]
          break;
 80023a6:	e00d      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2218      	movs	r2, #24
 80023ac:	605a      	str	r2, [r3, #4]
          break;
 80023ae:	e009      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b6:	605a      	str	r2, [r3, #4]
          break;
 80023b8:	e004      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2206      	movs	r2, #6
 80023be:	605a      	str	r2, [r3, #4]
          break;
 80023c0:	e000      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80023c2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	f7ff fa31 	bl	8001838 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fb6a 	bl	8001ab4 <LL_ADC_REG_IsConversionOngoing>
 80023e0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fb76 	bl	8001ada <LL_ADC_INJ_IsConversionOngoing>
 80023ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 81a6 	bne.w	8002748 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 81a1 	bne.w	8002748 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	461a      	mov	r2, r3
 8002414:	f7ff fa4f 	bl	80018b6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	695a      	ldr	r2, [r3, #20]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	08db      	lsrs	r3, r3, #3
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b04      	cmp	r3, #4
 8002438:	d00a      	beq.n	8002450 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6919      	ldr	r1, [r3, #16]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800244a:	f7ff f98d 	bl	8001768 <LL_ADC_SetOffset>
 800244e:	e17b      	b.n	8002748 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff f9aa 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 800245c:	4603      	mov	r3, r0
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <HAL_ADC_ConfigChannel+0x148>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff f99f 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8002472:	4603      	mov	r3, r0
 8002474:	0e9b      	lsrs	r3, r3, #26
 8002476:	f003 021f 	and.w	r2, r3, #31
 800247a:	e01e      	b.n	80024ba <HAL_ADC_ConfigChannel+0x186>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff f994 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800249a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800249e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80024aa:	2320      	movs	r3, #32
 80024ac:	e004      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80024ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x19e>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	0e9b      	lsrs	r3, r3, #26
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	e018      	b.n	8002504 <HAL_ADC_ConfigChannel+0x1d0>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80024e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80024ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e004      	b.n	8002504 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80024fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002504:	429a      	cmp	r2, r3
 8002506:	d106      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff f963 	bl	80017dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2101      	movs	r1, #1
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff f947 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8002522:	4603      	mov	r3, r0
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10a      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x20e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2101      	movs	r1, #1
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff f93c 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	0e9b      	lsrs	r3, r3, #26
 800253c:	f003 021f 	and.w	r2, r3, #31
 8002540:	e01e      	b.n	8002580 <HAL_ADC_ConfigChannel+0x24c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2101      	movs	r1, #1
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff f931 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 800254e:	4603      	mov	r3, r0
 8002550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002560:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002570:	2320      	movs	r3, #32
 8002572:	e004      	b.n	800257e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002574:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002588:	2b00      	cmp	r3, #0
 800258a:	d105      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x264>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	e018      	b.n	80025ca <HAL_ADC_ConfigChannel+0x296>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e004      	b.n	80025ca <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80025c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d106      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	2101      	movs	r1, #1
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff f900 	bl	80017dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2102      	movs	r1, #2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff f8e4 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x2d4>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2102      	movs	r1, #2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff f8d9 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	f003 021f 	and.w	r2, r3, #31
 8002606:	e01e      	b.n	8002646 <HAL_ADC_ConfigChannel+0x312>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2102      	movs	r1, #2
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff f8ce 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800262a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800262e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e004      	b.n	8002644 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800263a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d105      	bne.n	800265e <HAL_ADC_ConfigChannel+0x32a>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e9b      	lsrs	r3, r3, #26
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	e016      	b.n	800268c <HAL_ADC_ConfigChannel+0x358>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002670:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002676:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e004      	b.n	800268c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002682:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800268c:	429a      	cmp	r2, r3
 800268e:	d106      	bne.n	800269e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	2102      	movs	r1, #2
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff f89f 	bl	80017dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2103      	movs	r1, #3
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff f883 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x396>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2103      	movs	r1, #3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f878 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	e017      	b.n	80026fa <HAL_ADC_ConfigChannel+0x3c6>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2103      	movs	r1, #3
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f86d 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80026e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80026e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e003      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80026f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	2b00      	cmp	r3, #0
 8002704:	d105      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x3de>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	e011      	b.n	8002736 <HAL_ADC_ConfigChannel+0x402>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002722:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800272a:	2320      	movs	r3, #32
 800272c:	e003      	b.n	8002736 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002736:	429a      	cmp	r2, r3
 8002738:	d106      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	2103      	movs	r1, #3
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f84a 	bl	80017dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff f977 	bl	8001a40 <LL_ADC_IsEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	f040 813f 	bne.w	80029d8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6819      	ldr	r1, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	461a      	mov	r2, r3
 8002768:	f7ff f8d0 	bl	800190c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a8e      	ldr	r2, [pc, #568]	; (80029ac <HAL_ADC_ConfigChannel+0x678>)
 8002772:	4293      	cmp	r3, r2
 8002774:	f040 8130 	bne.w	80029d8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10b      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x46c>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	3301      	adds	r3, #1
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	2b09      	cmp	r3, #9
 8002796:	bf94      	ite	ls
 8002798:	2301      	movls	r3, #1
 800279a:	2300      	movhi	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e019      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x4a0>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a8:	fa93 f3a3 	rbit	r3, r3
 80027ac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80027b8:	2320      	movs	r3, #32
 80027ba:	e003      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80027bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	3301      	adds	r3, #1
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	2b09      	cmp	r3, #9
 80027cc:	bf94      	ite	ls
 80027ce:	2301      	movls	r3, #1
 80027d0:	2300      	movhi	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d079      	beq.n	80028cc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x4c0>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	0e9b      	lsrs	r3, r3, #26
 80027ea:	3301      	adds	r3, #1
 80027ec:	069b      	lsls	r3, r3, #26
 80027ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027f2:	e015      	b.n	8002820 <HAL_ADC_ConfigChannel+0x4ec>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002804:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e003      	b.n	8002818 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3301      	adds	r3, #1
 800281a:	069b      	lsls	r3, r3, #26
 800281c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x50c>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0e9b      	lsrs	r3, r3, #26
 8002832:	3301      	adds	r3, #1
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	e017      	b.n	8002870 <HAL_ADC_ConfigChannel+0x53c>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800284e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002850:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002858:	2320      	movs	r3, #32
 800285a:	e003      	b.n	8002864 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800285c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3301      	adds	r3, #1
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	2101      	movs	r1, #1
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	ea42 0103 	orr.w	r1, r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x562>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0e9b      	lsrs	r3, r3, #26
 8002886:	3301      	adds	r3, #1
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	051b      	lsls	r3, r3, #20
 8002894:	e018      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x594>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80028ae:	2320      	movs	r3, #32
 80028b0:	e003      	b.n	80028ba <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80028b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028c8:	430b      	orrs	r3, r1
 80028ca:	e080      	b.n	80029ce <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x5b4>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0e9b      	lsrs	r3, r3, #26
 80028de:	3301      	adds	r3, #1
 80028e0:	069b      	lsls	r3, r3, #26
 80028e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e6:	e015      	b.n	8002914 <HAL_ADC_ConfigChannel+0x5e0>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002900:	2320      	movs	r3, #32
 8002902:	e003      	b.n	800290c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3301      	adds	r3, #1
 800290e:	069b      	lsls	r3, r3, #26
 8002910:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d109      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x600>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	3301      	adds	r3, #1
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	e017      	b.n	8002964 <HAL_ADC_ConfigChannel+0x630>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	61fb      	str	r3, [r7, #28]
  return result;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800294c:	2320      	movs	r3, #32
 800294e:	e003      	b.n	8002958 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2101      	movs	r1, #1
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	ea42 0103 	orr.w	r1, r2, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10d      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x65c>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0e9b      	lsrs	r3, r3, #26
 800297a:	3301      	adds	r3, #1
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	3b1e      	subs	r3, #30
 8002988:	051b      	lsls	r3, r3, #20
 800298a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800298e:	e01d      	b.n	80029cc <HAL_ADC_ConfigChannel+0x698>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	613b      	str	r3, [r7, #16]
  return result;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d103      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80029a8:	2320      	movs	r3, #32
 80029aa:	e005      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x684>
 80029ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	3301      	adds	r3, #1
 80029ba:	f003 021f 	and.w	r2, r3, #31
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	3b1e      	subs	r3, #30
 80029c6:	051b      	lsls	r3, r3, #20
 80029c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029cc:	430b      	orrs	r3, r1
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	6892      	ldr	r2, [r2, #8]
 80029d2:	4619      	mov	r1, r3
 80029d4:	f7fe ff6f 	bl	80018b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <HAL_ADC_ConfigChannel+0x7a0>)
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d06c      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029e4:	483c      	ldr	r0, [pc, #240]	; (8002ad8 <HAL_ADC_ConfigChannel+0x7a4>)
 80029e6:	f7fe feb1 	bl	800174c <LL_ADC_GetCommonPathInternalCh>
 80029ea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a3a      	ldr	r2, [pc, #232]	; (8002adc <HAL_ADC_ConfigChannel+0x7a8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d127      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d121      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a35      	ldr	r2, [pc, #212]	; (8002ae0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d157      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a16:	4619      	mov	r1, r3
 8002a18:	482f      	ldr	r0, [pc, #188]	; (8002ad8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002a1a:	f7fe fe84 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a1e:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	099b      	lsrs	r3, r3, #6
 8002a24:	4a30      	ldr	r2, [pc, #192]	; (8002ae8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	099b      	lsrs	r3, r3, #6
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a38:	e002      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f9      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a46:	e03a      	b.n	8002abe <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <HAL_ADC_ConfigChannel+0x7b8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d113      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x746>
 8002a52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10d      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d12a      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a70:	4619      	mov	r1, r3
 8002a72:	4819      	ldr	r0, [pc, #100]	; (8002ad8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002a74:	f7fe fe57 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a78:	e021      	b.n	8002abe <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d11c      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d116      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d111      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002aa6:	f7fe fe3e 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
 8002aaa:	e008      	b.n	8002abe <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ac6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	37d8      	adds	r7, #216	; 0xd8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	80080000 	.word	0x80080000
 8002ad8:	50040300 	.word	0x50040300
 8002adc:	c7520000 	.word	0xc7520000
 8002ae0:	50040000 	.word	0x50040000
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	053e2d63 	.word	0x053e2d63
 8002aec:	cb840000 	.word	0xcb840000
 8002af0:	80000001 	.word	0x80000001

08002af4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe ff9b 	bl	8001a40 <LL_ADC_IsEnabled>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d169      	bne.n	8002be4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <ADC_Enable+0xfc>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	f043 0210 	orr.w	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e055      	b.n	8002be6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe ff56 	bl	80019f0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b44:	482b      	ldr	r0, [pc, #172]	; (8002bf4 <ADC_Enable+0x100>)
 8002b46:	f7fe fe01 	bl	800174c <LL_ADC_GetCommonPathInternalCh>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b54:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <ADC_Enable+0x104>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <ADC_Enable+0x108>)
 8002b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b60:	099b      	lsrs	r3, r3, #6
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002b6e:	e002      	b.n	8002b76 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f9      	bne.n	8002b70 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b7c:	f7fe fd90 	bl	80016a0 <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b82:	e028      	b.n	8002bd6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe ff59 	bl	8001a40 <LL_ADC_IsEnabled>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d104      	bne.n	8002b9e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe ff29 	bl	80019f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b9e:	f7fe fd7f 	bl	80016a0 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d914      	bls.n	8002bd6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d00d      	beq.n	8002bd6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f043 0210 	orr.w	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e007      	b.n	8002be6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d1cf      	bne.n	8002b84 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	8000003f 	.word	0x8000003f
 8002bf4:	50040300 	.word	0x50040300
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	053e2d63 	.word	0x053e2d63

08002c00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe ff2a 	bl	8001a66 <LL_ADC_IsDisableOngoing>
 8002c12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe ff11 	bl	8001a40 <LL_ADC_IsEnabled>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d047      	beq.n	8002cb4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d144      	bne.n	8002cb4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 030d 	and.w	r3, r3, #13
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d10c      	bne.n	8002c52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe feeb 	bl	8001a18 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2203      	movs	r2, #3
 8002c48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c4a:	f7fe fd29 	bl	80016a0 <HAL_GetTick>
 8002c4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c50:	e029      	b.n	8002ca6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f043 0210 	orr.w	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	f043 0201 	orr.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e023      	b.n	8002cb6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c6e:	f7fe fd17 	bl	80016a0 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d914      	bls.n	8002ca6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00d      	beq.n	8002ca6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	f043 0210 	orr.w	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e007      	b.n	8002cb6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1dc      	bne.n	8002c6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <LL_ADC_StartCalibration>:
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002cd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_ADC_IsCalibrationOnGoing>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d04:	d101      	bne.n	8002d0a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_ADCEx_Calibration_Start+0x1c>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e04d      	b.n	8002dd0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff5f 	bl	8002c00 <ADC_Disable>
 8002d42:	4603      	mov	r3, r0
 8002d44:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d136      	bne.n	8002dba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d54:	f023 0302 	bic.w	r3, r3, #2
 8002d58:	f043 0202 	orr.w	r2, r3, #2
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6839      	ldr	r1, [r7, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ffa9 	bl	8002cbe <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d6c:	e014      	b.n	8002d98 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002d7a:	d30d      	bcc.n	8002d98 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f023 0312 	bic.w	r3, r3, #18
 8002d84:	f043 0210 	orr.w	r2, r3, #16
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e01b      	b.n	8002dd0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ffa7 	bl	8002cf0 <LL_ADC_IsCalibrationOnGoing>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e2      	bne.n	8002d6e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	f023 0303 	bic.w	r3, r3, #3
 8002db0:	f043 0201 	orr.w	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	655a      	str	r2, [r3, #84]	; 0x54
 8002db8:	e005      	b.n	8002dc6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	f043 0210 	orr.w	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <__NVIC_SetPriorityGrouping>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <__NVIC_SetPriorityGrouping+0x44>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e6e:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <__NVIC_SetPriorityGrouping+0x44>)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	60d3      	str	r3, [r2, #12]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_GetPriorityGrouping>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <__NVIC_GetPriorityGrouping+0x18>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	f003 0307 	and.w	r3, r3, #7
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_EnableIRQ>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	db0b      	blt.n	8002eca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	f003 021f 	and.w	r2, r3, #31
 8002eb8:	4907      	ldr	r1, [pc, #28]	; (8002ed8 <__NVIC_EnableIRQ+0x38>)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000e100 	.word	0xe000e100

08002edc <__NVIC_SetPriority>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	6039      	str	r1, [r7, #0]
 8002ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	db0a      	blt.n	8002f06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	490c      	ldr	r1, [pc, #48]	; (8002f28 <__NVIC_SetPriority+0x4c>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	0112      	lsls	r2, r2, #4
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	440b      	add	r3, r1
 8002f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f04:	e00a      	b.n	8002f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4908      	ldr	r1, [pc, #32]	; (8002f2c <__NVIC_SetPriority+0x50>)
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	3b04      	subs	r3, #4
 8002f14:	0112      	lsls	r2, r2, #4
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	440b      	add	r3, r1
 8002f1a:	761a      	strb	r2, [r3, #24]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000e100 	.word	0xe000e100
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <NVIC_EncodePriority>:
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f1c3 0307 	rsb	r3, r3, #7
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	bf28      	it	cs
 8002f4e:	2304      	movcs	r3, #4
 8002f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3304      	adds	r3, #4
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d902      	bls.n	8002f60 <NVIC_EncodePriority+0x30>
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3b03      	subs	r3, #3
 8002f5e:	e000      	b.n	8002f62 <NVIC_EncodePriority+0x32>
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	401a      	ands	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f78:	f04f 31ff 	mov.w	r1, #4294967295
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43d9      	mvns	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	4313      	orrs	r3, r2
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3724      	adds	r7, #36	; 0x24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <SysTick_Config>:
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa8:	d301      	bcc.n	8002fae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00f      	b.n	8002fce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <SysTick_Config+0x40>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb6:	210f      	movs	r1, #15
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	f7ff ff8e 	bl	8002edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <SysTick_Config+0x40>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc6:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <SysTick_Config+0x40>)
 8002fc8:	2207      	movs	r2, #7
 8002fca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	e000e010 	.word	0xe000e010

08002fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ff29 	bl	8002e3c <__NVIC_SetPriorityGrouping>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003004:	f7ff ff3e 	bl	8002e84 <__NVIC_GetPriorityGrouping>
 8003008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	6978      	ldr	r0, [r7, #20]
 8003010:	f7ff ff8e 	bl	8002f30 <NVIC_EncodePriority>
 8003014:	4602      	mov	r2, r0
 8003016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff5d 	bl	8002edc <__NVIC_SetPriority>
}
 8003022:	bf00      	nop
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff31 	bl	8002ea0 <__NVIC_EnableIRQ>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ffa2 	bl	8002f98 <SysTick_Config>
 8003054:	4603      	mov	r3, r0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306e:	e148      	b.n	8003302 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2101      	movs	r1, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 813a 	beq.w	80032fc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d005      	beq.n	80030a0 <HAL_GPIO_Init+0x40>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d130      	bne.n	8003102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030d6:	2201      	movs	r2, #1
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	f003 0201 	and.w	r2, r3, #1
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b03      	cmp	r3, #3
 800310c:	d017      	beq.n	800313e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	2203      	movs	r2, #3
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d123      	bne.n	8003192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	08da      	lsrs	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3208      	adds	r2, #8
 800318c:	6939      	ldr	r1, [r7, #16]
 800318e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0203 	and.w	r2, r3, #3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8094 	beq.w	80032fc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d4:	4b52      	ldr	r3, [pc, #328]	; (8003320 <HAL_GPIO_Init+0x2c0>)
 80031d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d8:	4a51      	ldr	r2, [pc, #324]	; (8003320 <HAL_GPIO_Init+0x2c0>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6613      	str	r3, [r2, #96]	; 0x60
 80031e0:	4b4f      	ldr	r3, [pc, #316]	; (8003320 <HAL_GPIO_Init+0x2c0>)
 80031e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ec:	4a4d      	ldr	r2, [pc, #308]	; (8003324 <HAL_GPIO_Init+0x2c4>)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003216:	d00d      	beq.n	8003234 <HAL_GPIO_Init+0x1d4>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a43      	ldr	r2, [pc, #268]	; (8003328 <HAL_GPIO_Init+0x2c8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <HAL_GPIO_Init+0x1d0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a42      	ldr	r2, [pc, #264]	; (800332c <HAL_GPIO_Init+0x2cc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_GPIO_Init+0x1cc>
 8003228:	2302      	movs	r3, #2
 800322a:	e004      	b.n	8003236 <HAL_GPIO_Init+0x1d6>
 800322c:	2307      	movs	r3, #7
 800322e:	e002      	b.n	8003236 <HAL_GPIO_Init+0x1d6>
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_GPIO_Init+0x1d6>
 8003234:	2300      	movs	r3, #0
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	f002 0203 	and.w	r2, r2, #3
 800323c:	0092      	lsls	r2, r2, #2
 800323e:	4093      	lsls	r3, r2
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003246:	4937      	ldr	r1, [pc, #220]	; (8003324 <HAL_GPIO_Init+0x2c4>)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	3302      	adds	r3, #2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003254:	4b36      	ldr	r3, [pc, #216]	; (8003330 <HAL_GPIO_Init+0x2d0>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	43db      	mvns	r3, r3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003278:	4a2d      	ldr	r2, [pc, #180]	; (8003330 <HAL_GPIO_Init+0x2d0>)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <HAL_GPIO_Init+0x2d0>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	43db      	mvns	r3, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032a2:	4a23      	ldr	r2, [pc, #140]	; (8003330 <HAL_GPIO_Init+0x2d0>)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032a8:	4b21      	ldr	r3, [pc, #132]	; (8003330 <HAL_GPIO_Init+0x2d0>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032cc:	4a18      	ldr	r2, [pc, #96]	; (8003330 <HAL_GPIO_Init+0x2d0>)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_GPIO_Init+0x2d0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032f6:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <HAL_GPIO_Init+0x2d0>)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	f47f aeaf 	bne.w	8003070 <HAL_GPIO_Init+0x10>
  }
}
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40021000 	.word	0x40021000
 8003324:	40010000 	.word	0x40010000
 8003328:	48000400 	.word	0x48000400
 800332c:	48000800 	.word	0x48000800
 8003330:	40010400 	.word	0x40010400

08003334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
 8003340:	4613      	mov	r3, r2
 8003342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003344:	787b      	ldrb	r3, [r7, #1]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003350:	e002      	b.n	8003358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003352:	887a      	ldrh	r2, [r7, #2]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800336e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40007000 	.word	0x40007000

08003384 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <HAL_PWREx_GetVoltageRange+0x18>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40007000 	.word	0x40007000

080033a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ae:	d130      	bne.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b0:	4b23      	ldr	r3, [pc, #140]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033bc:	d038      	beq.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033c6:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033ce:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2232      	movs	r2, #50	; 0x32
 80033d4:	fb02 f303 	mul.w	r3, r2, r3
 80033d8:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0c9b      	lsrs	r3, r3, #18
 80033e0:	3301      	adds	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e4:	e002      	b.n	80033ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f8:	d102      	bne.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f2      	bne.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340c:	d110      	bne.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e00f      	b.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341e:	d007      	beq.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003428:	4a05      	ldr	r2, [pc, #20]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800342e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40007000 	.word	0x40007000
 8003444:	20000000 	.word	0x20000000
 8003448:	431bde83 	.word	0x431bde83

0800344c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f000 bc02 	b.w	8003c64 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003460:	4b96      	ldr	r3, [pc, #600]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 030c 	and.w	r3, r3, #12
 8003468:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346a:	4b94      	ldr	r3, [pc, #592]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80e4 	beq.w	800364a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <HAL_RCC_OscConfig+0x4c>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	f040 808b 	bne.w	80035a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b01      	cmp	r3, #1
 8003494:	f040 8087 	bne.w	80035a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003498:	4b88      	ldr	r3, [pc, #544]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_OscConfig+0x64>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e3d9      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1a      	ldr	r2, [r3, #32]
 80034b4:	4b81      	ldr	r3, [pc, #516]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_RCC_OscConfig+0x7e>
 80034c0:	4b7e      	ldr	r3, [pc, #504]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c8:	e005      	b.n	80034d6 <HAL_RCC_OscConfig+0x8a>
 80034ca:	4b7c      	ldr	r3, [pc, #496]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80034cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d223      	bcs.n	8003522 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fd54 	bl	8003f8c <RCC_SetFlashLatencyFromMSIRange>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e3ba      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ee:	4b73      	ldr	r3, [pc, #460]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a72      	ldr	r2, [pc, #456]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80034f4:	f043 0308 	orr.w	r3, r3, #8
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b70      	ldr	r3, [pc, #448]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	496d      	ldr	r1, [pc, #436]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350c:	4b6b      	ldr	r3, [pc, #428]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	4968      	ldr	r1, [pc, #416]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
 8003520:	e025      	b.n	800356e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003522:	4b66      	ldr	r3, [pc, #408]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a65      	ldr	r2, [pc, #404]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b63      	ldr	r3, [pc, #396]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4960      	ldr	r1, [pc, #384]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003540:	4b5e      	ldr	r3, [pc, #376]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	495b      	ldr	r1, [pc, #364]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fd14 	bl	8003f8c <RCC_SetFlashLatencyFromMSIRange>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e37a      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800356e:	f000 fc81 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003572:	4602      	mov	r2, r0
 8003574:	4b51      	ldr	r3, [pc, #324]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	4950      	ldr	r1, [pc, #320]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003580:	5ccb      	ldrb	r3, [r1, r3]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	4a4e      	ldr	r2, [pc, #312]	; (80036c4 <HAL_RCC_OscConfig+0x278>)
 800358c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800358e:	4b4e      	ldr	r3, [pc, #312]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe f834 	bl	8001600 <HAL_InitTick>
 8003598:	4603      	mov	r3, r0
 800359a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d052      	beq.n	8003648 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	e35e      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d032      	beq.n	8003614 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035ae:	4b43      	ldr	r3, [pc, #268]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a42      	ldr	r2, [pc, #264]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035ba:	f7fe f871 	bl	80016a0 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035c2:	f7fe f86d 	bl	80016a0 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e347      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d4:	4b39      	ldr	r3, [pc, #228]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e0:	4b36      	ldr	r3, [pc, #216]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a35      	ldr	r2, [pc, #212]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035e6:	f043 0308 	orr.w	r3, r3, #8
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b33      	ldr	r3, [pc, #204]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4930      	ldr	r1, [pc, #192]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035fe:	4b2f      	ldr	r3, [pc, #188]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	492b      	ldr	r1, [pc, #172]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
 8003612:	e01a      	b.n	800364a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a28      	ldr	r2, [pc, #160]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003620:	f7fe f83e 	bl	80016a0 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003628:	f7fe f83a 	bl	80016a0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e314      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800363a:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x1dc>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d073      	beq.n	800373e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d005      	beq.n	8003668 <HAL_RCC_OscConfig+0x21c>
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d10e      	bne.n	8003680 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d10b      	bne.n	8003680 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	4b14      	ldr	r3, [pc, #80]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d063      	beq.n	800373c <HAL_RCC_OscConfig+0x2f0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d15f      	bne.n	800373c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e2f1      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003688:	d106      	bne.n	8003698 <HAL_RCC_OscConfig+0x24c>
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a0b      	ldr	r2, [pc, #44]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e025      	b.n	80036e4 <HAL_RCC_OscConfig+0x298>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a0:	d114      	bne.n	80036cc <HAL_RCC_OscConfig+0x280>
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a05      	ldr	r2, [pc, #20]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a02      	ldr	r2, [pc, #8]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e013      	b.n	80036e4 <HAL_RCC_OscConfig+0x298>
 80036bc:	40021000 	.word	0x40021000
 80036c0:	080076cc 	.word	0x080076cc
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000004 	.word	0x20000004
 80036cc:	4ba0      	ldr	r3, [pc, #640]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a9f      	ldr	r2, [pc, #636]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80036d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b9d      	ldr	r3, [pc, #628]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a9c      	ldr	r2, [pc, #624]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80036de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fd ffd8 	bl	80016a0 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fd ffd4 	bl	80016a0 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e2ae      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003706:	4b92      	ldr	r3, [pc, #584]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x2a8>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fd ffc4 	bl	80016a0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371c:	f7fd ffc0 	bl	80016a0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e29a      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800372e:	4b88      	ldr	r3, [pc, #544]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x2d0>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d060      	beq.n	800380c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d005      	beq.n	800375c <HAL_RCC_OscConfig+0x310>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d119      	bne.n	800378a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d116      	bne.n	800378a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800375c:	4b7c      	ldr	r3, [pc, #496]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_OscConfig+0x328>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e277      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	4b76      	ldr	r3, [pc, #472]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	4973      	ldr	r1, [pc, #460]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003788:	e040      	b.n	800380c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d023      	beq.n	80037da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003792:	4b6f      	ldr	r3, [pc, #444]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a6e      	ldr	r2, [pc, #440]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fd ff7f 	bl	80016a0 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fd ff7b 	bl	80016a0 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e255      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b8:	4b65      	ldr	r3, [pc, #404]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b62      	ldr	r3, [pc, #392]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	495f      	ldr	r1, [pc, #380]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	e018      	b.n	800380c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037da:	4b5d      	ldr	r3, [pc, #372]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a5c      	ldr	r2, [pc, #368]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80037e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fd ff5b 	bl	80016a0 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ee:	f7fd ff57 	bl	80016a0 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e231      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003800:	4b53      	ldr	r3, [pc, #332]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d03c      	beq.n	8003892 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01c      	beq.n	800385a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003820:	4b4b      	ldr	r3, [pc, #300]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003826:	4a4a      	ldr	r2, [pc, #296]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fd ff36 	bl	80016a0 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003838:	f7fd ff32 	bl	80016a0 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e20c      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800384a:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 800384c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ef      	beq.n	8003838 <HAL_RCC_OscConfig+0x3ec>
 8003858:	e01b      	b.n	8003892 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385a:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 800385c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003860:	4a3b      	ldr	r2, [pc, #236]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fd ff19 	bl	80016a0 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003872:	f7fd ff15 	bl	80016a0 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e1ef      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003884:	4b32      	ldr	r3, [pc, #200]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ef      	bne.n	8003872 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80a6 	beq.w	80039ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038a4:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10d      	bne.n	80038cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b0:	4b27      	ldr	r3, [pc, #156]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	4a26      	ldr	r2, [pc, #152]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80038b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6593      	str	r3, [r2, #88]	; 0x58
 80038bc:	4b24      	ldr	r3, [pc, #144]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038cc:	4b21      	ldr	r3, [pc, #132]	; (8003954 <HAL_RCC_OscConfig+0x508>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d118      	bne.n	800390a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038d8:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <HAL_RCC_OscConfig+0x508>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_RCC_OscConfig+0x508>)
 80038de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e4:	f7fd fedc 	bl	80016a0 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ec:	f7fd fed8 	bl	80016a0 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1b2      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <HAL_RCC_OscConfig+0x508>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d108      	bne.n	8003924 <HAL_RCC_OscConfig+0x4d8>
 8003912:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	4a0d      	ldr	r2, [pc, #52]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003922:	e029      	b.n	8003978 <HAL_RCC_OscConfig+0x52c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b05      	cmp	r3, #5
 800392a:	d115      	bne.n	8003958 <HAL_RCC_OscConfig+0x50c>
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003932:	4a07      	ldr	r2, [pc, #28]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800393c:	4b04      	ldr	r3, [pc, #16]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	4a03      	ldr	r2, [pc, #12]	; (8003950 <HAL_RCC_OscConfig+0x504>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800394c:	e014      	b.n	8003978 <HAL_RCC_OscConfig+0x52c>
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	40007000 	.word	0x40007000
 8003958:	4b9a      	ldr	r3, [pc, #616]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	4a99      	ldr	r2, [pc, #612]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003968:	4b96      	ldr	r3, [pc, #600]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	4a95      	ldr	r2, [pc, #596]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003970:	f023 0304 	bic.w	r3, r3, #4
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d016      	beq.n	80039ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd fe8e 	bl	80016a0 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fd fe8a 	bl	80016a0 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e162      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399e:	4b89      	ldr	r3, [pc, #548]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ed      	beq.n	8003988 <HAL_RCC_OscConfig+0x53c>
 80039ac:	e015      	b.n	80039da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fd fe77 	bl	80016a0 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fd fe73 	bl	80016a0 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e14b      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039cc:	4b7d      	ldr	r3, [pc, #500]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ed      	bne.n	80039b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039da:	7ffb      	ldrb	r3, [r7, #31]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d105      	bne.n	80039ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e0:	4b78      	ldr	r3, [pc, #480]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	4a77      	ldr	r2, [pc, #476]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 80039e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d03c      	beq.n	8003a72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01c      	beq.n	8003a3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a00:	4b70      	ldr	r3, [pc, #448]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a06:	4a6f      	ldr	r2, [pc, #444]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fd fe46 	bl	80016a0 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a18:	f7fd fe42 	bl	80016a0 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e11c      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a2a:	4b66      	ldr	r3, [pc, #408]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ef      	beq.n	8003a18 <HAL_RCC_OscConfig+0x5cc>
 8003a38:	e01b      	b.n	8003a72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a3a:	4b62      	ldr	r3, [pc, #392]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a40:	4a60      	ldr	r2, [pc, #384]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fd fe29 	bl	80016a0 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a52:	f7fd fe25 	bl	80016a0 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e0ff      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a64:	4b57      	ldr	r3, [pc, #348]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1ef      	bne.n	8003a52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80f3 	beq.w	8003c62 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	f040 80c9 	bne.w	8003c18 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a86:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 0203 	and.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d12c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d123      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d11b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d113      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d109      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d06b      	beq.n	8003bcc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d062      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003afa:	4b32      	ldr	r3, [pc, #200]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e0ac      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2d      	ldr	r2, [pc, #180]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b16:	f7fd fdc3 	bl	80016a0 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fd fdbf 	bl	80016a0 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e099      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b30:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f0      	bne.n	8003b1e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3c:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <HAL_RCC_OscConfig+0x77c>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	0112      	lsls	r2, r2, #4
 8003b50:	4311      	orrs	r1, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b56:	0212      	lsls	r2, r2, #8
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b5e:	0852      	lsrs	r2, r2, #1
 8003b60:	3a01      	subs	r2, #1
 8003b62:	0552      	lsls	r2, r2, #21
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b6a:	0852      	lsrs	r2, r2, #1
 8003b6c:	3a01      	subs	r2, #1
 8003b6e:	0652      	lsls	r2, r2, #25
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b76:	06d2      	lsls	r2, r2, #27
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	4912      	ldr	r1, [pc, #72]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b80:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0f      	ldr	r2, [pc, #60]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b8c:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4a0c      	ldr	r2, [pc, #48]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b98:	f7fd fd82 	bl	80016a0 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fd fd7e 	bl	80016a0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e058      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb2:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bbe:	e050      	b.n	8003c62 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e04f      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bcc:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d144      	bne.n	8003c62 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bd8:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a23      	ldr	r2, [pc, #140]	; (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003be4:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bf0:	f7fd fd56 	bl	80016a0 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fd fd52 	bl	80016a0 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e02c      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0a:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x7ac>
 8003c16:	e024      	b.n	8003c62 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d01f      	beq.n	8003c5e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a12      	ldr	r2, [pc, #72]	; (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd fd39 	bl	80016a0 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c32:	f7fd fd35 	bl	80016a0 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e00f      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	4905      	ldr	r1, [pc, #20]	; (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_RCC_OscConfig+0x824>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60cb      	str	r3, [r1, #12]
 8003c5c:	e001      	b.n	8003c62 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	feeefffc 	.word	0xfeeefffc

08003c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0e7      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c88:	4b75      	ldr	r3, [pc, #468]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d910      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b72      	ldr	r3, [pc, #456]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 0207 	bic.w	r2, r3, #7
 8003c9e:	4970      	ldr	r1, [pc, #448]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b6e      	ldr	r3, [pc, #440]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0cf      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d010      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	4b66      	ldr	r3, [pc, #408]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d908      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4960      	ldr	r1, [pc, #384]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d04c      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfa:	4b5a      	ldr	r3, [pc, #360]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d121      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e0a6      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d12:	4b54      	ldr	r3, [pc, #336]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d115      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e09a      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d2a:	4b4e      	ldr	r3, [pc, #312]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e08e      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d3a:	4b4a      	ldr	r3, [pc, #296]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e086      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d4a:	4b46      	ldr	r3, [pc, #280]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f023 0203 	bic.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4943      	ldr	r1, [pc, #268]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5c:	f7fd fca0 	bl	80016a0 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d64:	f7fd fc9c 	bl	80016a0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e06e      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	4b3a      	ldr	r3, [pc, #232]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 020c 	and.w	r2, r3, #12
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1eb      	bne.n	8003d64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d208      	bcs.n	8003dba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	492b      	ldr	r1, [pc, #172]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dba:	4b29      	ldr	r3, [pc, #164]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d210      	bcs.n	8003dea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc8:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 0207 	bic.w	r2, r3, #7
 8003dd0:	4923      	ldr	r1, [pc, #140]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd8:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d001      	beq.n	8003dea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e036      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df6:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	4918      	ldr	r1, [pc, #96]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d009      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e14:	4b13      	ldr	r3, [pc, #76]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4910      	ldr	r1, [pc, #64]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e28:	f000 f824 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	490b      	ldr	r1, [pc, #44]	; (8003e68 <HAL_RCC_ClockConfig+0x1f4>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
 8003e44:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <HAL_RCC_ClockConfig+0x1f8>)
 8003e46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e48:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x1fc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fd fbd7 	bl	8001600 <HAL_InitTick>
 8003e52:	4603      	mov	r3, r0
 8003e54:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e56:	7afb      	ldrb	r3, [r7, #11]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40022000 	.word	0x40022000
 8003e64:	40021000 	.word	0x40021000
 8003e68:	080076cc 	.word	0x080076cc
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	20000004 	.word	0x20000004

08003e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e82:	4b3e      	ldr	r3, [pc, #248]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e8c:	4b3b      	ldr	r3, [pc, #236]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	d121      	bne.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d11e      	bne.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ea8:	4b34      	ldr	r3, [pc, #208]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d107      	bne.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003eb4:	4b31      	ldr	r3, [pc, #196]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e005      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ec4:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ed0:	4a2b      	ldr	r2, [pc, #172]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ee4:	e00a      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d102      	bne.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eec:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	e004      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ef8:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8003efa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d134      	bne.n	8003f6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0xa6>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d003      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0xac>
 8003f18:	e005      	b.n	8003f26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f1c:	617b      	str	r3, [r7, #20]
      break;
 8003f1e:	e005      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f22:	617b      	str	r3, [r7, #20]
      break;
 8003f24:	e002      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	617b      	str	r3, [r7, #20]
      break;
 8003f2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f2c:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	3301      	adds	r3, #1
 8003f38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	0a1b      	lsrs	r3, r3, #8
 8003f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	fb03 f202 	mul.w	r2, r3, r2
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	0e5b      	lsrs	r3, r3, #25
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3724      	adds	r7, #36	; 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	080076dc 	.word	0x080076dc
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	007a1200 	.word	0x007a1200

08003f8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f98:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fa4:	f7ff f9ee 	bl	8003384 <HAL_PWREx_GetVoltageRange>
 8003fa8:	6178      	str	r0, [r7, #20]
 8003faa:	e014      	b.n	8003fd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	4a24      	ldr	r2, [pc, #144]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fc4:	f7ff f9de 	bl	8003384 <HAL_PWREx_GetVoltageRange>
 8003fc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fca:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fdc:	d10b      	bne.n	8003ff6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b80      	cmp	r3, #128	; 0x80
 8003fe2:	d919      	bls.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2ba0      	cmp	r3, #160	; 0xa0
 8003fe8:	d902      	bls.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fea:	2302      	movs	r3, #2
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	e013      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e010      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d902      	bls.n	8004002 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e00a      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d102      	bne.n	800400e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004008:	2302      	movs	r3, #2
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	e004      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b70      	cmp	r3, #112	; 0x70
 8004012:	d101      	bne.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004014:	2301      	movs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f023 0207 	bic.w	r2, r3, #7
 8004020:	4909      	ldr	r1, [pc, #36]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	429a      	cmp	r2, r3
 8004034:	d001      	beq.n	800403a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	40022000 	.word	0x40022000

0800404c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004054:	2300      	movs	r3, #0
 8004056:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004058:	2300      	movs	r3, #0
 800405a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004064:	2b00      	cmp	r3, #0
 8004066:	d031      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004070:	d01a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004072:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004076:	d814      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800407c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004080:	d10f      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004082:	4b5d      	ldr	r3, [pc, #372]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4a5c      	ldr	r2, [pc, #368]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800408e:	e00c      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f9ce 	bl	8004438 <RCCEx_PLLSAI1_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040a0:	e003      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	74fb      	strb	r3, [r7, #19]
      break;
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80040a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040b0:	4b51      	ldr	r3, [pc, #324]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	494e      	ldr	r1, [pc, #312]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040c6:	e001      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 809e 	beq.w	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040da:	2300      	movs	r3, #0
 80040dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040de:	4b46      	ldr	r3, [pc, #280]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80040ee:	2300      	movs	r3, #0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00d      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f4:	4b40      	ldr	r3, [pc, #256]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	4a3f      	ldr	r2, [pc, #252]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004100:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800410c:	2301      	movs	r3, #1
 800410e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004110:	4b3a      	ldr	r3, [pc, #232]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a39      	ldr	r2, [pc, #228]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800411c:	f7fd fac0 	bl	80016a0 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004122:	e009      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004124:	f7fd fabc 	bl	80016a0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d902      	bls.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	74fb      	strb	r3, [r7, #19]
        break;
 8004136:	e005      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ef      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d15a      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800414a:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004154:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01e      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	429a      	cmp	r2, r3
 8004164:	d019      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004166:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004170:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004172:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004178:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800417a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004182:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800418a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004192:	4a19      	ldr	r2, [pc, #100]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d016      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fd fa7c 	bl	80016a0 <HAL_GetTick>
 80041a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041aa:	e00b      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ac:	f7fd fa78 	bl	80016a0 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d902      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	74fb      	strb	r3, [r7, #19]
            break;
 80041c2:	e006      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0ec      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10b      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d8:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e6:	4904      	ldr	r1, [pc, #16]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041ee:	e009      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	74bb      	strb	r3, [r7, #18]
 80041f4:	e006      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004204:	7c7b      	ldrb	r3, [r7, #17]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420a:	4b8a      	ldr	r3, [pc, #552]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	4a89      	ldr	r2, [pc, #548]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004214:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004222:	4b84      	ldr	r3, [pc, #528]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f023 0203 	bic.w	r2, r3, #3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	4980      	ldr	r1, [pc, #512]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004244:	4b7b      	ldr	r3, [pc, #492]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f023 020c 	bic.w	r2, r3, #12
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	4978      	ldr	r1, [pc, #480]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004266:	4b73      	ldr	r3, [pc, #460]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	496f      	ldr	r1, [pc, #444]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004288:	4b6a      	ldr	r3, [pc, #424]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004296:	4967      	ldr	r1, [pc, #412]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042aa:	4b62      	ldr	r3, [pc, #392]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	495e      	ldr	r1, [pc, #376]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042cc:	4b59      	ldr	r3, [pc, #356]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	4956      	ldr	r1, [pc, #344]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ee:	4b51      	ldr	r3, [pc, #324]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	494d      	ldr	r1, [pc, #308]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d028      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004310:	4b48      	ldr	r3, [pc, #288]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	4945      	ldr	r1, [pc, #276]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800432e:	d106      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004330:	4b40      	ldr	r3, [pc, #256]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a3f      	ldr	r2, [pc, #252]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800433a:	60d3      	str	r3, [r2, #12]
 800433c:	e011      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004346:	d10c      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	2101      	movs	r1, #1
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f872 	bl	8004438 <RCCEx_PLLSAI1_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d028      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	492d      	ldr	r1, [pc, #180]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800438c:	d106      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438e:	4b29      	ldr	r3, [pc, #164]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4a28      	ldr	r2, [pc, #160]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004398:	60d3      	str	r3, [r2, #12]
 800439a:	e011      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3304      	adds	r3, #4
 80043aa:	2101      	movs	r1, #1
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 f843 	bl	8004438 <RCCEx_PLLSAI1_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043b6:	7cfb      	ldrb	r3, [r7, #19]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01c      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043cc:	4b19      	ldr	r3, [pc, #100]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043da:	4916      	ldr	r1, [pc, #88]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ea:	d10c      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3304      	adds	r3, #4
 80043f0:	2102      	movs	r1, #2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 f820 	bl	8004438 <RCCEx_PLLSAI1_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043fc:	7cfb      	ldrb	r3, [r7, #19]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004412:	4b08      	ldr	r3, [pc, #32]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004418:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004420:	4904      	ldr	r1, [pc, #16]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004428:	7cbb      	ldrb	r3, [r7, #18]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000

08004438 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004446:	4b74      	ldr	r3, [pc, #464]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d018      	beq.n	8004484 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004452:	4b71      	ldr	r3, [pc, #452]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0203 	and.w	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d10d      	bne.n	800447e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
       ||
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800446a:	4b6b      	ldr	r3, [pc, #428]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
       ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d047      	beq.n	800450e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	73fb      	strb	r3, [r7, #15]
 8004482:	e044      	b.n	800450e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d018      	beq.n	80044be <RCCEx_PLLSAI1_Config+0x86>
 800448c:	2b03      	cmp	r3, #3
 800448e:	d825      	bhi.n	80044dc <RCCEx_PLLSAI1_Config+0xa4>
 8004490:	2b01      	cmp	r3, #1
 8004492:	d002      	beq.n	800449a <RCCEx_PLLSAI1_Config+0x62>
 8004494:	2b02      	cmp	r3, #2
 8004496:	d009      	beq.n	80044ac <RCCEx_PLLSAI1_Config+0x74>
 8004498:	e020      	b.n	80044dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800449a:	4b5f      	ldr	r3, [pc, #380]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11d      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044aa:	e01a      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044ac:	4b5a      	ldr	r3, [pc, #360]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d116      	bne.n	80044e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044bc:	e013      	b.n	80044e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044be:	4b56      	ldr	r3, [pc, #344]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ca:	4b53      	ldr	r3, [pc, #332]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044da:	e006      	b.n	80044ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
      break;
 80044e0:	e004      	b.n	80044ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044f2:	4b49      	ldr	r3, [pc, #292]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6819      	ldr	r1, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	3b01      	subs	r3, #1
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	430b      	orrs	r3, r1
 8004508:	4943      	ldr	r1, [pc, #268]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800450a:	4313      	orrs	r3, r2
 800450c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d17c      	bne.n	800460e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004514:	4b40      	ldr	r3, [pc, #256]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a3f      	ldr	r2, [pc, #252]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800451a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800451e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004520:	f7fd f8be 	bl	80016a0 <HAL_GetTick>
 8004524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004526:	e009      	b.n	800453c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004528:	f7fd f8ba 	bl	80016a0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d902      	bls.n	800453c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	73fb      	strb	r3, [r7, #15]
        break;
 800453a:	e005      	b.n	8004548 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800453c:	4b36      	ldr	r3, [pc, #216]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ef      	bne.n	8004528 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d15f      	bne.n	800460e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d110      	bne.n	8004576 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004554:	4b30      	ldr	r3, [pc, #192]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800455c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6892      	ldr	r2, [r2, #8]
 8004564:	0211      	lsls	r1, r2, #8
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68d2      	ldr	r2, [r2, #12]
 800456a:	06d2      	lsls	r2, r2, #27
 800456c:	430a      	orrs	r2, r1
 800456e:	492a      	ldr	r1, [pc, #168]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004570:	4313      	orrs	r3, r2
 8004572:	610b      	str	r3, [r1, #16]
 8004574:	e027      	b.n	80045c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d112      	bne.n	80045a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800457c:	4b26      	ldr	r3, [pc, #152]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004584:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6892      	ldr	r2, [r2, #8]
 800458c:	0211      	lsls	r1, r2, #8
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6912      	ldr	r2, [r2, #16]
 8004592:	0852      	lsrs	r2, r2, #1
 8004594:	3a01      	subs	r2, #1
 8004596:	0552      	lsls	r2, r2, #21
 8004598:	430a      	orrs	r2, r1
 800459a:	491f      	ldr	r1, [pc, #124]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	610b      	str	r3, [r1, #16]
 80045a0:	e011      	b.n	80045c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a2:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6892      	ldr	r2, [r2, #8]
 80045b2:	0211      	lsls	r1, r2, #8
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6952      	ldr	r2, [r2, #20]
 80045b8:	0852      	lsrs	r2, r2, #1
 80045ba:	3a01      	subs	r2, #1
 80045bc:	0652      	lsls	r2, r2, #25
 80045be:	430a      	orrs	r2, r1
 80045c0:	4915      	ldr	r1, [pc, #84]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a13      	ldr	r2, [pc, #76]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d2:	f7fd f865 	bl	80016a0 <HAL_GetTick>
 80045d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d8:	e009      	b.n	80045ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045da:	f7fd f861 	bl	80016a0 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d902      	bls.n	80045ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	73fb      	strb	r3, [r7, #15]
          break;
 80045ec:	e005      	b.n	80045fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ef      	beq.n	80045da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d106      	bne.n	800460e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	4903      	ldr	r1, [pc, #12]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800460a:	4313      	orrs	r3, r2
 800460c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800460e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021000 	.word	0x40021000

0800461c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e049      	b.n	80046c2 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	795b      	ldrb	r3, [r3, #5]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d105      	bne.n	8004644 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fc fe4a 	bl	80012d8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0204 	orr.w	r2, r2, #4
 8004658:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d104      	bne.n	8004672 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2204      	movs	r2, #4
 800466c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e027      	b.n	80046c2 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004672:	f7fd f815 	bl	80016a0 <HAL_GetTick>
 8004676:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004678:	e015      	b.n	80046a6 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800467a:	f7fd f811 	bl	80016a0 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d90e      	bls.n	80046a6 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b04      	cmp	r3, #4
 8004694:	d107      	bne.n	80046a6 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2204      	movs	r2, #4
 800469a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e00d      	b.n	80046c2 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d0e2      	beq.n	800467a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d06c      	beq.n	80047b6 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7fc fe11 	bl	8001318 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	22ca      	movs	r2, #202	; 0xca
 8004704:	625a      	str	r2, [r3, #36]	; 0x24
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2253      	movs	r2, #83	; 0x53
 800470c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f9a0 	bl	8004a54 <RTC_EnterInitMode>
 8004714:	4603      	mov	r3, r0
 8004716:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d14b      	bne.n	80047b6 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800472c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004730:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6899      	ldr	r1, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	68d2      	ldr	r2, [r2, #12]
 8004758:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6919      	ldr	r1, [r3, #16]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	041a      	lsls	r2, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f9a4 	bl	8004abc <RTC_ExitInitMode>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d11b      	bne.n	80047b6 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0203 	bic.w	r2, r2, #3
 800478c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	22ff      	movs	r2, #255	; 0xff
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_RTC_SetTime+0x1a>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e08b      	b.n	80048f2 <HAL_RTC_SetTime+0x132>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	22ca      	movs	r2, #202	; 0xca
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2253      	movs	r2, #83	; 0x53
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f92a 	bl	8004a54 <RTC_EnterInitMode>
 8004800:	4603      	mov	r3, r0
 8004802:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d163      	bne.n	80048d2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d126      	bne.n	800485e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2200      	movs	r2, #0
 8004822:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f000 f985 	bl	8004b38 <RTC_ByteToBcd2>
 800482e:	4603      	mov	r3, r0
 8004830:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	785b      	ldrb	r3, [r3, #1]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 f97e 	bl	8004b38 <RTC_ByteToBcd2>
 800483c:	4603      	mov	r3, r0
 800483e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004840:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	789b      	ldrb	r3, [r3, #2]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f976 	bl	8004b38 <RTC_ByteToBcd2>
 800484c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800484e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	78db      	ldrb	r3, [r3, #3]
 8004856:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e018      	b.n	8004890 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2200      	movs	r2, #0
 8004870:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800487e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004884:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	78db      	ldrb	r3, [r3, #3]
 800488a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800489a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800489e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6899      	ldr	r1, [r3, #8]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	431a      	orrs	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f8f7 	bl	8004abc <RTC_ExitInitMode>
 80048ce:	4603      	mov	r3, r0
 80048d0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	22ff      	movs	r2, #255	; 0xff
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80048da:	7cfb      	ldrb	r3, [r7, #19]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d103      	bne.n	80048e8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd90      	pop	{r4, r7, pc}

080048fa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048fa:	b590      	push	{r4, r7, lr}
 80048fc:	b087      	sub	sp, #28
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_RTC_SetDate+0x1a>
 8004910:	2302      	movs	r3, #2
 8004912:	e075      	b.n	8004a00 <HAL_RTC_SetDate+0x106>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10e      	bne.n	8004948 <HAL_RTC_SetDate+0x4e>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	785b      	ldrb	r3, [r3, #1]
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	f023 0310 	bic.w	r3, r3, #16
 800493e:	b2db      	uxtb	r3, r3
 8004940:	330a      	adds	r3, #10
 8004942:	b2da      	uxtb	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11c      	bne.n	8004988 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	78db      	ldrb	r3, [r3, #3]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f8f0 	bl	8004b38 <RTC_ByteToBcd2>
 8004958:	4603      	mov	r3, r0
 800495a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	4618      	mov	r0, r3
 8004962:	f000 f8e9 	bl	8004b38 <RTC_ByteToBcd2>
 8004966:	4603      	mov	r3, r0
 8004968:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800496a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	789b      	ldrb	r3, [r3, #2]
 8004970:	4618      	mov	r0, r3
 8004972:	f000 f8e1 	bl	8004b38 <RTC_ByteToBcd2>
 8004976:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004978:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	e00e      	b.n	80049a6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	78db      	ldrb	r3, [r3, #3]
 800498c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	785b      	ldrb	r3, [r3, #1]
 8004992:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004994:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800499a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	22ca      	movs	r2, #202	; 0xca
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2253      	movs	r2, #83	; 0x53
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f84c 	bl	8004a54 <RTC_EnterInitMode>
 80049bc:	4603      	mov	r3, r0
 80049be:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049d4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f870 	bl	8004abc <RTC_ExitInitMode>
 80049dc:	4603      	mov	r3, r0
 80049de:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	22ff      	movs	r2, #255	; 0xff
 80049e6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd90      	pop	{r4, r7, pc}

08004a08 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a1e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004a20:	f7fc fe3e 	bl	80016a0 <HAL_GetTick>
 8004a24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a26:	e009      	b.n	8004a3c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a28:	f7fc fe3a 	bl	80016a0 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a36:	d901      	bls.n	8004a3c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e007      	b.n	8004a4c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0ee      	beq.n	8004a28 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d120      	bne.n	8004ab0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f04f 32ff 	mov.w	r2, #4294967295
 8004a76:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004a78:	f7fc fe12 	bl	80016a0 <HAL_GetTick>
 8004a7c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a7e:	e00d      	b.n	8004a9c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004a80:	f7fc fe0e 	bl	80016a0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a8e:	d905      	bls.n	8004a9c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2203      	movs	r2, #3
 8004a98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <RTC_EnterInitMode+0x5c>
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d1e7      	bne.n	8004a80 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <RTC_ExitInitMode+0x78>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4a19      	ldr	r2, [pc, #100]	; (8004b34 <RTC_ExitInitMode+0x78>)
 8004ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004ad4:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <RTC_ExitInitMode+0x78>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10c      	bne.n	8004afa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff ff91 	bl	8004a08 <HAL_RTC_WaitForSynchro>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01e      	beq.n	8004b2a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2203      	movs	r2, #3
 8004af0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	73fb      	strb	r3, [r7, #15]
 8004af8:	e017      	b.n	8004b2a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004afa:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <RTC_ExitInitMode+0x78>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	4a0d      	ldr	r2, [pc, #52]	; (8004b34 <RTC_ExitInitMode+0x78>)
 8004b00:	f023 0320 	bic.w	r3, r3, #32
 8004b04:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff ff7e 	bl	8004a08 <HAL_RTC_WaitForSynchro>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2203      	movs	r2, #3
 8004b16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b1e:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <RTC_ExitInitMode+0x78>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	4a04      	ldr	r2, [pc, #16]	; (8004b34 <RTC_ExitInitMode+0x78>)
 8004b24:	f043 0320 	orr.w	r3, r3, #32
 8004b28:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40002800 	.word	0x40002800

08004b38 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004b4a:	e005      	b.n	8004b58 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004b52:	7afb      	ldrb	r3, [r7, #11]
 8004b54:	3b0a      	subs	r3, #10
 8004b56:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004b58:	7afb      	ldrb	r3, [r7, #11]
 8004b5a:	2b09      	cmp	r3, #9
 8004b5c:	d8f6      	bhi.n	8004b4c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	7afb      	ldrb	r3, [r7, #11]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	b2db      	uxtb	r3, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004b80:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8004b82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b86:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004ba6:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f80b 	bl	8004bc4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40010400 	.word	0x40010400

08004bc4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <__errno>:
 8004bd8:	4b01      	ldr	r3, [pc, #4]	; (8004be0 <__errno+0x8>)
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	2000000c 	.word	0x2000000c

08004be4 <__libc_init_array>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	4d0d      	ldr	r5, [pc, #52]	; (8004c1c <__libc_init_array+0x38>)
 8004be8:	4c0d      	ldr	r4, [pc, #52]	; (8004c20 <__libc_init_array+0x3c>)
 8004bea:	1b64      	subs	r4, r4, r5
 8004bec:	10a4      	asrs	r4, r4, #2
 8004bee:	2600      	movs	r6, #0
 8004bf0:	42a6      	cmp	r6, r4
 8004bf2:	d109      	bne.n	8004c08 <__libc_init_array+0x24>
 8004bf4:	4d0b      	ldr	r5, [pc, #44]	; (8004c24 <__libc_init_array+0x40>)
 8004bf6:	4c0c      	ldr	r4, [pc, #48]	; (8004c28 <__libc_init_array+0x44>)
 8004bf8:	f002 fd4e 	bl	8007698 <_init>
 8004bfc:	1b64      	subs	r4, r4, r5
 8004bfe:	10a4      	asrs	r4, r4, #2
 8004c00:	2600      	movs	r6, #0
 8004c02:	42a6      	cmp	r6, r4
 8004c04:	d105      	bne.n	8004c12 <__libc_init_array+0x2e>
 8004c06:	bd70      	pop	{r4, r5, r6, pc}
 8004c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0c:	4798      	blx	r3
 8004c0e:	3601      	adds	r6, #1
 8004c10:	e7ee      	b.n	8004bf0 <__libc_init_array+0xc>
 8004c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c16:	4798      	blx	r3
 8004c18:	3601      	adds	r6, #1
 8004c1a:	e7f2      	b.n	8004c02 <__libc_init_array+0x1e>
 8004c1c:	08007ae4 	.word	0x08007ae4
 8004c20:	08007ae4 	.word	0x08007ae4
 8004c24:	08007ae4 	.word	0x08007ae4
 8004c28:	08007ae8 	.word	0x08007ae8

08004c2c <memset>:
 8004c2c:	4402      	add	r2, r0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d100      	bne.n	8004c36 <memset+0xa>
 8004c34:	4770      	bx	lr
 8004c36:	f803 1b01 	strb.w	r1, [r3], #1
 8004c3a:	e7f9      	b.n	8004c30 <memset+0x4>

08004c3c <__cvt>:
 8004c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c40:	ec55 4b10 	vmov	r4, r5, d0
 8004c44:	2d00      	cmp	r5, #0
 8004c46:	460e      	mov	r6, r1
 8004c48:	4619      	mov	r1, r3
 8004c4a:	462b      	mov	r3, r5
 8004c4c:	bfbb      	ittet	lt
 8004c4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c52:	461d      	movlt	r5, r3
 8004c54:	2300      	movge	r3, #0
 8004c56:	232d      	movlt	r3, #45	; 0x2d
 8004c58:	700b      	strb	r3, [r1, #0]
 8004c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c60:	4691      	mov	r9, r2
 8004c62:	f023 0820 	bic.w	r8, r3, #32
 8004c66:	bfbc      	itt	lt
 8004c68:	4622      	movlt	r2, r4
 8004c6a:	4614      	movlt	r4, r2
 8004c6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c70:	d005      	beq.n	8004c7e <__cvt+0x42>
 8004c72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c76:	d100      	bne.n	8004c7a <__cvt+0x3e>
 8004c78:	3601      	adds	r6, #1
 8004c7a:	2102      	movs	r1, #2
 8004c7c:	e000      	b.n	8004c80 <__cvt+0x44>
 8004c7e:	2103      	movs	r1, #3
 8004c80:	ab03      	add	r3, sp, #12
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	ab02      	add	r3, sp, #8
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	ec45 4b10 	vmov	d0, r4, r5
 8004c8c:	4653      	mov	r3, sl
 8004c8e:	4632      	mov	r2, r6
 8004c90:	f000 fce2 	bl	8005658 <_dtoa_r>
 8004c94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c98:	4607      	mov	r7, r0
 8004c9a:	d102      	bne.n	8004ca2 <__cvt+0x66>
 8004c9c:	f019 0f01 	tst.w	r9, #1
 8004ca0:	d022      	beq.n	8004ce8 <__cvt+0xac>
 8004ca2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ca6:	eb07 0906 	add.w	r9, r7, r6
 8004caa:	d110      	bne.n	8004cce <__cvt+0x92>
 8004cac:	783b      	ldrb	r3, [r7, #0]
 8004cae:	2b30      	cmp	r3, #48	; 0x30
 8004cb0:	d10a      	bne.n	8004cc8 <__cvt+0x8c>
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4629      	mov	r1, r5
 8004cba:	f7fb ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cbe:	b918      	cbnz	r0, 8004cc8 <__cvt+0x8c>
 8004cc0:	f1c6 0601 	rsb	r6, r6, #1
 8004cc4:	f8ca 6000 	str.w	r6, [sl]
 8004cc8:	f8da 3000 	ldr.w	r3, [sl]
 8004ccc:	4499      	add	r9, r3
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	f7fb fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cda:	b108      	cbz	r0, 8004ce0 <__cvt+0xa4>
 8004cdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ce0:	2230      	movs	r2, #48	; 0x30
 8004ce2:	9b03      	ldr	r3, [sp, #12]
 8004ce4:	454b      	cmp	r3, r9
 8004ce6:	d307      	bcc.n	8004cf8 <__cvt+0xbc>
 8004ce8:	9b03      	ldr	r3, [sp, #12]
 8004cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cec:	1bdb      	subs	r3, r3, r7
 8004cee:	4638      	mov	r0, r7
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	b004      	add	sp, #16
 8004cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf8:	1c59      	adds	r1, r3, #1
 8004cfa:	9103      	str	r1, [sp, #12]
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	e7f0      	b.n	8004ce2 <__cvt+0xa6>

08004d00 <__exponent>:
 8004d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d02:	4603      	mov	r3, r0
 8004d04:	2900      	cmp	r1, #0
 8004d06:	bfb8      	it	lt
 8004d08:	4249      	neglt	r1, r1
 8004d0a:	f803 2b02 	strb.w	r2, [r3], #2
 8004d0e:	bfb4      	ite	lt
 8004d10:	222d      	movlt	r2, #45	; 0x2d
 8004d12:	222b      	movge	r2, #43	; 0x2b
 8004d14:	2909      	cmp	r1, #9
 8004d16:	7042      	strb	r2, [r0, #1]
 8004d18:	dd2a      	ble.n	8004d70 <__exponent+0x70>
 8004d1a:	f10d 0407 	add.w	r4, sp, #7
 8004d1e:	46a4      	mov	ip, r4
 8004d20:	270a      	movs	r7, #10
 8004d22:	46a6      	mov	lr, r4
 8004d24:	460a      	mov	r2, r1
 8004d26:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d2a:	fb07 1516 	mls	r5, r7, r6, r1
 8004d2e:	3530      	adds	r5, #48	; 0x30
 8004d30:	2a63      	cmp	r2, #99	; 0x63
 8004d32:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	dcf1      	bgt.n	8004d22 <__exponent+0x22>
 8004d3e:	3130      	adds	r1, #48	; 0x30
 8004d40:	f1ae 0502 	sub.w	r5, lr, #2
 8004d44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d48:	1c44      	adds	r4, r0, #1
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4561      	cmp	r1, ip
 8004d4e:	d30a      	bcc.n	8004d66 <__exponent+0x66>
 8004d50:	f10d 0209 	add.w	r2, sp, #9
 8004d54:	eba2 020e 	sub.w	r2, r2, lr
 8004d58:	4565      	cmp	r5, ip
 8004d5a:	bf88      	it	hi
 8004d5c:	2200      	movhi	r2, #0
 8004d5e:	4413      	add	r3, r2
 8004d60:	1a18      	subs	r0, r3, r0
 8004d62:	b003      	add	sp, #12
 8004d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d6e:	e7ed      	b.n	8004d4c <__exponent+0x4c>
 8004d70:	2330      	movs	r3, #48	; 0x30
 8004d72:	3130      	adds	r1, #48	; 0x30
 8004d74:	7083      	strb	r3, [r0, #2]
 8004d76:	70c1      	strb	r1, [r0, #3]
 8004d78:	1d03      	adds	r3, r0, #4
 8004d7a:	e7f1      	b.n	8004d60 <__exponent+0x60>

08004d7c <_printf_float>:
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	ed2d 8b02 	vpush	{d8}
 8004d84:	b08d      	sub	sp, #52	; 0x34
 8004d86:	460c      	mov	r4, r1
 8004d88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d8c:	4616      	mov	r6, r2
 8004d8e:	461f      	mov	r7, r3
 8004d90:	4605      	mov	r5, r0
 8004d92:	f001 fb45 	bl	8006420 <_localeconv_r>
 8004d96:	f8d0 a000 	ldr.w	sl, [r0]
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	f7fb fa18 	bl	80001d0 <strlen>
 8004da0:	2300      	movs	r3, #0
 8004da2:	930a      	str	r3, [sp, #40]	; 0x28
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	9305      	str	r3, [sp, #20]
 8004da8:	f8d8 3000 	ldr.w	r3, [r8]
 8004dac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004db0:	3307      	adds	r3, #7
 8004db2:	f023 0307 	bic.w	r3, r3, #7
 8004db6:	f103 0208 	add.w	r2, r3, #8
 8004dba:	f8c8 2000 	str.w	r2, [r8]
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004dc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004dca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004dce:	9307      	str	r3, [sp, #28]
 8004dd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8004dd4:	ee08 0a10 	vmov	s16, r0
 8004dd8:	4b9f      	ldr	r3, [pc, #636]	; (8005058 <_printf_float+0x2dc>)
 8004dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dde:	f04f 32ff 	mov.w	r2, #4294967295
 8004de2:	f7fb fea3 	bl	8000b2c <__aeabi_dcmpun>
 8004de6:	bb88      	cbnz	r0, 8004e4c <_printf_float+0xd0>
 8004de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dec:	4b9a      	ldr	r3, [pc, #616]	; (8005058 <_printf_float+0x2dc>)
 8004dee:	f04f 32ff 	mov.w	r2, #4294967295
 8004df2:	f7fb fe7d 	bl	8000af0 <__aeabi_dcmple>
 8004df6:	bb48      	cbnz	r0, 8004e4c <_printf_float+0xd0>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	4649      	mov	r1, r9
 8004e00:	f7fb fe6c 	bl	8000adc <__aeabi_dcmplt>
 8004e04:	b110      	cbz	r0, 8004e0c <_printf_float+0x90>
 8004e06:	232d      	movs	r3, #45	; 0x2d
 8004e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e0c:	4b93      	ldr	r3, [pc, #588]	; (800505c <_printf_float+0x2e0>)
 8004e0e:	4894      	ldr	r0, [pc, #592]	; (8005060 <_printf_float+0x2e4>)
 8004e10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e14:	bf94      	ite	ls
 8004e16:	4698      	movls	r8, r3
 8004e18:	4680      	movhi	r8, r0
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	6123      	str	r3, [r4, #16]
 8004e1e:	9b05      	ldr	r3, [sp, #20]
 8004e20:	f023 0204 	bic.w	r2, r3, #4
 8004e24:	6022      	str	r2, [r4, #0]
 8004e26:	f04f 0900 	mov.w	r9, #0
 8004e2a:	9700      	str	r7, [sp, #0]
 8004e2c:	4633      	mov	r3, r6
 8004e2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e30:	4621      	mov	r1, r4
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 f9d8 	bl	80051e8 <_printf_common>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	f040 8090 	bne.w	8004f5e <_printf_float+0x1e2>
 8004e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e42:	b00d      	add	sp, #52	; 0x34
 8004e44:	ecbd 8b02 	vpop	{d8}
 8004e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	464b      	mov	r3, r9
 8004e50:	4640      	mov	r0, r8
 8004e52:	4649      	mov	r1, r9
 8004e54:	f7fb fe6a 	bl	8000b2c <__aeabi_dcmpun>
 8004e58:	b140      	cbz	r0, 8004e6c <_printf_float+0xf0>
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bfbc      	itt	lt
 8004e60:	232d      	movlt	r3, #45	; 0x2d
 8004e62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e66:	487f      	ldr	r0, [pc, #508]	; (8005064 <_printf_float+0x2e8>)
 8004e68:	4b7f      	ldr	r3, [pc, #508]	; (8005068 <_printf_float+0x2ec>)
 8004e6a:	e7d1      	b.n	8004e10 <_printf_float+0x94>
 8004e6c:	6863      	ldr	r3, [r4, #4]
 8004e6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e72:	9206      	str	r2, [sp, #24]
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	d13f      	bne.n	8004ef8 <_printf_float+0x17c>
 8004e78:	2306      	movs	r3, #6
 8004e7a:	6063      	str	r3, [r4, #4]
 8004e7c:	9b05      	ldr	r3, [sp, #20]
 8004e7e:	6861      	ldr	r1, [r4, #4]
 8004e80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e84:	2300      	movs	r3, #0
 8004e86:	9303      	str	r3, [sp, #12]
 8004e88:	ab0a      	add	r3, sp, #40	; 0x28
 8004e8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e8e:	ab09      	add	r3, sp, #36	; 0x24
 8004e90:	ec49 8b10 	vmov	d0, r8, r9
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	6022      	str	r2, [r4, #0]
 8004e98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f7ff fecd 	bl	8004c3c <__cvt>
 8004ea2:	9b06      	ldr	r3, [sp, #24]
 8004ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ea6:	2b47      	cmp	r3, #71	; 0x47
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	d108      	bne.n	8004ebe <_printf_float+0x142>
 8004eac:	1cc8      	adds	r0, r1, #3
 8004eae:	db02      	blt.n	8004eb6 <_printf_float+0x13a>
 8004eb0:	6863      	ldr	r3, [r4, #4]
 8004eb2:	4299      	cmp	r1, r3
 8004eb4:	dd41      	ble.n	8004f3a <_printf_float+0x1be>
 8004eb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8004eba:	fa5f fb8b 	uxtb.w	fp, fp
 8004ebe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ec2:	d820      	bhi.n	8004f06 <_printf_float+0x18a>
 8004ec4:	3901      	subs	r1, #1
 8004ec6:	465a      	mov	r2, fp
 8004ec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ecc:	9109      	str	r1, [sp, #36]	; 0x24
 8004ece:	f7ff ff17 	bl	8004d00 <__exponent>
 8004ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ed4:	1813      	adds	r3, r2, r0
 8004ed6:	2a01      	cmp	r2, #1
 8004ed8:	4681      	mov	r9, r0
 8004eda:	6123      	str	r3, [r4, #16]
 8004edc:	dc02      	bgt.n	8004ee4 <_printf_float+0x168>
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	07d2      	lsls	r2, r2, #31
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_float+0x16c>
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	6123      	str	r3, [r4, #16]
 8004ee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d09c      	beq.n	8004e2a <_printf_float+0xae>
 8004ef0:	232d      	movs	r3, #45	; 0x2d
 8004ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef6:	e798      	b.n	8004e2a <_printf_float+0xae>
 8004ef8:	9a06      	ldr	r2, [sp, #24]
 8004efa:	2a47      	cmp	r2, #71	; 0x47
 8004efc:	d1be      	bne.n	8004e7c <_printf_float+0x100>
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1bc      	bne.n	8004e7c <_printf_float+0x100>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e7b9      	b.n	8004e7a <_printf_float+0xfe>
 8004f06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f0a:	d118      	bne.n	8004f3e <_printf_float+0x1c2>
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	6863      	ldr	r3, [r4, #4]
 8004f10:	dd0b      	ble.n	8004f2a <_printf_float+0x1ae>
 8004f12:	6121      	str	r1, [r4, #16]
 8004f14:	b913      	cbnz	r3, 8004f1c <_printf_float+0x1a0>
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	07d0      	lsls	r0, r2, #31
 8004f1a:	d502      	bpl.n	8004f22 <_printf_float+0x1a6>
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	440b      	add	r3, r1
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f24:	f04f 0900 	mov.w	r9, #0
 8004f28:	e7de      	b.n	8004ee8 <_printf_float+0x16c>
 8004f2a:	b913      	cbnz	r3, 8004f32 <_printf_float+0x1b6>
 8004f2c:	6822      	ldr	r2, [r4, #0]
 8004f2e:	07d2      	lsls	r2, r2, #31
 8004f30:	d501      	bpl.n	8004f36 <_printf_float+0x1ba>
 8004f32:	3302      	adds	r3, #2
 8004f34:	e7f4      	b.n	8004f20 <_printf_float+0x1a4>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e7f2      	b.n	8004f20 <_printf_float+0x1a4>
 8004f3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f40:	4299      	cmp	r1, r3
 8004f42:	db05      	blt.n	8004f50 <_printf_float+0x1d4>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	6121      	str	r1, [r4, #16]
 8004f48:	07d8      	lsls	r0, r3, #31
 8004f4a:	d5ea      	bpl.n	8004f22 <_printf_float+0x1a6>
 8004f4c:	1c4b      	adds	r3, r1, #1
 8004f4e:	e7e7      	b.n	8004f20 <_printf_float+0x1a4>
 8004f50:	2900      	cmp	r1, #0
 8004f52:	bfd4      	ite	le
 8004f54:	f1c1 0202 	rsble	r2, r1, #2
 8004f58:	2201      	movgt	r2, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	e7e0      	b.n	8004f20 <_printf_float+0x1a4>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	055a      	lsls	r2, r3, #21
 8004f62:	d407      	bmi.n	8004f74 <_printf_float+0x1f8>
 8004f64:	6923      	ldr	r3, [r4, #16]
 8004f66:	4642      	mov	r2, r8
 8004f68:	4631      	mov	r1, r6
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	47b8      	blx	r7
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d12c      	bne.n	8004fcc <_printf_float+0x250>
 8004f72:	e764      	b.n	8004e3e <_printf_float+0xc2>
 8004f74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f78:	f240 80e0 	bls.w	800513c <_printf_float+0x3c0>
 8004f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f80:	2200      	movs	r2, #0
 8004f82:	2300      	movs	r3, #0
 8004f84:	f7fb fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d034      	beq.n	8004ff6 <_printf_float+0x27a>
 8004f8c:	4a37      	ldr	r2, [pc, #220]	; (800506c <_printf_float+0x2f0>)
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4631      	mov	r1, r6
 8004f92:	4628      	mov	r0, r5
 8004f94:	47b8      	blx	r7
 8004f96:	3001      	adds	r0, #1
 8004f98:	f43f af51 	beq.w	8004e3e <_printf_float+0xc2>
 8004f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	db02      	blt.n	8004faa <_printf_float+0x22e>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	07d8      	lsls	r0, r3, #31
 8004fa8:	d510      	bpl.n	8004fcc <_printf_float+0x250>
 8004faa:	ee18 3a10 	vmov	r3, s16
 8004fae:	4652      	mov	r2, sl
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	f43f af41 	beq.w	8004e3e <_printf_float+0xc2>
 8004fbc:	f04f 0800 	mov.w	r8, #0
 8004fc0:	f104 091a 	add.w	r9, r4, #26
 8004fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	4543      	cmp	r3, r8
 8004fca:	dc09      	bgt.n	8004fe0 <_printf_float+0x264>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	079b      	lsls	r3, r3, #30
 8004fd0:	f100 8105 	bmi.w	80051de <_printf_float+0x462>
 8004fd4:	68e0      	ldr	r0, [r4, #12]
 8004fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fd8:	4298      	cmp	r0, r3
 8004fda:	bfb8      	it	lt
 8004fdc:	4618      	movlt	r0, r3
 8004fde:	e730      	b.n	8004e42 <_printf_float+0xc6>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	464a      	mov	r2, r9
 8004fe4:	4631      	mov	r1, r6
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	47b8      	blx	r7
 8004fea:	3001      	adds	r0, #1
 8004fec:	f43f af27 	beq.w	8004e3e <_printf_float+0xc2>
 8004ff0:	f108 0801 	add.w	r8, r8, #1
 8004ff4:	e7e6      	b.n	8004fc4 <_printf_float+0x248>
 8004ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	dc39      	bgt.n	8005070 <_printf_float+0x2f4>
 8004ffc:	4a1b      	ldr	r2, [pc, #108]	; (800506c <_printf_float+0x2f0>)
 8004ffe:	2301      	movs	r3, #1
 8005000:	4631      	mov	r1, r6
 8005002:	4628      	mov	r0, r5
 8005004:	47b8      	blx	r7
 8005006:	3001      	adds	r0, #1
 8005008:	f43f af19 	beq.w	8004e3e <_printf_float+0xc2>
 800500c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005010:	4313      	orrs	r3, r2
 8005012:	d102      	bne.n	800501a <_printf_float+0x29e>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	07d9      	lsls	r1, r3, #31
 8005018:	d5d8      	bpl.n	8004fcc <_printf_float+0x250>
 800501a:	ee18 3a10 	vmov	r3, s16
 800501e:	4652      	mov	r2, sl
 8005020:	4631      	mov	r1, r6
 8005022:	4628      	mov	r0, r5
 8005024:	47b8      	blx	r7
 8005026:	3001      	adds	r0, #1
 8005028:	f43f af09 	beq.w	8004e3e <_printf_float+0xc2>
 800502c:	f04f 0900 	mov.w	r9, #0
 8005030:	f104 0a1a 	add.w	sl, r4, #26
 8005034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005036:	425b      	negs	r3, r3
 8005038:	454b      	cmp	r3, r9
 800503a:	dc01      	bgt.n	8005040 <_printf_float+0x2c4>
 800503c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800503e:	e792      	b.n	8004f66 <_printf_float+0x1ea>
 8005040:	2301      	movs	r3, #1
 8005042:	4652      	mov	r2, sl
 8005044:	4631      	mov	r1, r6
 8005046:	4628      	mov	r0, r5
 8005048:	47b8      	blx	r7
 800504a:	3001      	adds	r0, #1
 800504c:	f43f aef7 	beq.w	8004e3e <_printf_float+0xc2>
 8005050:	f109 0901 	add.w	r9, r9, #1
 8005054:	e7ee      	b.n	8005034 <_printf_float+0x2b8>
 8005056:	bf00      	nop
 8005058:	7fefffff 	.word	0x7fefffff
 800505c:	08007710 	.word	0x08007710
 8005060:	08007714 	.word	0x08007714
 8005064:	0800771c 	.word	0x0800771c
 8005068:	08007718 	.word	0x08007718
 800506c:	08007720 	.word	0x08007720
 8005070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005074:	429a      	cmp	r2, r3
 8005076:	bfa8      	it	ge
 8005078:	461a      	movge	r2, r3
 800507a:	2a00      	cmp	r2, #0
 800507c:	4691      	mov	r9, r2
 800507e:	dc37      	bgt.n	80050f0 <_printf_float+0x374>
 8005080:	f04f 0b00 	mov.w	fp, #0
 8005084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005088:	f104 021a 	add.w	r2, r4, #26
 800508c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800508e:	9305      	str	r3, [sp, #20]
 8005090:	eba3 0309 	sub.w	r3, r3, r9
 8005094:	455b      	cmp	r3, fp
 8005096:	dc33      	bgt.n	8005100 <_printf_float+0x384>
 8005098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800509c:	429a      	cmp	r2, r3
 800509e:	db3b      	blt.n	8005118 <_printf_float+0x39c>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	07da      	lsls	r2, r3, #31
 80050a4:	d438      	bmi.n	8005118 <_printf_float+0x39c>
 80050a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a8:	9a05      	ldr	r2, [sp, #20]
 80050aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050ac:	1a9a      	subs	r2, r3, r2
 80050ae:	eba3 0901 	sub.w	r9, r3, r1
 80050b2:	4591      	cmp	r9, r2
 80050b4:	bfa8      	it	ge
 80050b6:	4691      	movge	r9, r2
 80050b8:	f1b9 0f00 	cmp.w	r9, #0
 80050bc:	dc35      	bgt.n	800512a <_printf_float+0x3ae>
 80050be:	f04f 0800 	mov.w	r8, #0
 80050c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050c6:	f104 0a1a 	add.w	sl, r4, #26
 80050ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	eba3 0309 	sub.w	r3, r3, r9
 80050d4:	4543      	cmp	r3, r8
 80050d6:	f77f af79 	ble.w	8004fcc <_printf_float+0x250>
 80050da:	2301      	movs	r3, #1
 80050dc:	4652      	mov	r2, sl
 80050de:	4631      	mov	r1, r6
 80050e0:	4628      	mov	r0, r5
 80050e2:	47b8      	blx	r7
 80050e4:	3001      	adds	r0, #1
 80050e6:	f43f aeaa 	beq.w	8004e3e <_printf_float+0xc2>
 80050ea:	f108 0801 	add.w	r8, r8, #1
 80050ee:	e7ec      	b.n	80050ca <_printf_float+0x34e>
 80050f0:	4613      	mov	r3, r2
 80050f2:	4631      	mov	r1, r6
 80050f4:	4642      	mov	r2, r8
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b8      	blx	r7
 80050fa:	3001      	adds	r0, #1
 80050fc:	d1c0      	bne.n	8005080 <_printf_float+0x304>
 80050fe:	e69e      	b.n	8004e3e <_printf_float+0xc2>
 8005100:	2301      	movs	r3, #1
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	9205      	str	r2, [sp, #20]
 8005108:	47b8      	blx	r7
 800510a:	3001      	adds	r0, #1
 800510c:	f43f ae97 	beq.w	8004e3e <_printf_float+0xc2>
 8005110:	9a05      	ldr	r2, [sp, #20]
 8005112:	f10b 0b01 	add.w	fp, fp, #1
 8005116:	e7b9      	b.n	800508c <_printf_float+0x310>
 8005118:	ee18 3a10 	vmov	r3, s16
 800511c:	4652      	mov	r2, sl
 800511e:	4631      	mov	r1, r6
 8005120:	4628      	mov	r0, r5
 8005122:	47b8      	blx	r7
 8005124:	3001      	adds	r0, #1
 8005126:	d1be      	bne.n	80050a6 <_printf_float+0x32a>
 8005128:	e689      	b.n	8004e3e <_printf_float+0xc2>
 800512a:	9a05      	ldr	r2, [sp, #20]
 800512c:	464b      	mov	r3, r9
 800512e:	4442      	add	r2, r8
 8005130:	4631      	mov	r1, r6
 8005132:	4628      	mov	r0, r5
 8005134:	47b8      	blx	r7
 8005136:	3001      	adds	r0, #1
 8005138:	d1c1      	bne.n	80050be <_printf_float+0x342>
 800513a:	e680      	b.n	8004e3e <_printf_float+0xc2>
 800513c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800513e:	2a01      	cmp	r2, #1
 8005140:	dc01      	bgt.n	8005146 <_printf_float+0x3ca>
 8005142:	07db      	lsls	r3, r3, #31
 8005144:	d538      	bpl.n	80051b8 <_printf_float+0x43c>
 8005146:	2301      	movs	r3, #1
 8005148:	4642      	mov	r2, r8
 800514a:	4631      	mov	r1, r6
 800514c:	4628      	mov	r0, r5
 800514e:	47b8      	blx	r7
 8005150:	3001      	adds	r0, #1
 8005152:	f43f ae74 	beq.w	8004e3e <_printf_float+0xc2>
 8005156:	ee18 3a10 	vmov	r3, s16
 800515a:	4652      	mov	r2, sl
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	f43f ae6b 	beq.w	8004e3e <_printf_float+0xc2>
 8005168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800516c:	2200      	movs	r2, #0
 800516e:	2300      	movs	r3, #0
 8005170:	f7fb fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005174:	b9d8      	cbnz	r0, 80051ae <_printf_float+0x432>
 8005176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005178:	f108 0201 	add.w	r2, r8, #1
 800517c:	3b01      	subs	r3, #1
 800517e:	4631      	mov	r1, r6
 8005180:	4628      	mov	r0, r5
 8005182:	47b8      	blx	r7
 8005184:	3001      	adds	r0, #1
 8005186:	d10e      	bne.n	80051a6 <_printf_float+0x42a>
 8005188:	e659      	b.n	8004e3e <_printf_float+0xc2>
 800518a:	2301      	movs	r3, #1
 800518c:	4652      	mov	r2, sl
 800518e:	4631      	mov	r1, r6
 8005190:	4628      	mov	r0, r5
 8005192:	47b8      	blx	r7
 8005194:	3001      	adds	r0, #1
 8005196:	f43f ae52 	beq.w	8004e3e <_printf_float+0xc2>
 800519a:	f108 0801 	add.w	r8, r8, #1
 800519e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a0:	3b01      	subs	r3, #1
 80051a2:	4543      	cmp	r3, r8
 80051a4:	dcf1      	bgt.n	800518a <_printf_float+0x40e>
 80051a6:	464b      	mov	r3, r9
 80051a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051ac:	e6dc      	b.n	8004f68 <_printf_float+0x1ec>
 80051ae:	f04f 0800 	mov.w	r8, #0
 80051b2:	f104 0a1a 	add.w	sl, r4, #26
 80051b6:	e7f2      	b.n	800519e <_printf_float+0x422>
 80051b8:	2301      	movs	r3, #1
 80051ba:	4642      	mov	r2, r8
 80051bc:	e7df      	b.n	800517e <_printf_float+0x402>
 80051be:	2301      	movs	r3, #1
 80051c0:	464a      	mov	r2, r9
 80051c2:	4631      	mov	r1, r6
 80051c4:	4628      	mov	r0, r5
 80051c6:	47b8      	blx	r7
 80051c8:	3001      	adds	r0, #1
 80051ca:	f43f ae38 	beq.w	8004e3e <_printf_float+0xc2>
 80051ce:	f108 0801 	add.w	r8, r8, #1
 80051d2:	68e3      	ldr	r3, [r4, #12]
 80051d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051d6:	1a5b      	subs	r3, r3, r1
 80051d8:	4543      	cmp	r3, r8
 80051da:	dcf0      	bgt.n	80051be <_printf_float+0x442>
 80051dc:	e6fa      	b.n	8004fd4 <_printf_float+0x258>
 80051de:	f04f 0800 	mov.w	r8, #0
 80051e2:	f104 0919 	add.w	r9, r4, #25
 80051e6:	e7f4      	b.n	80051d2 <_printf_float+0x456>

080051e8 <_printf_common>:
 80051e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	4616      	mov	r6, r2
 80051ee:	4699      	mov	r9, r3
 80051f0:	688a      	ldr	r2, [r1, #8]
 80051f2:	690b      	ldr	r3, [r1, #16]
 80051f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	bfb8      	it	lt
 80051fc:	4613      	movlt	r3, r2
 80051fe:	6033      	str	r3, [r6, #0]
 8005200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005204:	4607      	mov	r7, r0
 8005206:	460c      	mov	r4, r1
 8005208:	b10a      	cbz	r2, 800520e <_printf_common+0x26>
 800520a:	3301      	adds	r3, #1
 800520c:	6033      	str	r3, [r6, #0]
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	0699      	lsls	r1, r3, #26
 8005212:	bf42      	ittt	mi
 8005214:	6833      	ldrmi	r3, [r6, #0]
 8005216:	3302      	addmi	r3, #2
 8005218:	6033      	strmi	r3, [r6, #0]
 800521a:	6825      	ldr	r5, [r4, #0]
 800521c:	f015 0506 	ands.w	r5, r5, #6
 8005220:	d106      	bne.n	8005230 <_printf_common+0x48>
 8005222:	f104 0a19 	add.w	sl, r4, #25
 8005226:	68e3      	ldr	r3, [r4, #12]
 8005228:	6832      	ldr	r2, [r6, #0]
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	42ab      	cmp	r3, r5
 800522e:	dc26      	bgt.n	800527e <_printf_common+0x96>
 8005230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005234:	1e13      	subs	r3, r2, #0
 8005236:	6822      	ldr	r2, [r4, #0]
 8005238:	bf18      	it	ne
 800523a:	2301      	movne	r3, #1
 800523c:	0692      	lsls	r2, r2, #26
 800523e:	d42b      	bmi.n	8005298 <_printf_common+0xb0>
 8005240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005244:	4649      	mov	r1, r9
 8005246:	4638      	mov	r0, r7
 8005248:	47c0      	blx	r8
 800524a:	3001      	adds	r0, #1
 800524c:	d01e      	beq.n	800528c <_printf_common+0xa4>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	68e5      	ldr	r5, [r4, #12]
 8005252:	6832      	ldr	r2, [r6, #0]
 8005254:	f003 0306 	and.w	r3, r3, #6
 8005258:	2b04      	cmp	r3, #4
 800525a:	bf08      	it	eq
 800525c:	1aad      	subeq	r5, r5, r2
 800525e:	68a3      	ldr	r3, [r4, #8]
 8005260:	6922      	ldr	r2, [r4, #16]
 8005262:	bf0c      	ite	eq
 8005264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005268:	2500      	movne	r5, #0
 800526a:	4293      	cmp	r3, r2
 800526c:	bfc4      	itt	gt
 800526e:	1a9b      	subgt	r3, r3, r2
 8005270:	18ed      	addgt	r5, r5, r3
 8005272:	2600      	movs	r6, #0
 8005274:	341a      	adds	r4, #26
 8005276:	42b5      	cmp	r5, r6
 8005278:	d11a      	bne.n	80052b0 <_printf_common+0xc8>
 800527a:	2000      	movs	r0, #0
 800527c:	e008      	b.n	8005290 <_printf_common+0xa8>
 800527e:	2301      	movs	r3, #1
 8005280:	4652      	mov	r2, sl
 8005282:	4649      	mov	r1, r9
 8005284:	4638      	mov	r0, r7
 8005286:	47c0      	blx	r8
 8005288:	3001      	adds	r0, #1
 800528a:	d103      	bne.n	8005294 <_printf_common+0xac>
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005294:	3501      	adds	r5, #1
 8005296:	e7c6      	b.n	8005226 <_printf_common+0x3e>
 8005298:	18e1      	adds	r1, r4, r3
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	2030      	movs	r0, #48	; 0x30
 800529e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052a2:	4422      	add	r2, r4
 80052a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ac:	3302      	adds	r3, #2
 80052ae:	e7c7      	b.n	8005240 <_printf_common+0x58>
 80052b0:	2301      	movs	r3, #1
 80052b2:	4622      	mov	r2, r4
 80052b4:	4649      	mov	r1, r9
 80052b6:	4638      	mov	r0, r7
 80052b8:	47c0      	blx	r8
 80052ba:	3001      	adds	r0, #1
 80052bc:	d0e6      	beq.n	800528c <_printf_common+0xa4>
 80052be:	3601      	adds	r6, #1
 80052c0:	e7d9      	b.n	8005276 <_printf_common+0x8e>
	...

080052c4 <_printf_i>:
 80052c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c8:	7e0f      	ldrb	r7, [r1, #24]
 80052ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052cc:	2f78      	cmp	r7, #120	; 0x78
 80052ce:	4691      	mov	r9, r2
 80052d0:	4680      	mov	r8, r0
 80052d2:	460c      	mov	r4, r1
 80052d4:	469a      	mov	sl, r3
 80052d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052da:	d807      	bhi.n	80052ec <_printf_i+0x28>
 80052dc:	2f62      	cmp	r7, #98	; 0x62
 80052de:	d80a      	bhi.n	80052f6 <_printf_i+0x32>
 80052e0:	2f00      	cmp	r7, #0
 80052e2:	f000 80d8 	beq.w	8005496 <_printf_i+0x1d2>
 80052e6:	2f58      	cmp	r7, #88	; 0x58
 80052e8:	f000 80a3 	beq.w	8005432 <_printf_i+0x16e>
 80052ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f4:	e03a      	b.n	800536c <_printf_i+0xa8>
 80052f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052fa:	2b15      	cmp	r3, #21
 80052fc:	d8f6      	bhi.n	80052ec <_printf_i+0x28>
 80052fe:	a101      	add	r1, pc, #4	; (adr r1, 8005304 <_printf_i+0x40>)
 8005300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005304:	0800535d 	.word	0x0800535d
 8005308:	08005371 	.word	0x08005371
 800530c:	080052ed 	.word	0x080052ed
 8005310:	080052ed 	.word	0x080052ed
 8005314:	080052ed 	.word	0x080052ed
 8005318:	080052ed 	.word	0x080052ed
 800531c:	08005371 	.word	0x08005371
 8005320:	080052ed 	.word	0x080052ed
 8005324:	080052ed 	.word	0x080052ed
 8005328:	080052ed 	.word	0x080052ed
 800532c:	080052ed 	.word	0x080052ed
 8005330:	0800547d 	.word	0x0800547d
 8005334:	080053a1 	.word	0x080053a1
 8005338:	0800545f 	.word	0x0800545f
 800533c:	080052ed 	.word	0x080052ed
 8005340:	080052ed 	.word	0x080052ed
 8005344:	0800549f 	.word	0x0800549f
 8005348:	080052ed 	.word	0x080052ed
 800534c:	080053a1 	.word	0x080053a1
 8005350:	080052ed 	.word	0x080052ed
 8005354:	080052ed 	.word	0x080052ed
 8005358:	08005467 	.word	0x08005467
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	1d1a      	adds	r2, r3, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	602a      	str	r2, [r5, #0]
 8005364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800536c:	2301      	movs	r3, #1
 800536e:	e0a3      	b.n	80054b8 <_printf_i+0x1f4>
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	6829      	ldr	r1, [r5, #0]
 8005374:	0606      	lsls	r6, r0, #24
 8005376:	f101 0304 	add.w	r3, r1, #4
 800537a:	d50a      	bpl.n	8005392 <_printf_i+0xce>
 800537c:	680e      	ldr	r6, [r1, #0]
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	2e00      	cmp	r6, #0
 8005382:	da03      	bge.n	800538c <_printf_i+0xc8>
 8005384:	232d      	movs	r3, #45	; 0x2d
 8005386:	4276      	negs	r6, r6
 8005388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800538c:	485e      	ldr	r0, [pc, #376]	; (8005508 <_printf_i+0x244>)
 800538e:	230a      	movs	r3, #10
 8005390:	e019      	b.n	80053c6 <_printf_i+0x102>
 8005392:	680e      	ldr	r6, [r1, #0]
 8005394:	602b      	str	r3, [r5, #0]
 8005396:	f010 0f40 	tst.w	r0, #64	; 0x40
 800539a:	bf18      	it	ne
 800539c:	b236      	sxthne	r6, r6
 800539e:	e7ef      	b.n	8005380 <_printf_i+0xbc>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	6820      	ldr	r0, [r4, #0]
 80053a4:	1d19      	adds	r1, r3, #4
 80053a6:	6029      	str	r1, [r5, #0]
 80053a8:	0601      	lsls	r1, r0, #24
 80053aa:	d501      	bpl.n	80053b0 <_printf_i+0xec>
 80053ac:	681e      	ldr	r6, [r3, #0]
 80053ae:	e002      	b.n	80053b6 <_printf_i+0xf2>
 80053b0:	0646      	lsls	r6, r0, #25
 80053b2:	d5fb      	bpl.n	80053ac <_printf_i+0xe8>
 80053b4:	881e      	ldrh	r6, [r3, #0]
 80053b6:	4854      	ldr	r0, [pc, #336]	; (8005508 <_printf_i+0x244>)
 80053b8:	2f6f      	cmp	r7, #111	; 0x6f
 80053ba:	bf0c      	ite	eq
 80053bc:	2308      	moveq	r3, #8
 80053be:	230a      	movne	r3, #10
 80053c0:	2100      	movs	r1, #0
 80053c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053c6:	6865      	ldr	r5, [r4, #4]
 80053c8:	60a5      	str	r5, [r4, #8]
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	bfa2      	ittt	ge
 80053ce:	6821      	ldrge	r1, [r4, #0]
 80053d0:	f021 0104 	bicge.w	r1, r1, #4
 80053d4:	6021      	strge	r1, [r4, #0]
 80053d6:	b90e      	cbnz	r6, 80053dc <_printf_i+0x118>
 80053d8:	2d00      	cmp	r5, #0
 80053da:	d04d      	beq.n	8005478 <_printf_i+0x1b4>
 80053dc:	4615      	mov	r5, r2
 80053de:	fbb6 f1f3 	udiv	r1, r6, r3
 80053e2:	fb03 6711 	mls	r7, r3, r1, r6
 80053e6:	5dc7      	ldrb	r7, [r0, r7]
 80053e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053ec:	4637      	mov	r7, r6
 80053ee:	42bb      	cmp	r3, r7
 80053f0:	460e      	mov	r6, r1
 80053f2:	d9f4      	bls.n	80053de <_printf_i+0x11a>
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d10b      	bne.n	8005410 <_printf_i+0x14c>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	07de      	lsls	r6, r3, #31
 80053fc:	d508      	bpl.n	8005410 <_printf_i+0x14c>
 80053fe:	6923      	ldr	r3, [r4, #16]
 8005400:	6861      	ldr	r1, [r4, #4]
 8005402:	4299      	cmp	r1, r3
 8005404:	bfde      	ittt	le
 8005406:	2330      	movle	r3, #48	; 0x30
 8005408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800540c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005410:	1b52      	subs	r2, r2, r5
 8005412:	6122      	str	r2, [r4, #16]
 8005414:	f8cd a000 	str.w	sl, [sp]
 8005418:	464b      	mov	r3, r9
 800541a:	aa03      	add	r2, sp, #12
 800541c:	4621      	mov	r1, r4
 800541e:	4640      	mov	r0, r8
 8005420:	f7ff fee2 	bl	80051e8 <_printf_common>
 8005424:	3001      	adds	r0, #1
 8005426:	d14c      	bne.n	80054c2 <_printf_i+0x1fe>
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	b004      	add	sp, #16
 800542e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005432:	4835      	ldr	r0, [pc, #212]	; (8005508 <_printf_i+0x244>)
 8005434:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005438:	6829      	ldr	r1, [r5, #0]
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005440:	6029      	str	r1, [r5, #0]
 8005442:	061d      	lsls	r5, r3, #24
 8005444:	d514      	bpl.n	8005470 <_printf_i+0x1ac>
 8005446:	07df      	lsls	r7, r3, #31
 8005448:	bf44      	itt	mi
 800544a:	f043 0320 	orrmi.w	r3, r3, #32
 800544e:	6023      	strmi	r3, [r4, #0]
 8005450:	b91e      	cbnz	r6, 800545a <_printf_i+0x196>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	f023 0320 	bic.w	r3, r3, #32
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	2310      	movs	r3, #16
 800545c:	e7b0      	b.n	80053c0 <_printf_i+0xfc>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	f043 0320 	orr.w	r3, r3, #32
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	2378      	movs	r3, #120	; 0x78
 8005468:	4828      	ldr	r0, [pc, #160]	; (800550c <_printf_i+0x248>)
 800546a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800546e:	e7e3      	b.n	8005438 <_printf_i+0x174>
 8005470:	0659      	lsls	r1, r3, #25
 8005472:	bf48      	it	mi
 8005474:	b2b6      	uxthmi	r6, r6
 8005476:	e7e6      	b.n	8005446 <_printf_i+0x182>
 8005478:	4615      	mov	r5, r2
 800547a:	e7bb      	b.n	80053f4 <_printf_i+0x130>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	6826      	ldr	r6, [r4, #0]
 8005480:	6961      	ldr	r1, [r4, #20]
 8005482:	1d18      	adds	r0, r3, #4
 8005484:	6028      	str	r0, [r5, #0]
 8005486:	0635      	lsls	r5, r6, #24
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	d501      	bpl.n	8005490 <_printf_i+0x1cc>
 800548c:	6019      	str	r1, [r3, #0]
 800548e:	e002      	b.n	8005496 <_printf_i+0x1d2>
 8005490:	0670      	lsls	r0, r6, #25
 8005492:	d5fb      	bpl.n	800548c <_printf_i+0x1c8>
 8005494:	8019      	strh	r1, [r3, #0]
 8005496:	2300      	movs	r3, #0
 8005498:	6123      	str	r3, [r4, #16]
 800549a:	4615      	mov	r5, r2
 800549c:	e7ba      	b.n	8005414 <_printf_i+0x150>
 800549e:	682b      	ldr	r3, [r5, #0]
 80054a0:	1d1a      	adds	r2, r3, #4
 80054a2:	602a      	str	r2, [r5, #0]
 80054a4:	681d      	ldr	r5, [r3, #0]
 80054a6:	6862      	ldr	r2, [r4, #4]
 80054a8:	2100      	movs	r1, #0
 80054aa:	4628      	mov	r0, r5
 80054ac:	f7fa fe98 	bl	80001e0 <memchr>
 80054b0:	b108      	cbz	r0, 80054b6 <_printf_i+0x1f2>
 80054b2:	1b40      	subs	r0, r0, r5
 80054b4:	6060      	str	r0, [r4, #4]
 80054b6:	6863      	ldr	r3, [r4, #4]
 80054b8:	6123      	str	r3, [r4, #16]
 80054ba:	2300      	movs	r3, #0
 80054bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c0:	e7a8      	b.n	8005414 <_printf_i+0x150>
 80054c2:	6923      	ldr	r3, [r4, #16]
 80054c4:	462a      	mov	r2, r5
 80054c6:	4649      	mov	r1, r9
 80054c8:	4640      	mov	r0, r8
 80054ca:	47d0      	blx	sl
 80054cc:	3001      	adds	r0, #1
 80054ce:	d0ab      	beq.n	8005428 <_printf_i+0x164>
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	079b      	lsls	r3, r3, #30
 80054d4:	d413      	bmi.n	80054fe <_printf_i+0x23a>
 80054d6:	68e0      	ldr	r0, [r4, #12]
 80054d8:	9b03      	ldr	r3, [sp, #12]
 80054da:	4298      	cmp	r0, r3
 80054dc:	bfb8      	it	lt
 80054de:	4618      	movlt	r0, r3
 80054e0:	e7a4      	b.n	800542c <_printf_i+0x168>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4632      	mov	r2, r6
 80054e6:	4649      	mov	r1, r9
 80054e8:	4640      	mov	r0, r8
 80054ea:	47d0      	blx	sl
 80054ec:	3001      	adds	r0, #1
 80054ee:	d09b      	beq.n	8005428 <_printf_i+0x164>
 80054f0:	3501      	adds	r5, #1
 80054f2:	68e3      	ldr	r3, [r4, #12]
 80054f4:	9903      	ldr	r1, [sp, #12]
 80054f6:	1a5b      	subs	r3, r3, r1
 80054f8:	42ab      	cmp	r3, r5
 80054fa:	dcf2      	bgt.n	80054e2 <_printf_i+0x21e>
 80054fc:	e7eb      	b.n	80054d6 <_printf_i+0x212>
 80054fe:	2500      	movs	r5, #0
 8005500:	f104 0619 	add.w	r6, r4, #25
 8005504:	e7f5      	b.n	80054f2 <_printf_i+0x22e>
 8005506:	bf00      	nop
 8005508:	08007722 	.word	0x08007722
 800550c:	08007733 	.word	0x08007733

08005510 <iprintf>:
 8005510:	b40f      	push	{r0, r1, r2, r3}
 8005512:	4b0a      	ldr	r3, [pc, #40]	; (800553c <iprintf+0x2c>)
 8005514:	b513      	push	{r0, r1, r4, lr}
 8005516:	681c      	ldr	r4, [r3, #0]
 8005518:	b124      	cbz	r4, 8005524 <iprintf+0x14>
 800551a:	69a3      	ldr	r3, [r4, #24]
 800551c:	b913      	cbnz	r3, 8005524 <iprintf+0x14>
 800551e:	4620      	mov	r0, r4
 8005520:	f000 fee0 	bl	80062e4 <__sinit>
 8005524:	ab05      	add	r3, sp, #20
 8005526:	9a04      	ldr	r2, [sp, #16]
 8005528:	68a1      	ldr	r1, [r4, #8]
 800552a:	9301      	str	r3, [sp, #4]
 800552c:	4620      	mov	r0, r4
 800552e:	f001 fc39 	bl	8006da4 <_vfiprintf_r>
 8005532:	b002      	add	sp, #8
 8005534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005538:	b004      	add	sp, #16
 800553a:	4770      	bx	lr
 800553c:	2000000c 	.word	0x2000000c

08005540 <quorem>:
 8005540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005544:	6903      	ldr	r3, [r0, #16]
 8005546:	690c      	ldr	r4, [r1, #16]
 8005548:	42a3      	cmp	r3, r4
 800554a:	4607      	mov	r7, r0
 800554c:	f2c0 8081 	blt.w	8005652 <quorem+0x112>
 8005550:	3c01      	subs	r4, #1
 8005552:	f101 0814 	add.w	r8, r1, #20
 8005556:	f100 0514 	add.w	r5, r0, #20
 800555a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005564:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005568:	3301      	adds	r3, #1
 800556a:	429a      	cmp	r2, r3
 800556c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005570:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005574:	fbb2 f6f3 	udiv	r6, r2, r3
 8005578:	d331      	bcc.n	80055de <quorem+0x9e>
 800557a:	f04f 0e00 	mov.w	lr, #0
 800557e:	4640      	mov	r0, r8
 8005580:	46ac      	mov	ip, r5
 8005582:	46f2      	mov	sl, lr
 8005584:	f850 2b04 	ldr.w	r2, [r0], #4
 8005588:	b293      	uxth	r3, r2
 800558a:	fb06 e303 	mla	r3, r6, r3, lr
 800558e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005592:	b29b      	uxth	r3, r3
 8005594:	ebaa 0303 	sub.w	r3, sl, r3
 8005598:	f8dc a000 	ldr.w	sl, [ip]
 800559c:	0c12      	lsrs	r2, r2, #16
 800559e:	fa13 f38a 	uxtah	r3, r3, sl
 80055a2:	fb06 e202 	mla	r2, r6, r2, lr
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	9b00      	ldr	r3, [sp, #0]
 80055aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055ae:	b292      	uxth	r2, r2
 80055b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80055bc:	4581      	cmp	r9, r0
 80055be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055c2:	f84c 3b04 	str.w	r3, [ip], #4
 80055c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055ca:	d2db      	bcs.n	8005584 <quorem+0x44>
 80055cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80055d0:	b92b      	cbnz	r3, 80055de <quorem+0x9e>
 80055d2:	9b01      	ldr	r3, [sp, #4]
 80055d4:	3b04      	subs	r3, #4
 80055d6:	429d      	cmp	r5, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	d32e      	bcc.n	800563a <quorem+0xfa>
 80055dc:	613c      	str	r4, [r7, #16]
 80055de:	4638      	mov	r0, r7
 80055e0:	f001 f9be 	bl	8006960 <__mcmp>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	db24      	blt.n	8005632 <quorem+0xf2>
 80055e8:	3601      	adds	r6, #1
 80055ea:	4628      	mov	r0, r5
 80055ec:	f04f 0c00 	mov.w	ip, #0
 80055f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80055f4:	f8d0 e000 	ldr.w	lr, [r0]
 80055f8:	b293      	uxth	r3, r2
 80055fa:	ebac 0303 	sub.w	r3, ip, r3
 80055fe:	0c12      	lsrs	r2, r2, #16
 8005600:	fa13 f38e 	uxtah	r3, r3, lr
 8005604:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800560c:	b29b      	uxth	r3, r3
 800560e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005612:	45c1      	cmp	r9, r8
 8005614:	f840 3b04 	str.w	r3, [r0], #4
 8005618:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800561c:	d2e8      	bcs.n	80055f0 <quorem+0xb0>
 800561e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005626:	b922      	cbnz	r2, 8005632 <quorem+0xf2>
 8005628:	3b04      	subs	r3, #4
 800562a:	429d      	cmp	r5, r3
 800562c:	461a      	mov	r2, r3
 800562e:	d30a      	bcc.n	8005646 <quorem+0x106>
 8005630:	613c      	str	r4, [r7, #16]
 8005632:	4630      	mov	r0, r6
 8005634:	b003      	add	sp, #12
 8005636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	3b04      	subs	r3, #4
 800563e:	2a00      	cmp	r2, #0
 8005640:	d1cc      	bne.n	80055dc <quorem+0x9c>
 8005642:	3c01      	subs	r4, #1
 8005644:	e7c7      	b.n	80055d6 <quorem+0x96>
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	3b04      	subs	r3, #4
 800564a:	2a00      	cmp	r2, #0
 800564c:	d1f0      	bne.n	8005630 <quorem+0xf0>
 800564e:	3c01      	subs	r4, #1
 8005650:	e7eb      	b.n	800562a <quorem+0xea>
 8005652:	2000      	movs	r0, #0
 8005654:	e7ee      	b.n	8005634 <quorem+0xf4>
	...

08005658 <_dtoa_r>:
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	ed2d 8b04 	vpush	{d8-d9}
 8005660:	ec57 6b10 	vmov	r6, r7, d0
 8005664:	b093      	sub	sp, #76	; 0x4c
 8005666:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005668:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800566c:	9106      	str	r1, [sp, #24]
 800566e:	ee10 aa10 	vmov	sl, s0
 8005672:	4604      	mov	r4, r0
 8005674:	9209      	str	r2, [sp, #36]	; 0x24
 8005676:	930c      	str	r3, [sp, #48]	; 0x30
 8005678:	46bb      	mov	fp, r7
 800567a:	b975      	cbnz	r5, 800569a <_dtoa_r+0x42>
 800567c:	2010      	movs	r0, #16
 800567e:	f000 fed7 	bl	8006430 <malloc>
 8005682:	4602      	mov	r2, r0
 8005684:	6260      	str	r0, [r4, #36]	; 0x24
 8005686:	b920      	cbnz	r0, 8005692 <_dtoa_r+0x3a>
 8005688:	4ba7      	ldr	r3, [pc, #668]	; (8005928 <_dtoa_r+0x2d0>)
 800568a:	21ea      	movs	r1, #234	; 0xea
 800568c:	48a7      	ldr	r0, [pc, #668]	; (800592c <_dtoa_r+0x2d4>)
 800568e:	f001 fddf 	bl	8007250 <__assert_func>
 8005692:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005696:	6005      	str	r5, [r0, #0]
 8005698:	60c5      	str	r5, [r0, #12]
 800569a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800569c:	6819      	ldr	r1, [r3, #0]
 800569e:	b151      	cbz	r1, 80056b6 <_dtoa_r+0x5e>
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	604a      	str	r2, [r1, #4]
 80056a4:	2301      	movs	r3, #1
 80056a6:	4093      	lsls	r3, r2
 80056a8:	608b      	str	r3, [r1, #8]
 80056aa:	4620      	mov	r0, r4
 80056ac:	f000 ff16 	bl	80064dc <_Bfree>
 80056b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	1e3b      	subs	r3, r7, #0
 80056b8:	bfaa      	itet	ge
 80056ba:	2300      	movge	r3, #0
 80056bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80056c0:	f8c8 3000 	strge.w	r3, [r8]
 80056c4:	4b9a      	ldr	r3, [pc, #616]	; (8005930 <_dtoa_r+0x2d8>)
 80056c6:	bfbc      	itt	lt
 80056c8:	2201      	movlt	r2, #1
 80056ca:	f8c8 2000 	strlt.w	r2, [r8]
 80056ce:	ea33 030b 	bics.w	r3, r3, fp
 80056d2:	d11b      	bne.n	800570c <_dtoa_r+0xb4>
 80056d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056e0:	4333      	orrs	r3, r6
 80056e2:	f000 8592 	beq.w	800620a <_dtoa_r+0xbb2>
 80056e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056e8:	b963      	cbnz	r3, 8005704 <_dtoa_r+0xac>
 80056ea:	4b92      	ldr	r3, [pc, #584]	; (8005934 <_dtoa_r+0x2dc>)
 80056ec:	e022      	b.n	8005734 <_dtoa_r+0xdc>
 80056ee:	4b92      	ldr	r3, [pc, #584]	; (8005938 <_dtoa_r+0x2e0>)
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	3308      	adds	r3, #8
 80056f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	9801      	ldr	r0, [sp, #4]
 80056fa:	b013      	add	sp, #76	; 0x4c
 80056fc:	ecbd 8b04 	vpop	{d8-d9}
 8005700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005704:	4b8b      	ldr	r3, [pc, #556]	; (8005934 <_dtoa_r+0x2dc>)
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	3303      	adds	r3, #3
 800570a:	e7f3      	b.n	80056f4 <_dtoa_r+0x9c>
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	4650      	mov	r0, sl
 8005712:	4659      	mov	r1, fp
 8005714:	f7fb f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005718:	ec4b ab19 	vmov	d9, sl, fp
 800571c:	4680      	mov	r8, r0
 800571e:	b158      	cbz	r0, 8005738 <_dtoa_r+0xe0>
 8005720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005722:	2301      	movs	r3, #1
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 856b 	beq.w	8006204 <_dtoa_r+0xbac>
 800572e:	4883      	ldr	r0, [pc, #524]	; (800593c <_dtoa_r+0x2e4>)
 8005730:	6018      	str	r0, [r3, #0]
 8005732:	1e43      	subs	r3, r0, #1
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	e7df      	b.n	80056f8 <_dtoa_r+0xa0>
 8005738:	ec4b ab10 	vmov	d0, sl, fp
 800573c:	aa10      	add	r2, sp, #64	; 0x40
 800573e:	a911      	add	r1, sp, #68	; 0x44
 8005740:	4620      	mov	r0, r4
 8005742:	f001 f9b3 	bl	8006aac <__d2b>
 8005746:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800574a:	ee08 0a10 	vmov	s16, r0
 800574e:	2d00      	cmp	r5, #0
 8005750:	f000 8084 	beq.w	800585c <_dtoa_r+0x204>
 8005754:	ee19 3a90 	vmov	r3, s19
 8005758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800575c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005760:	4656      	mov	r6, sl
 8005762:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005766:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800576a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800576e:	4b74      	ldr	r3, [pc, #464]	; (8005940 <_dtoa_r+0x2e8>)
 8005770:	2200      	movs	r2, #0
 8005772:	4630      	mov	r0, r6
 8005774:	4639      	mov	r1, r7
 8005776:	f7fa fd87 	bl	8000288 <__aeabi_dsub>
 800577a:	a365      	add	r3, pc, #404	; (adr r3, 8005910 <_dtoa_r+0x2b8>)
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f7fa ff3a 	bl	80005f8 <__aeabi_dmul>
 8005784:	a364      	add	r3, pc, #400	; (adr r3, 8005918 <_dtoa_r+0x2c0>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f7fa fd7f 	bl	800028c <__adddf3>
 800578e:	4606      	mov	r6, r0
 8005790:	4628      	mov	r0, r5
 8005792:	460f      	mov	r7, r1
 8005794:	f7fa fec6 	bl	8000524 <__aeabi_i2d>
 8005798:	a361      	add	r3, pc, #388	; (adr r3, 8005920 <_dtoa_r+0x2c8>)
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	f7fa ff2b 	bl	80005f8 <__aeabi_dmul>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4630      	mov	r0, r6
 80057a8:	4639      	mov	r1, r7
 80057aa:	f7fa fd6f 	bl	800028c <__adddf3>
 80057ae:	4606      	mov	r6, r0
 80057b0:	460f      	mov	r7, r1
 80057b2:	f7fb f9d1 	bl	8000b58 <__aeabi_d2iz>
 80057b6:	2200      	movs	r2, #0
 80057b8:	9000      	str	r0, [sp, #0]
 80057ba:	2300      	movs	r3, #0
 80057bc:	4630      	mov	r0, r6
 80057be:	4639      	mov	r1, r7
 80057c0:	f7fb f98c 	bl	8000adc <__aeabi_dcmplt>
 80057c4:	b150      	cbz	r0, 80057dc <_dtoa_r+0x184>
 80057c6:	9800      	ldr	r0, [sp, #0]
 80057c8:	f7fa feac 	bl	8000524 <__aeabi_i2d>
 80057cc:	4632      	mov	r2, r6
 80057ce:	463b      	mov	r3, r7
 80057d0:	f7fb f97a 	bl	8000ac8 <__aeabi_dcmpeq>
 80057d4:	b910      	cbnz	r0, 80057dc <_dtoa_r+0x184>
 80057d6:	9b00      	ldr	r3, [sp, #0]
 80057d8:	3b01      	subs	r3, #1
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	9b00      	ldr	r3, [sp, #0]
 80057de:	2b16      	cmp	r3, #22
 80057e0:	d85a      	bhi.n	8005898 <_dtoa_r+0x240>
 80057e2:	9a00      	ldr	r2, [sp, #0]
 80057e4:	4b57      	ldr	r3, [pc, #348]	; (8005944 <_dtoa_r+0x2ec>)
 80057e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	ec51 0b19 	vmov	r0, r1, d9
 80057f2:	f7fb f973 	bl	8000adc <__aeabi_dcmplt>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d050      	beq.n	800589c <_dtoa_r+0x244>
 80057fa:	9b00      	ldr	r3, [sp, #0]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	2300      	movs	r3, #0
 8005802:	930b      	str	r3, [sp, #44]	; 0x2c
 8005804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005806:	1b5d      	subs	r5, r3, r5
 8005808:	1e6b      	subs	r3, r5, #1
 800580a:	9305      	str	r3, [sp, #20]
 800580c:	bf45      	ittet	mi
 800580e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005812:	9304      	strmi	r3, [sp, #16]
 8005814:	2300      	movpl	r3, #0
 8005816:	2300      	movmi	r3, #0
 8005818:	bf4c      	ite	mi
 800581a:	9305      	strmi	r3, [sp, #20]
 800581c:	9304      	strpl	r3, [sp, #16]
 800581e:	9b00      	ldr	r3, [sp, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	db3d      	blt.n	80058a0 <_dtoa_r+0x248>
 8005824:	9b05      	ldr	r3, [sp, #20]
 8005826:	9a00      	ldr	r2, [sp, #0]
 8005828:	920a      	str	r2, [sp, #40]	; 0x28
 800582a:	4413      	add	r3, r2
 800582c:	9305      	str	r3, [sp, #20]
 800582e:	2300      	movs	r3, #0
 8005830:	9307      	str	r3, [sp, #28]
 8005832:	9b06      	ldr	r3, [sp, #24]
 8005834:	2b09      	cmp	r3, #9
 8005836:	f200 8089 	bhi.w	800594c <_dtoa_r+0x2f4>
 800583a:	2b05      	cmp	r3, #5
 800583c:	bfc4      	itt	gt
 800583e:	3b04      	subgt	r3, #4
 8005840:	9306      	strgt	r3, [sp, #24]
 8005842:	9b06      	ldr	r3, [sp, #24]
 8005844:	f1a3 0302 	sub.w	r3, r3, #2
 8005848:	bfcc      	ite	gt
 800584a:	2500      	movgt	r5, #0
 800584c:	2501      	movle	r5, #1
 800584e:	2b03      	cmp	r3, #3
 8005850:	f200 8087 	bhi.w	8005962 <_dtoa_r+0x30a>
 8005854:	e8df f003 	tbb	[pc, r3]
 8005858:	59383a2d 	.word	0x59383a2d
 800585c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005860:	441d      	add	r5, r3
 8005862:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005866:	2b20      	cmp	r3, #32
 8005868:	bfc1      	itttt	gt
 800586a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800586e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005872:	fa0b f303 	lslgt.w	r3, fp, r3
 8005876:	fa26 f000 	lsrgt.w	r0, r6, r0
 800587a:	bfda      	itte	le
 800587c:	f1c3 0320 	rsble	r3, r3, #32
 8005880:	fa06 f003 	lslle.w	r0, r6, r3
 8005884:	4318      	orrgt	r0, r3
 8005886:	f7fa fe3d 	bl	8000504 <__aeabi_ui2d>
 800588a:	2301      	movs	r3, #1
 800588c:	4606      	mov	r6, r0
 800588e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005892:	3d01      	subs	r5, #1
 8005894:	930e      	str	r3, [sp, #56]	; 0x38
 8005896:	e76a      	b.n	800576e <_dtoa_r+0x116>
 8005898:	2301      	movs	r3, #1
 800589a:	e7b2      	b.n	8005802 <_dtoa_r+0x1aa>
 800589c:	900b      	str	r0, [sp, #44]	; 0x2c
 800589e:	e7b1      	b.n	8005804 <_dtoa_r+0x1ac>
 80058a0:	9b04      	ldr	r3, [sp, #16]
 80058a2:	9a00      	ldr	r2, [sp, #0]
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	9304      	str	r3, [sp, #16]
 80058a8:	4253      	negs	r3, r2
 80058aa:	9307      	str	r3, [sp, #28]
 80058ac:	2300      	movs	r3, #0
 80058ae:	930a      	str	r3, [sp, #40]	; 0x28
 80058b0:	e7bf      	b.n	8005832 <_dtoa_r+0x1da>
 80058b2:	2300      	movs	r3, #0
 80058b4:	9308      	str	r3, [sp, #32]
 80058b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	dc55      	bgt.n	8005968 <_dtoa_r+0x310>
 80058bc:	2301      	movs	r3, #1
 80058be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80058c2:	461a      	mov	r2, r3
 80058c4:	9209      	str	r2, [sp, #36]	; 0x24
 80058c6:	e00c      	b.n	80058e2 <_dtoa_r+0x28a>
 80058c8:	2301      	movs	r3, #1
 80058ca:	e7f3      	b.n	80058b4 <_dtoa_r+0x25c>
 80058cc:	2300      	movs	r3, #0
 80058ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058d0:	9308      	str	r3, [sp, #32]
 80058d2:	9b00      	ldr	r3, [sp, #0]
 80058d4:	4413      	add	r3, r2
 80058d6:	9302      	str	r3, [sp, #8]
 80058d8:	3301      	adds	r3, #1
 80058da:	2b01      	cmp	r3, #1
 80058dc:	9303      	str	r3, [sp, #12]
 80058de:	bfb8      	it	lt
 80058e0:	2301      	movlt	r3, #1
 80058e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80058e4:	2200      	movs	r2, #0
 80058e6:	6042      	str	r2, [r0, #4]
 80058e8:	2204      	movs	r2, #4
 80058ea:	f102 0614 	add.w	r6, r2, #20
 80058ee:	429e      	cmp	r6, r3
 80058f0:	6841      	ldr	r1, [r0, #4]
 80058f2:	d93d      	bls.n	8005970 <_dtoa_r+0x318>
 80058f4:	4620      	mov	r0, r4
 80058f6:	f000 fdb1 	bl	800645c <_Balloc>
 80058fa:	9001      	str	r0, [sp, #4]
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d13b      	bne.n	8005978 <_dtoa_r+0x320>
 8005900:	4b11      	ldr	r3, [pc, #68]	; (8005948 <_dtoa_r+0x2f0>)
 8005902:	4602      	mov	r2, r0
 8005904:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005908:	e6c0      	b.n	800568c <_dtoa_r+0x34>
 800590a:	2301      	movs	r3, #1
 800590c:	e7df      	b.n	80058ce <_dtoa_r+0x276>
 800590e:	bf00      	nop
 8005910:	636f4361 	.word	0x636f4361
 8005914:	3fd287a7 	.word	0x3fd287a7
 8005918:	8b60c8b3 	.word	0x8b60c8b3
 800591c:	3fc68a28 	.word	0x3fc68a28
 8005920:	509f79fb 	.word	0x509f79fb
 8005924:	3fd34413 	.word	0x3fd34413
 8005928:	08007751 	.word	0x08007751
 800592c:	08007768 	.word	0x08007768
 8005930:	7ff00000 	.word	0x7ff00000
 8005934:	0800774d 	.word	0x0800774d
 8005938:	08007744 	.word	0x08007744
 800593c:	08007721 	.word	0x08007721
 8005940:	3ff80000 	.word	0x3ff80000
 8005944:	080078b8 	.word	0x080078b8
 8005948:	080077c3 	.word	0x080077c3
 800594c:	2501      	movs	r5, #1
 800594e:	2300      	movs	r3, #0
 8005950:	9306      	str	r3, [sp, #24]
 8005952:	9508      	str	r5, [sp, #32]
 8005954:	f04f 33ff 	mov.w	r3, #4294967295
 8005958:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800595c:	2200      	movs	r2, #0
 800595e:	2312      	movs	r3, #18
 8005960:	e7b0      	b.n	80058c4 <_dtoa_r+0x26c>
 8005962:	2301      	movs	r3, #1
 8005964:	9308      	str	r3, [sp, #32]
 8005966:	e7f5      	b.n	8005954 <_dtoa_r+0x2fc>
 8005968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800596a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800596e:	e7b8      	b.n	80058e2 <_dtoa_r+0x28a>
 8005970:	3101      	adds	r1, #1
 8005972:	6041      	str	r1, [r0, #4]
 8005974:	0052      	lsls	r2, r2, #1
 8005976:	e7b8      	b.n	80058ea <_dtoa_r+0x292>
 8005978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800597a:	9a01      	ldr	r2, [sp, #4]
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	9b03      	ldr	r3, [sp, #12]
 8005980:	2b0e      	cmp	r3, #14
 8005982:	f200 809d 	bhi.w	8005ac0 <_dtoa_r+0x468>
 8005986:	2d00      	cmp	r5, #0
 8005988:	f000 809a 	beq.w	8005ac0 <_dtoa_r+0x468>
 800598c:	9b00      	ldr	r3, [sp, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	dd32      	ble.n	80059f8 <_dtoa_r+0x3a0>
 8005992:	4ab7      	ldr	r2, [pc, #732]	; (8005c70 <_dtoa_r+0x618>)
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800599c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059a0:	9b00      	ldr	r3, [sp, #0]
 80059a2:	05d8      	lsls	r0, r3, #23
 80059a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80059a8:	d516      	bpl.n	80059d8 <_dtoa_r+0x380>
 80059aa:	4bb2      	ldr	r3, [pc, #712]	; (8005c74 <_dtoa_r+0x61c>)
 80059ac:	ec51 0b19 	vmov	r0, r1, d9
 80059b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059b4:	f7fa ff4a 	bl	800084c <__aeabi_ddiv>
 80059b8:	f007 070f 	and.w	r7, r7, #15
 80059bc:	4682      	mov	sl, r0
 80059be:	468b      	mov	fp, r1
 80059c0:	2503      	movs	r5, #3
 80059c2:	4eac      	ldr	r6, [pc, #688]	; (8005c74 <_dtoa_r+0x61c>)
 80059c4:	b957      	cbnz	r7, 80059dc <_dtoa_r+0x384>
 80059c6:	4642      	mov	r2, r8
 80059c8:	464b      	mov	r3, r9
 80059ca:	4650      	mov	r0, sl
 80059cc:	4659      	mov	r1, fp
 80059ce:	f7fa ff3d 	bl	800084c <__aeabi_ddiv>
 80059d2:	4682      	mov	sl, r0
 80059d4:	468b      	mov	fp, r1
 80059d6:	e028      	b.n	8005a2a <_dtoa_r+0x3d2>
 80059d8:	2502      	movs	r5, #2
 80059da:	e7f2      	b.n	80059c2 <_dtoa_r+0x36a>
 80059dc:	07f9      	lsls	r1, r7, #31
 80059de:	d508      	bpl.n	80059f2 <_dtoa_r+0x39a>
 80059e0:	4640      	mov	r0, r8
 80059e2:	4649      	mov	r1, r9
 80059e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059e8:	f7fa fe06 	bl	80005f8 <__aeabi_dmul>
 80059ec:	3501      	adds	r5, #1
 80059ee:	4680      	mov	r8, r0
 80059f0:	4689      	mov	r9, r1
 80059f2:	107f      	asrs	r7, r7, #1
 80059f4:	3608      	adds	r6, #8
 80059f6:	e7e5      	b.n	80059c4 <_dtoa_r+0x36c>
 80059f8:	f000 809b 	beq.w	8005b32 <_dtoa_r+0x4da>
 80059fc:	9b00      	ldr	r3, [sp, #0]
 80059fe:	4f9d      	ldr	r7, [pc, #628]	; (8005c74 <_dtoa_r+0x61c>)
 8005a00:	425e      	negs	r6, r3
 8005a02:	4b9b      	ldr	r3, [pc, #620]	; (8005c70 <_dtoa_r+0x618>)
 8005a04:	f006 020f 	and.w	r2, r6, #15
 8005a08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	ec51 0b19 	vmov	r0, r1, d9
 8005a14:	f7fa fdf0 	bl	80005f8 <__aeabi_dmul>
 8005a18:	1136      	asrs	r6, r6, #4
 8005a1a:	4682      	mov	sl, r0
 8005a1c:	468b      	mov	fp, r1
 8005a1e:	2300      	movs	r3, #0
 8005a20:	2502      	movs	r5, #2
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	d17a      	bne.n	8005b1c <_dtoa_r+0x4c4>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1d3      	bne.n	80059d2 <_dtoa_r+0x37a>
 8005a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8082 	beq.w	8005b36 <_dtoa_r+0x4de>
 8005a32:	4b91      	ldr	r3, [pc, #580]	; (8005c78 <_dtoa_r+0x620>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	4650      	mov	r0, sl
 8005a38:	4659      	mov	r1, fp
 8005a3a:	f7fb f84f 	bl	8000adc <__aeabi_dcmplt>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d079      	beq.n	8005b36 <_dtoa_r+0x4de>
 8005a42:	9b03      	ldr	r3, [sp, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d076      	beq.n	8005b36 <_dtoa_r+0x4de>
 8005a48:	9b02      	ldr	r3, [sp, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	dd36      	ble.n	8005abc <_dtoa_r+0x464>
 8005a4e:	9b00      	ldr	r3, [sp, #0]
 8005a50:	4650      	mov	r0, sl
 8005a52:	4659      	mov	r1, fp
 8005a54:	1e5f      	subs	r7, r3, #1
 8005a56:	2200      	movs	r2, #0
 8005a58:	4b88      	ldr	r3, [pc, #544]	; (8005c7c <_dtoa_r+0x624>)
 8005a5a:	f7fa fdcd 	bl	80005f8 <__aeabi_dmul>
 8005a5e:	9e02      	ldr	r6, [sp, #8]
 8005a60:	4682      	mov	sl, r0
 8005a62:	468b      	mov	fp, r1
 8005a64:	3501      	adds	r5, #1
 8005a66:	4628      	mov	r0, r5
 8005a68:	f7fa fd5c 	bl	8000524 <__aeabi_i2d>
 8005a6c:	4652      	mov	r2, sl
 8005a6e:	465b      	mov	r3, fp
 8005a70:	f7fa fdc2 	bl	80005f8 <__aeabi_dmul>
 8005a74:	4b82      	ldr	r3, [pc, #520]	; (8005c80 <_dtoa_r+0x628>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	f7fa fc08 	bl	800028c <__adddf3>
 8005a7c:	46d0      	mov	r8, sl
 8005a7e:	46d9      	mov	r9, fp
 8005a80:	4682      	mov	sl, r0
 8005a82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005a86:	2e00      	cmp	r6, #0
 8005a88:	d158      	bne.n	8005b3c <_dtoa_r+0x4e4>
 8005a8a:	4b7e      	ldr	r3, [pc, #504]	; (8005c84 <_dtoa_r+0x62c>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4640      	mov	r0, r8
 8005a90:	4649      	mov	r1, r9
 8005a92:	f7fa fbf9 	bl	8000288 <__aeabi_dsub>
 8005a96:	4652      	mov	r2, sl
 8005a98:	465b      	mov	r3, fp
 8005a9a:	4680      	mov	r8, r0
 8005a9c:	4689      	mov	r9, r1
 8005a9e:	f7fb f83b 	bl	8000b18 <__aeabi_dcmpgt>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	f040 8295 	bne.w	8005fd2 <_dtoa_r+0x97a>
 8005aa8:	4652      	mov	r2, sl
 8005aaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005aae:	4640      	mov	r0, r8
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	f7fb f813 	bl	8000adc <__aeabi_dcmplt>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f040 8289 	bne.w	8005fce <_dtoa_r+0x976>
 8005abc:	ec5b ab19 	vmov	sl, fp, d9
 8005ac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f2c0 8148 	blt.w	8005d58 <_dtoa_r+0x700>
 8005ac8:	9a00      	ldr	r2, [sp, #0]
 8005aca:	2a0e      	cmp	r2, #14
 8005acc:	f300 8144 	bgt.w	8005d58 <_dtoa_r+0x700>
 8005ad0:	4b67      	ldr	r3, [pc, #412]	; (8005c70 <_dtoa_r+0x618>)
 8005ad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ad6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f280 80d5 	bge.w	8005c8c <_dtoa_r+0x634>
 8005ae2:	9b03      	ldr	r3, [sp, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f300 80d1 	bgt.w	8005c8c <_dtoa_r+0x634>
 8005aea:	f040 826f 	bne.w	8005fcc <_dtoa_r+0x974>
 8005aee:	4b65      	ldr	r3, [pc, #404]	; (8005c84 <_dtoa_r+0x62c>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	4640      	mov	r0, r8
 8005af4:	4649      	mov	r1, r9
 8005af6:	f7fa fd7f 	bl	80005f8 <__aeabi_dmul>
 8005afa:	4652      	mov	r2, sl
 8005afc:	465b      	mov	r3, fp
 8005afe:	f7fb f801 	bl	8000b04 <__aeabi_dcmpge>
 8005b02:	9e03      	ldr	r6, [sp, #12]
 8005b04:	4637      	mov	r7, r6
 8005b06:	2800      	cmp	r0, #0
 8005b08:	f040 8245 	bne.w	8005f96 <_dtoa_r+0x93e>
 8005b0c:	9d01      	ldr	r5, [sp, #4]
 8005b0e:	2331      	movs	r3, #49	; 0x31
 8005b10:	f805 3b01 	strb.w	r3, [r5], #1
 8005b14:	9b00      	ldr	r3, [sp, #0]
 8005b16:	3301      	adds	r3, #1
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	e240      	b.n	8005f9e <_dtoa_r+0x946>
 8005b1c:	07f2      	lsls	r2, r6, #31
 8005b1e:	d505      	bpl.n	8005b2c <_dtoa_r+0x4d4>
 8005b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b24:	f7fa fd68 	bl	80005f8 <__aeabi_dmul>
 8005b28:	3501      	adds	r5, #1
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	1076      	asrs	r6, r6, #1
 8005b2e:	3708      	adds	r7, #8
 8005b30:	e777      	b.n	8005a22 <_dtoa_r+0x3ca>
 8005b32:	2502      	movs	r5, #2
 8005b34:	e779      	b.n	8005a2a <_dtoa_r+0x3d2>
 8005b36:	9f00      	ldr	r7, [sp, #0]
 8005b38:	9e03      	ldr	r6, [sp, #12]
 8005b3a:	e794      	b.n	8005a66 <_dtoa_r+0x40e>
 8005b3c:	9901      	ldr	r1, [sp, #4]
 8005b3e:	4b4c      	ldr	r3, [pc, #304]	; (8005c70 <_dtoa_r+0x618>)
 8005b40:	4431      	add	r1, r6
 8005b42:	910d      	str	r1, [sp, #52]	; 0x34
 8005b44:	9908      	ldr	r1, [sp, #32]
 8005b46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b4e:	2900      	cmp	r1, #0
 8005b50:	d043      	beq.n	8005bda <_dtoa_r+0x582>
 8005b52:	494d      	ldr	r1, [pc, #308]	; (8005c88 <_dtoa_r+0x630>)
 8005b54:	2000      	movs	r0, #0
 8005b56:	f7fa fe79 	bl	800084c <__aeabi_ddiv>
 8005b5a:	4652      	mov	r2, sl
 8005b5c:	465b      	mov	r3, fp
 8005b5e:	f7fa fb93 	bl	8000288 <__aeabi_dsub>
 8005b62:	9d01      	ldr	r5, [sp, #4]
 8005b64:	4682      	mov	sl, r0
 8005b66:	468b      	mov	fp, r1
 8005b68:	4649      	mov	r1, r9
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	f7fa fff4 	bl	8000b58 <__aeabi_d2iz>
 8005b70:	4606      	mov	r6, r0
 8005b72:	f7fa fcd7 	bl	8000524 <__aeabi_i2d>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	f7fa fb83 	bl	8000288 <__aeabi_dsub>
 8005b82:	3630      	adds	r6, #48	; 0x30
 8005b84:	f805 6b01 	strb.w	r6, [r5], #1
 8005b88:	4652      	mov	r2, sl
 8005b8a:	465b      	mov	r3, fp
 8005b8c:	4680      	mov	r8, r0
 8005b8e:	4689      	mov	r9, r1
 8005b90:	f7fa ffa4 	bl	8000adc <__aeabi_dcmplt>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	d163      	bne.n	8005c60 <_dtoa_r+0x608>
 8005b98:	4642      	mov	r2, r8
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	4936      	ldr	r1, [pc, #216]	; (8005c78 <_dtoa_r+0x620>)
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	f7fa fb72 	bl	8000288 <__aeabi_dsub>
 8005ba4:	4652      	mov	r2, sl
 8005ba6:	465b      	mov	r3, fp
 8005ba8:	f7fa ff98 	bl	8000adc <__aeabi_dcmplt>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	f040 80b5 	bne.w	8005d1c <_dtoa_r+0x6c4>
 8005bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bb4:	429d      	cmp	r5, r3
 8005bb6:	d081      	beq.n	8005abc <_dtoa_r+0x464>
 8005bb8:	4b30      	ldr	r3, [pc, #192]	; (8005c7c <_dtoa_r+0x624>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	4650      	mov	r0, sl
 8005bbe:	4659      	mov	r1, fp
 8005bc0:	f7fa fd1a 	bl	80005f8 <__aeabi_dmul>
 8005bc4:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <_dtoa_r+0x624>)
 8005bc6:	4682      	mov	sl, r0
 8005bc8:	468b      	mov	fp, r1
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4649      	mov	r1, r9
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f7fa fd12 	bl	80005f8 <__aeabi_dmul>
 8005bd4:	4680      	mov	r8, r0
 8005bd6:	4689      	mov	r9, r1
 8005bd8:	e7c6      	b.n	8005b68 <_dtoa_r+0x510>
 8005bda:	4650      	mov	r0, sl
 8005bdc:	4659      	mov	r1, fp
 8005bde:	f7fa fd0b 	bl	80005f8 <__aeabi_dmul>
 8005be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005be4:	9d01      	ldr	r5, [sp, #4]
 8005be6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005be8:	4682      	mov	sl, r0
 8005bea:	468b      	mov	fp, r1
 8005bec:	4649      	mov	r1, r9
 8005bee:	4640      	mov	r0, r8
 8005bf0:	f7fa ffb2 	bl	8000b58 <__aeabi_d2iz>
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	f7fa fc95 	bl	8000524 <__aeabi_i2d>
 8005bfa:	3630      	adds	r6, #48	; 0x30
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4640      	mov	r0, r8
 8005c02:	4649      	mov	r1, r9
 8005c04:	f7fa fb40 	bl	8000288 <__aeabi_dsub>
 8005c08:	f805 6b01 	strb.w	r6, [r5], #1
 8005c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c0e:	429d      	cmp	r5, r3
 8005c10:	4680      	mov	r8, r0
 8005c12:	4689      	mov	r9, r1
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	d124      	bne.n	8005c64 <_dtoa_r+0x60c>
 8005c1a:	4b1b      	ldr	r3, [pc, #108]	; (8005c88 <_dtoa_r+0x630>)
 8005c1c:	4650      	mov	r0, sl
 8005c1e:	4659      	mov	r1, fp
 8005c20:	f7fa fb34 	bl	800028c <__adddf3>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4640      	mov	r0, r8
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	f7fa ff74 	bl	8000b18 <__aeabi_dcmpgt>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d173      	bne.n	8005d1c <_dtoa_r+0x6c4>
 8005c34:	4652      	mov	r2, sl
 8005c36:	465b      	mov	r3, fp
 8005c38:	4913      	ldr	r1, [pc, #76]	; (8005c88 <_dtoa_r+0x630>)
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f7fa fb24 	bl	8000288 <__aeabi_dsub>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4640      	mov	r0, r8
 8005c46:	4649      	mov	r1, r9
 8005c48:	f7fa ff48 	bl	8000adc <__aeabi_dcmplt>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	f43f af35 	beq.w	8005abc <_dtoa_r+0x464>
 8005c52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c54:	1e6b      	subs	r3, r5, #1
 8005c56:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c5c:	2b30      	cmp	r3, #48	; 0x30
 8005c5e:	d0f8      	beq.n	8005c52 <_dtoa_r+0x5fa>
 8005c60:	9700      	str	r7, [sp, #0]
 8005c62:	e049      	b.n	8005cf8 <_dtoa_r+0x6a0>
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <_dtoa_r+0x624>)
 8005c66:	f7fa fcc7 	bl	80005f8 <__aeabi_dmul>
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	4689      	mov	r9, r1
 8005c6e:	e7bd      	b.n	8005bec <_dtoa_r+0x594>
 8005c70:	080078b8 	.word	0x080078b8
 8005c74:	08007890 	.word	0x08007890
 8005c78:	3ff00000 	.word	0x3ff00000
 8005c7c:	40240000 	.word	0x40240000
 8005c80:	401c0000 	.word	0x401c0000
 8005c84:	40140000 	.word	0x40140000
 8005c88:	3fe00000 	.word	0x3fe00000
 8005c8c:	9d01      	ldr	r5, [sp, #4]
 8005c8e:	4656      	mov	r6, sl
 8005c90:	465f      	mov	r7, fp
 8005c92:	4642      	mov	r2, r8
 8005c94:	464b      	mov	r3, r9
 8005c96:	4630      	mov	r0, r6
 8005c98:	4639      	mov	r1, r7
 8005c9a:	f7fa fdd7 	bl	800084c <__aeabi_ddiv>
 8005c9e:	f7fa ff5b 	bl	8000b58 <__aeabi_d2iz>
 8005ca2:	4682      	mov	sl, r0
 8005ca4:	f7fa fc3e 	bl	8000524 <__aeabi_i2d>
 8005ca8:	4642      	mov	r2, r8
 8005caa:	464b      	mov	r3, r9
 8005cac:	f7fa fca4 	bl	80005f8 <__aeabi_dmul>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005cbc:	f7fa fae4 	bl	8000288 <__aeabi_dsub>
 8005cc0:	f805 6b01 	strb.w	r6, [r5], #1
 8005cc4:	9e01      	ldr	r6, [sp, #4]
 8005cc6:	9f03      	ldr	r7, [sp, #12]
 8005cc8:	1bae      	subs	r6, r5, r6
 8005cca:	42b7      	cmp	r7, r6
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	d135      	bne.n	8005d3e <_dtoa_r+0x6e6>
 8005cd2:	f7fa fadb 	bl	800028c <__adddf3>
 8005cd6:	4642      	mov	r2, r8
 8005cd8:	464b      	mov	r3, r9
 8005cda:	4606      	mov	r6, r0
 8005cdc:	460f      	mov	r7, r1
 8005cde:	f7fa ff1b 	bl	8000b18 <__aeabi_dcmpgt>
 8005ce2:	b9d0      	cbnz	r0, 8005d1a <_dtoa_r+0x6c2>
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	4630      	mov	r0, r6
 8005cea:	4639      	mov	r1, r7
 8005cec:	f7fa feec 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cf0:	b110      	cbz	r0, 8005cf8 <_dtoa_r+0x6a0>
 8005cf2:	f01a 0f01 	tst.w	sl, #1
 8005cf6:	d110      	bne.n	8005d1a <_dtoa_r+0x6c2>
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	ee18 1a10 	vmov	r1, s16
 8005cfe:	f000 fbed 	bl	80064dc <_Bfree>
 8005d02:	2300      	movs	r3, #0
 8005d04:	9800      	ldr	r0, [sp, #0]
 8005d06:	702b      	strb	r3, [r5, #0]
 8005d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	6018      	str	r0, [r3, #0]
 8005d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f43f acf1 	beq.w	80056f8 <_dtoa_r+0xa0>
 8005d16:	601d      	str	r5, [r3, #0]
 8005d18:	e4ee      	b.n	80056f8 <_dtoa_r+0xa0>
 8005d1a:	9f00      	ldr	r7, [sp, #0]
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	461d      	mov	r5, r3
 8005d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d24:	2a39      	cmp	r2, #57	; 0x39
 8005d26:	d106      	bne.n	8005d36 <_dtoa_r+0x6de>
 8005d28:	9a01      	ldr	r2, [sp, #4]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d1f7      	bne.n	8005d1e <_dtoa_r+0x6c6>
 8005d2e:	9901      	ldr	r1, [sp, #4]
 8005d30:	2230      	movs	r2, #48	; 0x30
 8005d32:	3701      	adds	r7, #1
 8005d34:	700a      	strb	r2, [r1, #0]
 8005d36:	781a      	ldrb	r2, [r3, #0]
 8005d38:	3201      	adds	r2, #1
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e790      	b.n	8005c60 <_dtoa_r+0x608>
 8005d3e:	4ba6      	ldr	r3, [pc, #664]	; (8005fd8 <_dtoa_r+0x980>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	f7fa fc59 	bl	80005f8 <__aeabi_dmul>
 8005d46:	2200      	movs	r2, #0
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4606      	mov	r6, r0
 8005d4c:	460f      	mov	r7, r1
 8005d4e:	f7fa febb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d09d      	beq.n	8005c92 <_dtoa_r+0x63a>
 8005d56:	e7cf      	b.n	8005cf8 <_dtoa_r+0x6a0>
 8005d58:	9a08      	ldr	r2, [sp, #32]
 8005d5a:	2a00      	cmp	r2, #0
 8005d5c:	f000 80d7 	beq.w	8005f0e <_dtoa_r+0x8b6>
 8005d60:	9a06      	ldr	r2, [sp, #24]
 8005d62:	2a01      	cmp	r2, #1
 8005d64:	f300 80ba 	bgt.w	8005edc <_dtoa_r+0x884>
 8005d68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d6a:	2a00      	cmp	r2, #0
 8005d6c:	f000 80b2 	beq.w	8005ed4 <_dtoa_r+0x87c>
 8005d70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d74:	9e07      	ldr	r6, [sp, #28]
 8005d76:	9d04      	ldr	r5, [sp, #16]
 8005d78:	9a04      	ldr	r2, [sp, #16]
 8005d7a:	441a      	add	r2, r3
 8005d7c:	9204      	str	r2, [sp, #16]
 8005d7e:	9a05      	ldr	r2, [sp, #20]
 8005d80:	2101      	movs	r1, #1
 8005d82:	441a      	add	r2, r3
 8005d84:	4620      	mov	r0, r4
 8005d86:	9205      	str	r2, [sp, #20]
 8005d88:	f000 fc60 	bl	800664c <__i2b>
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	dd0c      	ble.n	8005dac <_dtoa_r+0x754>
 8005d92:	9b05      	ldr	r3, [sp, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	dd09      	ble.n	8005dac <_dtoa_r+0x754>
 8005d98:	42ab      	cmp	r3, r5
 8005d9a:	9a04      	ldr	r2, [sp, #16]
 8005d9c:	bfa8      	it	ge
 8005d9e:	462b      	movge	r3, r5
 8005da0:	1ad2      	subs	r2, r2, r3
 8005da2:	9204      	str	r2, [sp, #16]
 8005da4:	9a05      	ldr	r2, [sp, #20]
 8005da6:	1aed      	subs	r5, r5, r3
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	9305      	str	r3, [sp, #20]
 8005dac:	9b07      	ldr	r3, [sp, #28]
 8005dae:	b31b      	cbz	r3, 8005df8 <_dtoa_r+0x7a0>
 8005db0:	9b08      	ldr	r3, [sp, #32]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80af 	beq.w	8005f16 <_dtoa_r+0x8be>
 8005db8:	2e00      	cmp	r6, #0
 8005dba:	dd13      	ble.n	8005de4 <_dtoa_r+0x78c>
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	4632      	mov	r2, r6
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 fd03 	bl	80067cc <__pow5mult>
 8005dc6:	ee18 2a10 	vmov	r2, s16
 8005dca:	4601      	mov	r1, r0
 8005dcc:	4607      	mov	r7, r0
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f000 fc52 	bl	8006678 <__multiply>
 8005dd4:	ee18 1a10 	vmov	r1, s16
 8005dd8:	4680      	mov	r8, r0
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f000 fb7e 	bl	80064dc <_Bfree>
 8005de0:	ee08 8a10 	vmov	s16, r8
 8005de4:	9b07      	ldr	r3, [sp, #28]
 8005de6:	1b9a      	subs	r2, r3, r6
 8005de8:	d006      	beq.n	8005df8 <_dtoa_r+0x7a0>
 8005dea:	ee18 1a10 	vmov	r1, s16
 8005dee:	4620      	mov	r0, r4
 8005df0:	f000 fcec 	bl	80067cc <__pow5mult>
 8005df4:	ee08 0a10 	vmov	s16, r0
 8005df8:	2101      	movs	r1, #1
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f000 fc26 	bl	800664c <__i2b>
 8005e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	4606      	mov	r6, r0
 8005e06:	f340 8088 	ble.w	8005f1a <_dtoa_r+0x8c2>
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	4601      	mov	r1, r0
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 fcdc 	bl	80067cc <__pow5mult>
 8005e14:	9b06      	ldr	r3, [sp, #24]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	4606      	mov	r6, r0
 8005e1a:	f340 8081 	ble.w	8005f20 <_dtoa_r+0x8c8>
 8005e1e:	f04f 0800 	mov.w	r8, #0
 8005e22:	6933      	ldr	r3, [r6, #16]
 8005e24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e28:	6918      	ldr	r0, [r3, #16]
 8005e2a:	f000 fbbf 	bl	80065ac <__hi0bits>
 8005e2e:	f1c0 0020 	rsb	r0, r0, #32
 8005e32:	9b05      	ldr	r3, [sp, #20]
 8005e34:	4418      	add	r0, r3
 8005e36:	f010 001f 	ands.w	r0, r0, #31
 8005e3a:	f000 8092 	beq.w	8005f62 <_dtoa_r+0x90a>
 8005e3e:	f1c0 0320 	rsb	r3, r0, #32
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	f340 808a 	ble.w	8005f5c <_dtoa_r+0x904>
 8005e48:	f1c0 001c 	rsb	r0, r0, #28
 8005e4c:	9b04      	ldr	r3, [sp, #16]
 8005e4e:	4403      	add	r3, r0
 8005e50:	9304      	str	r3, [sp, #16]
 8005e52:	9b05      	ldr	r3, [sp, #20]
 8005e54:	4403      	add	r3, r0
 8005e56:	4405      	add	r5, r0
 8005e58:	9305      	str	r3, [sp, #20]
 8005e5a:	9b04      	ldr	r3, [sp, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	dd07      	ble.n	8005e70 <_dtoa_r+0x818>
 8005e60:	ee18 1a10 	vmov	r1, s16
 8005e64:	461a      	mov	r2, r3
 8005e66:	4620      	mov	r0, r4
 8005e68:	f000 fd0a 	bl	8006880 <__lshift>
 8005e6c:	ee08 0a10 	vmov	s16, r0
 8005e70:	9b05      	ldr	r3, [sp, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	dd05      	ble.n	8005e82 <_dtoa_r+0x82a>
 8005e76:	4631      	mov	r1, r6
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 fd00 	bl	8006880 <__lshift>
 8005e80:	4606      	mov	r6, r0
 8005e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d06e      	beq.n	8005f66 <_dtoa_r+0x90e>
 8005e88:	ee18 0a10 	vmov	r0, s16
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	f000 fd67 	bl	8006960 <__mcmp>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	da67      	bge.n	8005f66 <_dtoa_r+0x90e>
 8005e96:	9b00      	ldr	r3, [sp, #0]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	ee18 1a10 	vmov	r1, s16
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	220a      	movs	r2, #10
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f000 fb3b 	bl	8006520 <__multadd>
 8005eaa:	9b08      	ldr	r3, [sp, #32]
 8005eac:	ee08 0a10 	vmov	s16, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 81b1 	beq.w	8006218 <_dtoa_r+0xbc0>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	4639      	mov	r1, r7
 8005eba:	220a      	movs	r2, #10
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f000 fb2f 	bl	8006520 <__multadd>
 8005ec2:	9b02      	ldr	r3, [sp, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	4607      	mov	r7, r0
 8005ec8:	f300 808e 	bgt.w	8005fe8 <_dtoa_r+0x990>
 8005ecc:	9b06      	ldr	r3, [sp, #24]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	dc51      	bgt.n	8005f76 <_dtoa_r+0x91e>
 8005ed2:	e089      	b.n	8005fe8 <_dtoa_r+0x990>
 8005ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ed6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005eda:	e74b      	b.n	8005d74 <_dtoa_r+0x71c>
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	1e5e      	subs	r6, r3, #1
 8005ee0:	9b07      	ldr	r3, [sp, #28]
 8005ee2:	42b3      	cmp	r3, r6
 8005ee4:	bfbf      	itttt	lt
 8005ee6:	9b07      	ldrlt	r3, [sp, #28]
 8005ee8:	9607      	strlt	r6, [sp, #28]
 8005eea:	1af2      	sublt	r2, r6, r3
 8005eec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005eee:	bfb6      	itet	lt
 8005ef0:	189b      	addlt	r3, r3, r2
 8005ef2:	1b9e      	subge	r6, r3, r6
 8005ef4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	bfb8      	it	lt
 8005efa:	2600      	movlt	r6, #0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bfb7      	itett	lt
 8005f00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005f04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005f08:	1a9d      	sublt	r5, r3, r2
 8005f0a:	2300      	movlt	r3, #0
 8005f0c:	e734      	b.n	8005d78 <_dtoa_r+0x720>
 8005f0e:	9e07      	ldr	r6, [sp, #28]
 8005f10:	9d04      	ldr	r5, [sp, #16]
 8005f12:	9f08      	ldr	r7, [sp, #32]
 8005f14:	e73b      	b.n	8005d8e <_dtoa_r+0x736>
 8005f16:	9a07      	ldr	r2, [sp, #28]
 8005f18:	e767      	b.n	8005dea <_dtoa_r+0x792>
 8005f1a:	9b06      	ldr	r3, [sp, #24]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	dc18      	bgt.n	8005f52 <_dtoa_r+0x8fa>
 8005f20:	f1ba 0f00 	cmp.w	sl, #0
 8005f24:	d115      	bne.n	8005f52 <_dtoa_r+0x8fa>
 8005f26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f2a:	b993      	cbnz	r3, 8005f52 <_dtoa_r+0x8fa>
 8005f2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f30:	0d1b      	lsrs	r3, r3, #20
 8005f32:	051b      	lsls	r3, r3, #20
 8005f34:	b183      	cbz	r3, 8005f58 <_dtoa_r+0x900>
 8005f36:	9b04      	ldr	r3, [sp, #16]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	9304      	str	r3, [sp, #16]
 8005f3c:	9b05      	ldr	r3, [sp, #20]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	9305      	str	r3, [sp, #20]
 8005f42:	f04f 0801 	mov.w	r8, #1
 8005f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f47f af6a 	bne.w	8005e22 <_dtoa_r+0x7ca>
 8005f4e:	2001      	movs	r0, #1
 8005f50:	e76f      	b.n	8005e32 <_dtoa_r+0x7da>
 8005f52:	f04f 0800 	mov.w	r8, #0
 8005f56:	e7f6      	b.n	8005f46 <_dtoa_r+0x8ee>
 8005f58:	4698      	mov	r8, r3
 8005f5a:	e7f4      	b.n	8005f46 <_dtoa_r+0x8ee>
 8005f5c:	f43f af7d 	beq.w	8005e5a <_dtoa_r+0x802>
 8005f60:	4618      	mov	r0, r3
 8005f62:	301c      	adds	r0, #28
 8005f64:	e772      	b.n	8005e4c <_dtoa_r+0x7f4>
 8005f66:	9b03      	ldr	r3, [sp, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dc37      	bgt.n	8005fdc <_dtoa_r+0x984>
 8005f6c:	9b06      	ldr	r3, [sp, #24]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	dd34      	ble.n	8005fdc <_dtoa_r+0x984>
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	9302      	str	r3, [sp, #8]
 8005f76:	9b02      	ldr	r3, [sp, #8]
 8005f78:	b96b      	cbnz	r3, 8005f96 <_dtoa_r+0x93e>
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	2205      	movs	r2, #5
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 face 	bl	8006520 <__multadd>
 8005f84:	4601      	mov	r1, r0
 8005f86:	4606      	mov	r6, r0
 8005f88:	ee18 0a10 	vmov	r0, s16
 8005f8c:	f000 fce8 	bl	8006960 <__mcmp>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	f73f adbb 	bgt.w	8005b0c <_dtoa_r+0x4b4>
 8005f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f98:	9d01      	ldr	r5, [sp, #4]
 8005f9a:	43db      	mvns	r3, r3
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	f04f 0800 	mov.w	r8, #0
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f000 fa99 	bl	80064dc <_Bfree>
 8005faa:	2f00      	cmp	r7, #0
 8005fac:	f43f aea4 	beq.w	8005cf8 <_dtoa_r+0x6a0>
 8005fb0:	f1b8 0f00 	cmp.w	r8, #0
 8005fb4:	d005      	beq.n	8005fc2 <_dtoa_r+0x96a>
 8005fb6:	45b8      	cmp	r8, r7
 8005fb8:	d003      	beq.n	8005fc2 <_dtoa_r+0x96a>
 8005fba:	4641      	mov	r1, r8
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f000 fa8d 	bl	80064dc <_Bfree>
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f000 fa89 	bl	80064dc <_Bfree>
 8005fca:	e695      	b.n	8005cf8 <_dtoa_r+0x6a0>
 8005fcc:	2600      	movs	r6, #0
 8005fce:	4637      	mov	r7, r6
 8005fd0:	e7e1      	b.n	8005f96 <_dtoa_r+0x93e>
 8005fd2:	9700      	str	r7, [sp, #0]
 8005fd4:	4637      	mov	r7, r6
 8005fd6:	e599      	b.n	8005b0c <_dtoa_r+0x4b4>
 8005fd8:	40240000 	.word	0x40240000
 8005fdc:	9b08      	ldr	r3, [sp, #32]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 80ca 	beq.w	8006178 <_dtoa_r+0xb20>
 8005fe4:	9b03      	ldr	r3, [sp, #12]
 8005fe6:	9302      	str	r3, [sp, #8]
 8005fe8:	2d00      	cmp	r5, #0
 8005fea:	dd05      	ble.n	8005ff8 <_dtoa_r+0x9a0>
 8005fec:	4639      	mov	r1, r7
 8005fee:	462a      	mov	r2, r5
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f000 fc45 	bl	8006880 <__lshift>
 8005ff6:	4607      	mov	r7, r0
 8005ff8:	f1b8 0f00 	cmp.w	r8, #0
 8005ffc:	d05b      	beq.n	80060b6 <_dtoa_r+0xa5e>
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4620      	mov	r0, r4
 8006002:	f000 fa2b 	bl	800645c <_Balloc>
 8006006:	4605      	mov	r5, r0
 8006008:	b928      	cbnz	r0, 8006016 <_dtoa_r+0x9be>
 800600a:	4b87      	ldr	r3, [pc, #540]	; (8006228 <_dtoa_r+0xbd0>)
 800600c:	4602      	mov	r2, r0
 800600e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006012:	f7ff bb3b 	b.w	800568c <_dtoa_r+0x34>
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	3202      	adds	r2, #2
 800601a:	0092      	lsls	r2, r2, #2
 800601c:	f107 010c 	add.w	r1, r7, #12
 8006020:	300c      	adds	r0, #12
 8006022:	f000 fa0d 	bl	8006440 <memcpy>
 8006026:	2201      	movs	r2, #1
 8006028:	4629      	mov	r1, r5
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fc28 	bl	8006880 <__lshift>
 8006030:	9b01      	ldr	r3, [sp, #4]
 8006032:	f103 0901 	add.w	r9, r3, #1
 8006036:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800603a:	4413      	add	r3, r2
 800603c:	9305      	str	r3, [sp, #20]
 800603e:	f00a 0301 	and.w	r3, sl, #1
 8006042:	46b8      	mov	r8, r7
 8006044:	9304      	str	r3, [sp, #16]
 8006046:	4607      	mov	r7, r0
 8006048:	4631      	mov	r1, r6
 800604a:	ee18 0a10 	vmov	r0, s16
 800604e:	f7ff fa77 	bl	8005540 <quorem>
 8006052:	4641      	mov	r1, r8
 8006054:	9002      	str	r0, [sp, #8]
 8006056:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800605a:	ee18 0a10 	vmov	r0, s16
 800605e:	f000 fc7f 	bl	8006960 <__mcmp>
 8006062:	463a      	mov	r2, r7
 8006064:	9003      	str	r0, [sp, #12]
 8006066:	4631      	mov	r1, r6
 8006068:	4620      	mov	r0, r4
 800606a:	f000 fc95 	bl	8006998 <__mdiff>
 800606e:	68c2      	ldr	r2, [r0, #12]
 8006070:	f109 3bff 	add.w	fp, r9, #4294967295
 8006074:	4605      	mov	r5, r0
 8006076:	bb02      	cbnz	r2, 80060ba <_dtoa_r+0xa62>
 8006078:	4601      	mov	r1, r0
 800607a:	ee18 0a10 	vmov	r0, s16
 800607e:	f000 fc6f 	bl	8006960 <__mcmp>
 8006082:	4602      	mov	r2, r0
 8006084:	4629      	mov	r1, r5
 8006086:	4620      	mov	r0, r4
 8006088:	9207      	str	r2, [sp, #28]
 800608a:	f000 fa27 	bl	80064dc <_Bfree>
 800608e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006092:	ea43 0102 	orr.w	r1, r3, r2
 8006096:	9b04      	ldr	r3, [sp, #16]
 8006098:	430b      	orrs	r3, r1
 800609a:	464d      	mov	r5, r9
 800609c:	d10f      	bne.n	80060be <_dtoa_r+0xa66>
 800609e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060a2:	d02a      	beq.n	80060fa <_dtoa_r+0xaa2>
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dd02      	ble.n	80060b0 <_dtoa_r+0xa58>
 80060aa:	9b02      	ldr	r3, [sp, #8]
 80060ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80060b0:	f88b a000 	strb.w	sl, [fp]
 80060b4:	e775      	b.n	8005fa2 <_dtoa_r+0x94a>
 80060b6:	4638      	mov	r0, r7
 80060b8:	e7ba      	b.n	8006030 <_dtoa_r+0x9d8>
 80060ba:	2201      	movs	r2, #1
 80060bc:	e7e2      	b.n	8006084 <_dtoa_r+0xa2c>
 80060be:	9b03      	ldr	r3, [sp, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	db04      	blt.n	80060ce <_dtoa_r+0xa76>
 80060c4:	9906      	ldr	r1, [sp, #24]
 80060c6:	430b      	orrs	r3, r1
 80060c8:	9904      	ldr	r1, [sp, #16]
 80060ca:	430b      	orrs	r3, r1
 80060cc:	d122      	bne.n	8006114 <_dtoa_r+0xabc>
 80060ce:	2a00      	cmp	r2, #0
 80060d0:	ddee      	ble.n	80060b0 <_dtoa_r+0xa58>
 80060d2:	ee18 1a10 	vmov	r1, s16
 80060d6:	2201      	movs	r2, #1
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 fbd1 	bl	8006880 <__lshift>
 80060de:	4631      	mov	r1, r6
 80060e0:	ee08 0a10 	vmov	s16, r0
 80060e4:	f000 fc3c 	bl	8006960 <__mcmp>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	dc03      	bgt.n	80060f4 <_dtoa_r+0xa9c>
 80060ec:	d1e0      	bne.n	80060b0 <_dtoa_r+0xa58>
 80060ee:	f01a 0f01 	tst.w	sl, #1
 80060f2:	d0dd      	beq.n	80060b0 <_dtoa_r+0xa58>
 80060f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060f8:	d1d7      	bne.n	80060aa <_dtoa_r+0xa52>
 80060fa:	2339      	movs	r3, #57	; 0x39
 80060fc:	f88b 3000 	strb.w	r3, [fp]
 8006100:	462b      	mov	r3, r5
 8006102:	461d      	mov	r5, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800610a:	2a39      	cmp	r2, #57	; 0x39
 800610c:	d071      	beq.n	80061f2 <_dtoa_r+0xb9a>
 800610e:	3201      	adds	r2, #1
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e746      	b.n	8005fa2 <_dtoa_r+0x94a>
 8006114:	2a00      	cmp	r2, #0
 8006116:	dd07      	ble.n	8006128 <_dtoa_r+0xad0>
 8006118:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800611c:	d0ed      	beq.n	80060fa <_dtoa_r+0xaa2>
 800611e:	f10a 0301 	add.w	r3, sl, #1
 8006122:	f88b 3000 	strb.w	r3, [fp]
 8006126:	e73c      	b.n	8005fa2 <_dtoa_r+0x94a>
 8006128:	9b05      	ldr	r3, [sp, #20]
 800612a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800612e:	4599      	cmp	r9, r3
 8006130:	d047      	beq.n	80061c2 <_dtoa_r+0xb6a>
 8006132:	ee18 1a10 	vmov	r1, s16
 8006136:	2300      	movs	r3, #0
 8006138:	220a      	movs	r2, #10
 800613a:	4620      	mov	r0, r4
 800613c:	f000 f9f0 	bl	8006520 <__multadd>
 8006140:	45b8      	cmp	r8, r7
 8006142:	ee08 0a10 	vmov	s16, r0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	f04f 020a 	mov.w	r2, #10
 800614e:	4641      	mov	r1, r8
 8006150:	4620      	mov	r0, r4
 8006152:	d106      	bne.n	8006162 <_dtoa_r+0xb0a>
 8006154:	f000 f9e4 	bl	8006520 <__multadd>
 8006158:	4680      	mov	r8, r0
 800615a:	4607      	mov	r7, r0
 800615c:	f109 0901 	add.w	r9, r9, #1
 8006160:	e772      	b.n	8006048 <_dtoa_r+0x9f0>
 8006162:	f000 f9dd 	bl	8006520 <__multadd>
 8006166:	4639      	mov	r1, r7
 8006168:	4680      	mov	r8, r0
 800616a:	2300      	movs	r3, #0
 800616c:	220a      	movs	r2, #10
 800616e:	4620      	mov	r0, r4
 8006170:	f000 f9d6 	bl	8006520 <__multadd>
 8006174:	4607      	mov	r7, r0
 8006176:	e7f1      	b.n	800615c <_dtoa_r+0xb04>
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	9302      	str	r3, [sp, #8]
 800617c:	9d01      	ldr	r5, [sp, #4]
 800617e:	ee18 0a10 	vmov	r0, s16
 8006182:	4631      	mov	r1, r6
 8006184:	f7ff f9dc 	bl	8005540 <quorem>
 8006188:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800618c:	9b01      	ldr	r3, [sp, #4]
 800618e:	f805 ab01 	strb.w	sl, [r5], #1
 8006192:	1aea      	subs	r2, r5, r3
 8006194:	9b02      	ldr	r3, [sp, #8]
 8006196:	4293      	cmp	r3, r2
 8006198:	dd09      	ble.n	80061ae <_dtoa_r+0xb56>
 800619a:	ee18 1a10 	vmov	r1, s16
 800619e:	2300      	movs	r3, #0
 80061a0:	220a      	movs	r2, #10
 80061a2:	4620      	mov	r0, r4
 80061a4:	f000 f9bc 	bl	8006520 <__multadd>
 80061a8:	ee08 0a10 	vmov	s16, r0
 80061ac:	e7e7      	b.n	800617e <_dtoa_r+0xb26>
 80061ae:	9b02      	ldr	r3, [sp, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bfc8      	it	gt
 80061b4:	461d      	movgt	r5, r3
 80061b6:	9b01      	ldr	r3, [sp, #4]
 80061b8:	bfd8      	it	le
 80061ba:	2501      	movle	r5, #1
 80061bc:	441d      	add	r5, r3
 80061be:	f04f 0800 	mov.w	r8, #0
 80061c2:	ee18 1a10 	vmov	r1, s16
 80061c6:	2201      	movs	r2, #1
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 fb59 	bl	8006880 <__lshift>
 80061ce:	4631      	mov	r1, r6
 80061d0:	ee08 0a10 	vmov	s16, r0
 80061d4:	f000 fbc4 	bl	8006960 <__mcmp>
 80061d8:	2800      	cmp	r0, #0
 80061da:	dc91      	bgt.n	8006100 <_dtoa_r+0xaa8>
 80061dc:	d102      	bne.n	80061e4 <_dtoa_r+0xb8c>
 80061de:	f01a 0f01 	tst.w	sl, #1
 80061e2:	d18d      	bne.n	8006100 <_dtoa_r+0xaa8>
 80061e4:	462b      	mov	r3, r5
 80061e6:	461d      	mov	r5, r3
 80061e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ec:	2a30      	cmp	r2, #48	; 0x30
 80061ee:	d0fa      	beq.n	80061e6 <_dtoa_r+0xb8e>
 80061f0:	e6d7      	b.n	8005fa2 <_dtoa_r+0x94a>
 80061f2:	9a01      	ldr	r2, [sp, #4]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d184      	bne.n	8006102 <_dtoa_r+0xaaa>
 80061f8:	9b00      	ldr	r3, [sp, #0]
 80061fa:	3301      	adds	r3, #1
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	2331      	movs	r3, #49	; 0x31
 8006200:	7013      	strb	r3, [r2, #0]
 8006202:	e6ce      	b.n	8005fa2 <_dtoa_r+0x94a>
 8006204:	4b09      	ldr	r3, [pc, #36]	; (800622c <_dtoa_r+0xbd4>)
 8006206:	f7ff ba95 	b.w	8005734 <_dtoa_r+0xdc>
 800620a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800620c:	2b00      	cmp	r3, #0
 800620e:	f47f aa6e 	bne.w	80056ee <_dtoa_r+0x96>
 8006212:	4b07      	ldr	r3, [pc, #28]	; (8006230 <_dtoa_r+0xbd8>)
 8006214:	f7ff ba8e 	b.w	8005734 <_dtoa_r+0xdc>
 8006218:	9b02      	ldr	r3, [sp, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	dcae      	bgt.n	800617c <_dtoa_r+0xb24>
 800621e:	9b06      	ldr	r3, [sp, #24]
 8006220:	2b02      	cmp	r3, #2
 8006222:	f73f aea8 	bgt.w	8005f76 <_dtoa_r+0x91e>
 8006226:	e7a9      	b.n	800617c <_dtoa_r+0xb24>
 8006228:	080077c3 	.word	0x080077c3
 800622c:	08007720 	.word	0x08007720
 8006230:	08007744 	.word	0x08007744

08006234 <std>:
 8006234:	2300      	movs	r3, #0
 8006236:	b510      	push	{r4, lr}
 8006238:	4604      	mov	r4, r0
 800623a:	e9c0 3300 	strd	r3, r3, [r0]
 800623e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006242:	6083      	str	r3, [r0, #8]
 8006244:	8181      	strh	r1, [r0, #12]
 8006246:	6643      	str	r3, [r0, #100]	; 0x64
 8006248:	81c2      	strh	r2, [r0, #14]
 800624a:	6183      	str	r3, [r0, #24]
 800624c:	4619      	mov	r1, r3
 800624e:	2208      	movs	r2, #8
 8006250:	305c      	adds	r0, #92	; 0x5c
 8006252:	f7fe fceb 	bl	8004c2c <memset>
 8006256:	4b05      	ldr	r3, [pc, #20]	; (800626c <std+0x38>)
 8006258:	6263      	str	r3, [r4, #36]	; 0x24
 800625a:	4b05      	ldr	r3, [pc, #20]	; (8006270 <std+0x3c>)
 800625c:	62a3      	str	r3, [r4, #40]	; 0x28
 800625e:	4b05      	ldr	r3, [pc, #20]	; (8006274 <std+0x40>)
 8006260:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006262:	4b05      	ldr	r3, [pc, #20]	; (8006278 <std+0x44>)
 8006264:	6224      	str	r4, [r4, #32]
 8006266:	6323      	str	r3, [r4, #48]	; 0x30
 8006268:	bd10      	pop	{r4, pc}
 800626a:	bf00      	nop
 800626c:	08007025 	.word	0x08007025
 8006270:	08007047 	.word	0x08007047
 8006274:	0800707f 	.word	0x0800707f
 8006278:	080070a3 	.word	0x080070a3

0800627c <_cleanup_r>:
 800627c:	4901      	ldr	r1, [pc, #4]	; (8006284 <_cleanup_r+0x8>)
 800627e:	f000 b8af 	b.w	80063e0 <_fwalk_reent>
 8006282:	bf00      	nop
 8006284:	080073b9 	.word	0x080073b9

08006288 <__sfmoreglue>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	2268      	movs	r2, #104	; 0x68
 800628c:	1e4d      	subs	r5, r1, #1
 800628e:	4355      	muls	r5, r2
 8006290:	460e      	mov	r6, r1
 8006292:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006296:	f000 fce7 	bl	8006c68 <_malloc_r>
 800629a:	4604      	mov	r4, r0
 800629c:	b140      	cbz	r0, 80062b0 <__sfmoreglue+0x28>
 800629e:	2100      	movs	r1, #0
 80062a0:	e9c0 1600 	strd	r1, r6, [r0]
 80062a4:	300c      	adds	r0, #12
 80062a6:	60a0      	str	r0, [r4, #8]
 80062a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062ac:	f7fe fcbe 	bl	8004c2c <memset>
 80062b0:	4620      	mov	r0, r4
 80062b2:	bd70      	pop	{r4, r5, r6, pc}

080062b4 <__sfp_lock_acquire>:
 80062b4:	4801      	ldr	r0, [pc, #4]	; (80062bc <__sfp_lock_acquire+0x8>)
 80062b6:	f000 b8b8 	b.w	800642a <__retarget_lock_acquire_recursive>
 80062ba:	bf00      	nop
 80062bc:	20000299 	.word	0x20000299

080062c0 <__sfp_lock_release>:
 80062c0:	4801      	ldr	r0, [pc, #4]	; (80062c8 <__sfp_lock_release+0x8>)
 80062c2:	f000 b8b3 	b.w	800642c <__retarget_lock_release_recursive>
 80062c6:	bf00      	nop
 80062c8:	20000299 	.word	0x20000299

080062cc <__sinit_lock_acquire>:
 80062cc:	4801      	ldr	r0, [pc, #4]	; (80062d4 <__sinit_lock_acquire+0x8>)
 80062ce:	f000 b8ac 	b.w	800642a <__retarget_lock_acquire_recursive>
 80062d2:	bf00      	nop
 80062d4:	2000029a 	.word	0x2000029a

080062d8 <__sinit_lock_release>:
 80062d8:	4801      	ldr	r0, [pc, #4]	; (80062e0 <__sinit_lock_release+0x8>)
 80062da:	f000 b8a7 	b.w	800642c <__retarget_lock_release_recursive>
 80062de:	bf00      	nop
 80062e0:	2000029a 	.word	0x2000029a

080062e4 <__sinit>:
 80062e4:	b510      	push	{r4, lr}
 80062e6:	4604      	mov	r4, r0
 80062e8:	f7ff fff0 	bl	80062cc <__sinit_lock_acquire>
 80062ec:	69a3      	ldr	r3, [r4, #24]
 80062ee:	b11b      	cbz	r3, 80062f8 <__sinit+0x14>
 80062f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f4:	f7ff bff0 	b.w	80062d8 <__sinit_lock_release>
 80062f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062fc:	6523      	str	r3, [r4, #80]	; 0x50
 80062fe:	4b13      	ldr	r3, [pc, #76]	; (800634c <__sinit+0x68>)
 8006300:	4a13      	ldr	r2, [pc, #76]	; (8006350 <__sinit+0x6c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	62a2      	str	r2, [r4, #40]	; 0x28
 8006306:	42a3      	cmp	r3, r4
 8006308:	bf04      	itt	eq
 800630a:	2301      	moveq	r3, #1
 800630c:	61a3      	streq	r3, [r4, #24]
 800630e:	4620      	mov	r0, r4
 8006310:	f000 f820 	bl	8006354 <__sfp>
 8006314:	6060      	str	r0, [r4, #4]
 8006316:	4620      	mov	r0, r4
 8006318:	f000 f81c 	bl	8006354 <__sfp>
 800631c:	60a0      	str	r0, [r4, #8]
 800631e:	4620      	mov	r0, r4
 8006320:	f000 f818 	bl	8006354 <__sfp>
 8006324:	2200      	movs	r2, #0
 8006326:	60e0      	str	r0, [r4, #12]
 8006328:	2104      	movs	r1, #4
 800632a:	6860      	ldr	r0, [r4, #4]
 800632c:	f7ff ff82 	bl	8006234 <std>
 8006330:	68a0      	ldr	r0, [r4, #8]
 8006332:	2201      	movs	r2, #1
 8006334:	2109      	movs	r1, #9
 8006336:	f7ff ff7d 	bl	8006234 <std>
 800633a:	68e0      	ldr	r0, [r4, #12]
 800633c:	2202      	movs	r2, #2
 800633e:	2112      	movs	r1, #18
 8006340:	f7ff ff78 	bl	8006234 <std>
 8006344:	2301      	movs	r3, #1
 8006346:	61a3      	str	r3, [r4, #24]
 8006348:	e7d2      	b.n	80062f0 <__sinit+0xc>
 800634a:	bf00      	nop
 800634c:	0800770c 	.word	0x0800770c
 8006350:	0800627d 	.word	0x0800627d

08006354 <__sfp>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	4607      	mov	r7, r0
 8006358:	f7ff ffac 	bl	80062b4 <__sfp_lock_acquire>
 800635c:	4b1e      	ldr	r3, [pc, #120]	; (80063d8 <__sfp+0x84>)
 800635e:	681e      	ldr	r6, [r3, #0]
 8006360:	69b3      	ldr	r3, [r6, #24]
 8006362:	b913      	cbnz	r3, 800636a <__sfp+0x16>
 8006364:	4630      	mov	r0, r6
 8006366:	f7ff ffbd 	bl	80062e4 <__sinit>
 800636a:	3648      	adds	r6, #72	; 0x48
 800636c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006370:	3b01      	subs	r3, #1
 8006372:	d503      	bpl.n	800637c <__sfp+0x28>
 8006374:	6833      	ldr	r3, [r6, #0]
 8006376:	b30b      	cbz	r3, 80063bc <__sfp+0x68>
 8006378:	6836      	ldr	r6, [r6, #0]
 800637a:	e7f7      	b.n	800636c <__sfp+0x18>
 800637c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006380:	b9d5      	cbnz	r5, 80063b8 <__sfp+0x64>
 8006382:	4b16      	ldr	r3, [pc, #88]	; (80063dc <__sfp+0x88>)
 8006384:	60e3      	str	r3, [r4, #12]
 8006386:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800638a:	6665      	str	r5, [r4, #100]	; 0x64
 800638c:	f000 f84c 	bl	8006428 <__retarget_lock_init_recursive>
 8006390:	f7ff ff96 	bl	80062c0 <__sfp_lock_release>
 8006394:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006398:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800639c:	6025      	str	r5, [r4, #0]
 800639e:	61a5      	str	r5, [r4, #24]
 80063a0:	2208      	movs	r2, #8
 80063a2:	4629      	mov	r1, r5
 80063a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063a8:	f7fe fc40 	bl	8004c2c <memset>
 80063ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063b4:	4620      	mov	r0, r4
 80063b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b8:	3468      	adds	r4, #104	; 0x68
 80063ba:	e7d9      	b.n	8006370 <__sfp+0x1c>
 80063bc:	2104      	movs	r1, #4
 80063be:	4638      	mov	r0, r7
 80063c0:	f7ff ff62 	bl	8006288 <__sfmoreglue>
 80063c4:	4604      	mov	r4, r0
 80063c6:	6030      	str	r0, [r6, #0]
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d1d5      	bne.n	8006378 <__sfp+0x24>
 80063cc:	f7ff ff78 	bl	80062c0 <__sfp_lock_release>
 80063d0:	230c      	movs	r3, #12
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	e7ee      	b.n	80063b4 <__sfp+0x60>
 80063d6:	bf00      	nop
 80063d8:	0800770c 	.word	0x0800770c
 80063dc:	ffff0001 	.word	0xffff0001

080063e0 <_fwalk_reent>:
 80063e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e4:	4606      	mov	r6, r0
 80063e6:	4688      	mov	r8, r1
 80063e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063ec:	2700      	movs	r7, #0
 80063ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063f2:	f1b9 0901 	subs.w	r9, r9, #1
 80063f6:	d505      	bpl.n	8006404 <_fwalk_reent+0x24>
 80063f8:	6824      	ldr	r4, [r4, #0]
 80063fa:	2c00      	cmp	r4, #0
 80063fc:	d1f7      	bne.n	80063ee <_fwalk_reent+0xe>
 80063fe:	4638      	mov	r0, r7
 8006400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006404:	89ab      	ldrh	r3, [r5, #12]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d907      	bls.n	800641a <_fwalk_reent+0x3a>
 800640a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800640e:	3301      	adds	r3, #1
 8006410:	d003      	beq.n	800641a <_fwalk_reent+0x3a>
 8006412:	4629      	mov	r1, r5
 8006414:	4630      	mov	r0, r6
 8006416:	47c0      	blx	r8
 8006418:	4307      	orrs	r7, r0
 800641a:	3568      	adds	r5, #104	; 0x68
 800641c:	e7e9      	b.n	80063f2 <_fwalk_reent+0x12>
	...

08006420 <_localeconv_r>:
 8006420:	4800      	ldr	r0, [pc, #0]	; (8006424 <_localeconv_r+0x4>)
 8006422:	4770      	bx	lr
 8006424:	20000160 	.word	0x20000160

08006428 <__retarget_lock_init_recursive>:
 8006428:	4770      	bx	lr

0800642a <__retarget_lock_acquire_recursive>:
 800642a:	4770      	bx	lr

0800642c <__retarget_lock_release_recursive>:
 800642c:	4770      	bx	lr
	...

08006430 <malloc>:
 8006430:	4b02      	ldr	r3, [pc, #8]	; (800643c <malloc+0xc>)
 8006432:	4601      	mov	r1, r0
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	f000 bc17 	b.w	8006c68 <_malloc_r>
 800643a:	bf00      	nop
 800643c:	2000000c 	.word	0x2000000c

08006440 <memcpy>:
 8006440:	440a      	add	r2, r1
 8006442:	4291      	cmp	r1, r2
 8006444:	f100 33ff 	add.w	r3, r0, #4294967295
 8006448:	d100      	bne.n	800644c <memcpy+0xc>
 800644a:	4770      	bx	lr
 800644c:	b510      	push	{r4, lr}
 800644e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006456:	4291      	cmp	r1, r2
 8006458:	d1f9      	bne.n	800644e <memcpy+0xe>
 800645a:	bd10      	pop	{r4, pc}

0800645c <_Balloc>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006460:	4604      	mov	r4, r0
 8006462:	460d      	mov	r5, r1
 8006464:	b976      	cbnz	r6, 8006484 <_Balloc+0x28>
 8006466:	2010      	movs	r0, #16
 8006468:	f7ff ffe2 	bl	8006430 <malloc>
 800646c:	4602      	mov	r2, r0
 800646e:	6260      	str	r0, [r4, #36]	; 0x24
 8006470:	b920      	cbnz	r0, 800647c <_Balloc+0x20>
 8006472:	4b18      	ldr	r3, [pc, #96]	; (80064d4 <_Balloc+0x78>)
 8006474:	4818      	ldr	r0, [pc, #96]	; (80064d8 <_Balloc+0x7c>)
 8006476:	2166      	movs	r1, #102	; 0x66
 8006478:	f000 feea 	bl	8007250 <__assert_func>
 800647c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006480:	6006      	str	r6, [r0, #0]
 8006482:	60c6      	str	r6, [r0, #12]
 8006484:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006486:	68f3      	ldr	r3, [r6, #12]
 8006488:	b183      	cbz	r3, 80064ac <_Balloc+0x50>
 800648a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006492:	b9b8      	cbnz	r0, 80064c4 <_Balloc+0x68>
 8006494:	2101      	movs	r1, #1
 8006496:	fa01 f605 	lsl.w	r6, r1, r5
 800649a:	1d72      	adds	r2, r6, #5
 800649c:	0092      	lsls	r2, r2, #2
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 fb60 	bl	8006b64 <_calloc_r>
 80064a4:	b160      	cbz	r0, 80064c0 <_Balloc+0x64>
 80064a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064aa:	e00e      	b.n	80064ca <_Balloc+0x6e>
 80064ac:	2221      	movs	r2, #33	; 0x21
 80064ae:	2104      	movs	r1, #4
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 fb57 	bl	8006b64 <_calloc_r>
 80064b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064b8:	60f0      	str	r0, [r6, #12]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e4      	bne.n	800648a <_Balloc+0x2e>
 80064c0:	2000      	movs	r0, #0
 80064c2:	bd70      	pop	{r4, r5, r6, pc}
 80064c4:	6802      	ldr	r2, [r0, #0]
 80064c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064ca:	2300      	movs	r3, #0
 80064cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064d0:	e7f7      	b.n	80064c2 <_Balloc+0x66>
 80064d2:	bf00      	nop
 80064d4:	08007751 	.word	0x08007751
 80064d8:	08007834 	.word	0x08007834

080064dc <_Bfree>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064e0:	4605      	mov	r5, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	b976      	cbnz	r6, 8006504 <_Bfree+0x28>
 80064e6:	2010      	movs	r0, #16
 80064e8:	f7ff ffa2 	bl	8006430 <malloc>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6268      	str	r0, [r5, #36]	; 0x24
 80064f0:	b920      	cbnz	r0, 80064fc <_Bfree+0x20>
 80064f2:	4b09      	ldr	r3, [pc, #36]	; (8006518 <_Bfree+0x3c>)
 80064f4:	4809      	ldr	r0, [pc, #36]	; (800651c <_Bfree+0x40>)
 80064f6:	218a      	movs	r1, #138	; 0x8a
 80064f8:	f000 feaa 	bl	8007250 <__assert_func>
 80064fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006500:	6006      	str	r6, [r0, #0]
 8006502:	60c6      	str	r6, [r0, #12]
 8006504:	b13c      	cbz	r4, 8006516 <_Bfree+0x3a>
 8006506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006508:	6862      	ldr	r2, [r4, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006510:	6021      	str	r1, [r4, #0]
 8006512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	08007751 	.word	0x08007751
 800651c:	08007834 	.word	0x08007834

08006520 <__multadd>:
 8006520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006524:	690d      	ldr	r5, [r1, #16]
 8006526:	4607      	mov	r7, r0
 8006528:	460c      	mov	r4, r1
 800652a:	461e      	mov	r6, r3
 800652c:	f101 0c14 	add.w	ip, r1, #20
 8006530:	2000      	movs	r0, #0
 8006532:	f8dc 3000 	ldr.w	r3, [ip]
 8006536:	b299      	uxth	r1, r3
 8006538:	fb02 6101 	mla	r1, r2, r1, r6
 800653c:	0c1e      	lsrs	r6, r3, #16
 800653e:	0c0b      	lsrs	r3, r1, #16
 8006540:	fb02 3306 	mla	r3, r2, r6, r3
 8006544:	b289      	uxth	r1, r1
 8006546:	3001      	adds	r0, #1
 8006548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800654c:	4285      	cmp	r5, r0
 800654e:	f84c 1b04 	str.w	r1, [ip], #4
 8006552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006556:	dcec      	bgt.n	8006532 <__multadd+0x12>
 8006558:	b30e      	cbz	r6, 800659e <__multadd+0x7e>
 800655a:	68a3      	ldr	r3, [r4, #8]
 800655c:	42ab      	cmp	r3, r5
 800655e:	dc19      	bgt.n	8006594 <__multadd+0x74>
 8006560:	6861      	ldr	r1, [r4, #4]
 8006562:	4638      	mov	r0, r7
 8006564:	3101      	adds	r1, #1
 8006566:	f7ff ff79 	bl	800645c <_Balloc>
 800656a:	4680      	mov	r8, r0
 800656c:	b928      	cbnz	r0, 800657a <__multadd+0x5a>
 800656e:	4602      	mov	r2, r0
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <__multadd+0x84>)
 8006572:	480d      	ldr	r0, [pc, #52]	; (80065a8 <__multadd+0x88>)
 8006574:	21b5      	movs	r1, #181	; 0xb5
 8006576:	f000 fe6b 	bl	8007250 <__assert_func>
 800657a:	6922      	ldr	r2, [r4, #16]
 800657c:	3202      	adds	r2, #2
 800657e:	f104 010c 	add.w	r1, r4, #12
 8006582:	0092      	lsls	r2, r2, #2
 8006584:	300c      	adds	r0, #12
 8006586:	f7ff ff5b 	bl	8006440 <memcpy>
 800658a:	4621      	mov	r1, r4
 800658c:	4638      	mov	r0, r7
 800658e:	f7ff ffa5 	bl	80064dc <_Bfree>
 8006592:	4644      	mov	r4, r8
 8006594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006598:	3501      	adds	r5, #1
 800659a:	615e      	str	r6, [r3, #20]
 800659c:	6125      	str	r5, [r4, #16]
 800659e:	4620      	mov	r0, r4
 80065a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a4:	080077c3 	.word	0x080077c3
 80065a8:	08007834 	.word	0x08007834

080065ac <__hi0bits>:
 80065ac:	0c03      	lsrs	r3, r0, #16
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	b9d3      	cbnz	r3, 80065e8 <__hi0bits+0x3c>
 80065b2:	0400      	lsls	r0, r0, #16
 80065b4:	2310      	movs	r3, #16
 80065b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065ba:	bf04      	itt	eq
 80065bc:	0200      	lsleq	r0, r0, #8
 80065be:	3308      	addeq	r3, #8
 80065c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065c4:	bf04      	itt	eq
 80065c6:	0100      	lsleq	r0, r0, #4
 80065c8:	3304      	addeq	r3, #4
 80065ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065ce:	bf04      	itt	eq
 80065d0:	0080      	lsleq	r0, r0, #2
 80065d2:	3302      	addeq	r3, #2
 80065d4:	2800      	cmp	r0, #0
 80065d6:	db05      	blt.n	80065e4 <__hi0bits+0x38>
 80065d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065dc:	f103 0301 	add.w	r3, r3, #1
 80065e0:	bf08      	it	eq
 80065e2:	2320      	moveq	r3, #32
 80065e4:	4618      	mov	r0, r3
 80065e6:	4770      	bx	lr
 80065e8:	2300      	movs	r3, #0
 80065ea:	e7e4      	b.n	80065b6 <__hi0bits+0xa>

080065ec <__lo0bits>:
 80065ec:	6803      	ldr	r3, [r0, #0]
 80065ee:	f013 0207 	ands.w	r2, r3, #7
 80065f2:	4601      	mov	r1, r0
 80065f4:	d00b      	beq.n	800660e <__lo0bits+0x22>
 80065f6:	07da      	lsls	r2, r3, #31
 80065f8:	d423      	bmi.n	8006642 <__lo0bits+0x56>
 80065fa:	0798      	lsls	r0, r3, #30
 80065fc:	bf49      	itett	mi
 80065fe:	085b      	lsrmi	r3, r3, #1
 8006600:	089b      	lsrpl	r3, r3, #2
 8006602:	2001      	movmi	r0, #1
 8006604:	600b      	strmi	r3, [r1, #0]
 8006606:	bf5c      	itt	pl
 8006608:	600b      	strpl	r3, [r1, #0]
 800660a:	2002      	movpl	r0, #2
 800660c:	4770      	bx	lr
 800660e:	b298      	uxth	r0, r3
 8006610:	b9a8      	cbnz	r0, 800663e <__lo0bits+0x52>
 8006612:	0c1b      	lsrs	r3, r3, #16
 8006614:	2010      	movs	r0, #16
 8006616:	b2da      	uxtb	r2, r3
 8006618:	b90a      	cbnz	r2, 800661e <__lo0bits+0x32>
 800661a:	3008      	adds	r0, #8
 800661c:	0a1b      	lsrs	r3, r3, #8
 800661e:	071a      	lsls	r2, r3, #28
 8006620:	bf04      	itt	eq
 8006622:	091b      	lsreq	r3, r3, #4
 8006624:	3004      	addeq	r0, #4
 8006626:	079a      	lsls	r2, r3, #30
 8006628:	bf04      	itt	eq
 800662a:	089b      	lsreq	r3, r3, #2
 800662c:	3002      	addeq	r0, #2
 800662e:	07da      	lsls	r2, r3, #31
 8006630:	d403      	bmi.n	800663a <__lo0bits+0x4e>
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	f100 0001 	add.w	r0, r0, #1
 8006638:	d005      	beq.n	8006646 <__lo0bits+0x5a>
 800663a:	600b      	str	r3, [r1, #0]
 800663c:	4770      	bx	lr
 800663e:	4610      	mov	r0, r2
 8006640:	e7e9      	b.n	8006616 <__lo0bits+0x2a>
 8006642:	2000      	movs	r0, #0
 8006644:	4770      	bx	lr
 8006646:	2020      	movs	r0, #32
 8006648:	4770      	bx	lr
	...

0800664c <__i2b>:
 800664c:	b510      	push	{r4, lr}
 800664e:	460c      	mov	r4, r1
 8006650:	2101      	movs	r1, #1
 8006652:	f7ff ff03 	bl	800645c <_Balloc>
 8006656:	4602      	mov	r2, r0
 8006658:	b928      	cbnz	r0, 8006666 <__i2b+0x1a>
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <__i2b+0x24>)
 800665c:	4805      	ldr	r0, [pc, #20]	; (8006674 <__i2b+0x28>)
 800665e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006662:	f000 fdf5 	bl	8007250 <__assert_func>
 8006666:	2301      	movs	r3, #1
 8006668:	6144      	str	r4, [r0, #20]
 800666a:	6103      	str	r3, [r0, #16]
 800666c:	bd10      	pop	{r4, pc}
 800666e:	bf00      	nop
 8006670:	080077c3 	.word	0x080077c3
 8006674:	08007834 	.word	0x08007834

08006678 <__multiply>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	4691      	mov	r9, r2
 800667e:	690a      	ldr	r2, [r1, #16]
 8006680:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006684:	429a      	cmp	r2, r3
 8006686:	bfb8      	it	lt
 8006688:	460b      	movlt	r3, r1
 800668a:	460c      	mov	r4, r1
 800668c:	bfbc      	itt	lt
 800668e:	464c      	movlt	r4, r9
 8006690:	4699      	movlt	r9, r3
 8006692:	6927      	ldr	r7, [r4, #16]
 8006694:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006698:	68a3      	ldr	r3, [r4, #8]
 800669a:	6861      	ldr	r1, [r4, #4]
 800669c:	eb07 060a 	add.w	r6, r7, sl
 80066a0:	42b3      	cmp	r3, r6
 80066a2:	b085      	sub	sp, #20
 80066a4:	bfb8      	it	lt
 80066a6:	3101      	addlt	r1, #1
 80066a8:	f7ff fed8 	bl	800645c <_Balloc>
 80066ac:	b930      	cbnz	r0, 80066bc <__multiply+0x44>
 80066ae:	4602      	mov	r2, r0
 80066b0:	4b44      	ldr	r3, [pc, #272]	; (80067c4 <__multiply+0x14c>)
 80066b2:	4845      	ldr	r0, [pc, #276]	; (80067c8 <__multiply+0x150>)
 80066b4:	f240 115d 	movw	r1, #349	; 0x15d
 80066b8:	f000 fdca 	bl	8007250 <__assert_func>
 80066bc:	f100 0514 	add.w	r5, r0, #20
 80066c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066c4:	462b      	mov	r3, r5
 80066c6:	2200      	movs	r2, #0
 80066c8:	4543      	cmp	r3, r8
 80066ca:	d321      	bcc.n	8006710 <__multiply+0x98>
 80066cc:	f104 0314 	add.w	r3, r4, #20
 80066d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80066d4:	f109 0314 	add.w	r3, r9, #20
 80066d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066dc:	9202      	str	r2, [sp, #8]
 80066de:	1b3a      	subs	r2, r7, r4
 80066e0:	3a15      	subs	r2, #21
 80066e2:	f022 0203 	bic.w	r2, r2, #3
 80066e6:	3204      	adds	r2, #4
 80066e8:	f104 0115 	add.w	r1, r4, #21
 80066ec:	428f      	cmp	r7, r1
 80066ee:	bf38      	it	cc
 80066f0:	2204      	movcc	r2, #4
 80066f2:	9201      	str	r2, [sp, #4]
 80066f4:	9a02      	ldr	r2, [sp, #8]
 80066f6:	9303      	str	r3, [sp, #12]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d80c      	bhi.n	8006716 <__multiply+0x9e>
 80066fc:	2e00      	cmp	r6, #0
 80066fe:	dd03      	ble.n	8006708 <__multiply+0x90>
 8006700:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006704:	2b00      	cmp	r3, #0
 8006706:	d05a      	beq.n	80067be <__multiply+0x146>
 8006708:	6106      	str	r6, [r0, #16]
 800670a:	b005      	add	sp, #20
 800670c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006710:	f843 2b04 	str.w	r2, [r3], #4
 8006714:	e7d8      	b.n	80066c8 <__multiply+0x50>
 8006716:	f8b3 a000 	ldrh.w	sl, [r3]
 800671a:	f1ba 0f00 	cmp.w	sl, #0
 800671e:	d024      	beq.n	800676a <__multiply+0xf2>
 8006720:	f104 0e14 	add.w	lr, r4, #20
 8006724:	46a9      	mov	r9, r5
 8006726:	f04f 0c00 	mov.w	ip, #0
 800672a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800672e:	f8d9 1000 	ldr.w	r1, [r9]
 8006732:	fa1f fb82 	uxth.w	fp, r2
 8006736:	b289      	uxth	r1, r1
 8006738:	fb0a 110b 	mla	r1, sl, fp, r1
 800673c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006740:	f8d9 2000 	ldr.w	r2, [r9]
 8006744:	4461      	add	r1, ip
 8006746:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800674a:	fb0a c20b 	mla	r2, sl, fp, ip
 800674e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006752:	b289      	uxth	r1, r1
 8006754:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006758:	4577      	cmp	r7, lr
 800675a:	f849 1b04 	str.w	r1, [r9], #4
 800675e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006762:	d8e2      	bhi.n	800672a <__multiply+0xb2>
 8006764:	9a01      	ldr	r2, [sp, #4]
 8006766:	f845 c002 	str.w	ip, [r5, r2]
 800676a:	9a03      	ldr	r2, [sp, #12]
 800676c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006770:	3304      	adds	r3, #4
 8006772:	f1b9 0f00 	cmp.w	r9, #0
 8006776:	d020      	beq.n	80067ba <__multiply+0x142>
 8006778:	6829      	ldr	r1, [r5, #0]
 800677a:	f104 0c14 	add.w	ip, r4, #20
 800677e:	46ae      	mov	lr, r5
 8006780:	f04f 0a00 	mov.w	sl, #0
 8006784:	f8bc b000 	ldrh.w	fp, [ip]
 8006788:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800678c:	fb09 220b 	mla	r2, r9, fp, r2
 8006790:	4492      	add	sl, r2
 8006792:	b289      	uxth	r1, r1
 8006794:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006798:	f84e 1b04 	str.w	r1, [lr], #4
 800679c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80067a0:	f8be 1000 	ldrh.w	r1, [lr]
 80067a4:	0c12      	lsrs	r2, r2, #16
 80067a6:	fb09 1102 	mla	r1, r9, r2, r1
 80067aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80067ae:	4567      	cmp	r7, ip
 80067b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067b4:	d8e6      	bhi.n	8006784 <__multiply+0x10c>
 80067b6:	9a01      	ldr	r2, [sp, #4]
 80067b8:	50a9      	str	r1, [r5, r2]
 80067ba:	3504      	adds	r5, #4
 80067bc:	e79a      	b.n	80066f4 <__multiply+0x7c>
 80067be:	3e01      	subs	r6, #1
 80067c0:	e79c      	b.n	80066fc <__multiply+0x84>
 80067c2:	bf00      	nop
 80067c4:	080077c3 	.word	0x080077c3
 80067c8:	08007834 	.word	0x08007834

080067cc <__pow5mult>:
 80067cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d0:	4615      	mov	r5, r2
 80067d2:	f012 0203 	ands.w	r2, r2, #3
 80067d6:	4606      	mov	r6, r0
 80067d8:	460f      	mov	r7, r1
 80067da:	d007      	beq.n	80067ec <__pow5mult+0x20>
 80067dc:	4c25      	ldr	r4, [pc, #148]	; (8006874 <__pow5mult+0xa8>)
 80067de:	3a01      	subs	r2, #1
 80067e0:	2300      	movs	r3, #0
 80067e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067e6:	f7ff fe9b 	bl	8006520 <__multadd>
 80067ea:	4607      	mov	r7, r0
 80067ec:	10ad      	asrs	r5, r5, #2
 80067ee:	d03d      	beq.n	800686c <__pow5mult+0xa0>
 80067f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80067f2:	b97c      	cbnz	r4, 8006814 <__pow5mult+0x48>
 80067f4:	2010      	movs	r0, #16
 80067f6:	f7ff fe1b 	bl	8006430 <malloc>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6270      	str	r0, [r6, #36]	; 0x24
 80067fe:	b928      	cbnz	r0, 800680c <__pow5mult+0x40>
 8006800:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <__pow5mult+0xac>)
 8006802:	481e      	ldr	r0, [pc, #120]	; (800687c <__pow5mult+0xb0>)
 8006804:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006808:	f000 fd22 	bl	8007250 <__assert_func>
 800680c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006810:	6004      	str	r4, [r0, #0]
 8006812:	60c4      	str	r4, [r0, #12]
 8006814:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800681c:	b94c      	cbnz	r4, 8006832 <__pow5mult+0x66>
 800681e:	f240 2171 	movw	r1, #625	; 0x271
 8006822:	4630      	mov	r0, r6
 8006824:	f7ff ff12 	bl	800664c <__i2b>
 8006828:	2300      	movs	r3, #0
 800682a:	f8c8 0008 	str.w	r0, [r8, #8]
 800682e:	4604      	mov	r4, r0
 8006830:	6003      	str	r3, [r0, #0]
 8006832:	f04f 0900 	mov.w	r9, #0
 8006836:	07eb      	lsls	r3, r5, #31
 8006838:	d50a      	bpl.n	8006850 <__pow5mult+0x84>
 800683a:	4639      	mov	r1, r7
 800683c:	4622      	mov	r2, r4
 800683e:	4630      	mov	r0, r6
 8006840:	f7ff ff1a 	bl	8006678 <__multiply>
 8006844:	4639      	mov	r1, r7
 8006846:	4680      	mov	r8, r0
 8006848:	4630      	mov	r0, r6
 800684a:	f7ff fe47 	bl	80064dc <_Bfree>
 800684e:	4647      	mov	r7, r8
 8006850:	106d      	asrs	r5, r5, #1
 8006852:	d00b      	beq.n	800686c <__pow5mult+0xa0>
 8006854:	6820      	ldr	r0, [r4, #0]
 8006856:	b938      	cbnz	r0, 8006868 <__pow5mult+0x9c>
 8006858:	4622      	mov	r2, r4
 800685a:	4621      	mov	r1, r4
 800685c:	4630      	mov	r0, r6
 800685e:	f7ff ff0b 	bl	8006678 <__multiply>
 8006862:	6020      	str	r0, [r4, #0]
 8006864:	f8c0 9000 	str.w	r9, [r0]
 8006868:	4604      	mov	r4, r0
 800686a:	e7e4      	b.n	8006836 <__pow5mult+0x6a>
 800686c:	4638      	mov	r0, r7
 800686e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006872:	bf00      	nop
 8006874:	08007980 	.word	0x08007980
 8006878:	08007751 	.word	0x08007751
 800687c:	08007834 	.word	0x08007834

08006880 <__lshift>:
 8006880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006884:	460c      	mov	r4, r1
 8006886:	6849      	ldr	r1, [r1, #4]
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	4607      	mov	r7, r0
 8006892:	4691      	mov	r9, r2
 8006894:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006898:	f108 0601 	add.w	r6, r8, #1
 800689c:	42b3      	cmp	r3, r6
 800689e:	db0b      	blt.n	80068b8 <__lshift+0x38>
 80068a0:	4638      	mov	r0, r7
 80068a2:	f7ff fddb 	bl	800645c <_Balloc>
 80068a6:	4605      	mov	r5, r0
 80068a8:	b948      	cbnz	r0, 80068be <__lshift+0x3e>
 80068aa:	4602      	mov	r2, r0
 80068ac:	4b2a      	ldr	r3, [pc, #168]	; (8006958 <__lshift+0xd8>)
 80068ae:	482b      	ldr	r0, [pc, #172]	; (800695c <__lshift+0xdc>)
 80068b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80068b4:	f000 fccc 	bl	8007250 <__assert_func>
 80068b8:	3101      	adds	r1, #1
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	e7ee      	b.n	800689c <__lshift+0x1c>
 80068be:	2300      	movs	r3, #0
 80068c0:	f100 0114 	add.w	r1, r0, #20
 80068c4:	f100 0210 	add.w	r2, r0, #16
 80068c8:	4618      	mov	r0, r3
 80068ca:	4553      	cmp	r3, sl
 80068cc:	db37      	blt.n	800693e <__lshift+0xbe>
 80068ce:	6920      	ldr	r0, [r4, #16]
 80068d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068d4:	f104 0314 	add.w	r3, r4, #20
 80068d8:	f019 091f 	ands.w	r9, r9, #31
 80068dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80068e4:	d02f      	beq.n	8006946 <__lshift+0xc6>
 80068e6:	f1c9 0e20 	rsb	lr, r9, #32
 80068ea:	468a      	mov	sl, r1
 80068ec:	f04f 0c00 	mov.w	ip, #0
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	fa02 f209 	lsl.w	r2, r2, r9
 80068f6:	ea42 020c 	orr.w	r2, r2, ip
 80068fa:	f84a 2b04 	str.w	r2, [sl], #4
 80068fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006902:	4298      	cmp	r0, r3
 8006904:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006908:	d8f2      	bhi.n	80068f0 <__lshift+0x70>
 800690a:	1b03      	subs	r3, r0, r4
 800690c:	3b15      	subs	r3, #21
 800690e:	f023 0303 	bic.w	r3, r3, #3
 8006912:	3304      	adds	r3, #4
 8006914:	f104 0215 	add.w	r2, r4, #21
 8006918:	4290      	cmp	r0, r2
 800691a:	bf38      	it	cc
 800691c:	2304      	movcc	r3, #4
 800691e:	f841 c003 	str.w	ip, [r1, r3]
 8006922:	f1bc 0f00 	cmp.w	ip, #0
 8006926:	d001      	beq.n	800692c <__lshift+0xac>
 8006928:	f108 0602 	add.w	r6, r8, #2
 800692c:	3e01      	subs	r6, #1
 800692e:	4638      	mov	r0, r7
 8006930:	612e      	str	r6, [r5, #16]
 8006932:	4621      	mov	r1, r4
 8006934:	f7ff fdd2 	bl	80064dc <_Bfree>
 8006938:	4628      	mov	r0, r5
 800693a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006942:	3301      	adds	r3, #1
 8006944:	e7c1      	b.n	80068ca <__lshift+0x4a>
 8006946:	3904      	subs	r1, #4
 8006948:	f853 2b04 	ldr.w	r2, [r3], #4
 800694c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006950:	4298      	cmp	r0, r3
 8006952:	d8f9      	bhi.n	8006948 <__lshift+0xc8>
 8006954:	e7ea      	b.n	800692c <__lshift+0xac>
 8006956:	bf00      	nop
 8006958:	080077c3 	.word	0x080077c3
 800695c:	08007834 	.word	0x08007834

08006960 <__mcmp>:
 8006960:	b530      	push	{r4, r5, lr}
 8006962:	6902      	ldr	r2, [r0, #16]
 8006964:	690c      	ldr	r4, [r1, #16]
 8006966:	1b12      	subs	r2, r2, r4
 8006968:	d10e      	bne.n	8006988 <__mcmp+0x28>
 800696a:	f100 0314 	add.w	r3, r0, #20
 800696e:	3114      	adds	r1, #20
 8006970:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006974:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006978:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800697c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006980:	42a5      	cmp	r5, r4
 8006982:	d003      	beq.n	800698c <__mcmp+0x2c>
 8006984:	d305      	bcc.n	8006992 <__mcmp+0x32>
 8006986:	2201      	movs	r2, #1
 8006988:	4610      	mov	r0, r2
 800698a:	bd30      	pop	{r4, r5, pc}
 800698c:	4283      	cmp	r3, r0
 800698e:	d3f3      	bcc.n	8006978 <__mcmp+0x18>
 8006990:	e7fa      	b.n	8006988 <__mcmp+0x28>
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	e7f7      	b.n	8006988 <__mcmp+0x28>

08006998 <__mdiff>:
 8006998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	460c      	mov	r4, r1
 800699e:	4606      	mov	r6, r0
 80069a0:	4611      	mov	r1, r2
 80069a2:	4620      	mov	r0, r4
 80069a4:	4690      	mov	r8, r2
 80069a6:	f7ff ffdb 	bl	8006960 <__mcmp>
 80069aa:	1e05      	subs	r5, r0, #0
 80069ac:	d110      	bne.n	80069d0 <__mdiff+0x38>
 80069ae:	4629      	mov	r1, r5
 80069b0:	4630      	mov	r0, r6
 80069b2:	f7ff fd53 	bl	800645c <_Balloc>
 80069b6:	b930      	cbnz	r0, 80069c6 <__mdiff+0x2e>
 80069b8:	4b3a      	ldr	r3, [pc, #232]	; (8006aa4 <__mdiff+0x10c>)
 80069ba:	4602      	mov	r2, r0
 80069bc:	f240 2132 	movw	r1, #562	; 0x232
 80069c0:	4839      	ldr	r0, [pc, #228]	; (8006aa8 <__mdiff+0x110>)
 80069c2:	f000 fc45 	bl	8007250 <__assert_func>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d0:	bfa4      	itt	ge
 80069d2:	4643      	movge	r3, r8
 80069d4:	46a0      	movge	r8, r4
 80069d6:	4630      	mov	r0, r6
 80069d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069dc:	bfa6      	itte	ge
 80069de:	461c      	movge	r4, r3
 80069e0:	2500      	movge	r5, #0
 80069e2:	2501      	movlt	r5, #1
 80069e4:	f7ff fd3a 	bl	800645c <_Balloc>
 80069e8:	b920      	cbnz	r0, 80069f4 <__mdiff+0x5c>
 80069ea:	4b2e      	ldr	r3, [pc, #184]	; (8006aa4 <__mdiff+0x10c>)
 80069ec:	4602      	mov	r2, r0
 80069ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80069f2:	e7e5      	b.n	80069c0 <__mdiff+0x28>
 80069f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069f8:	6926      	ldr	r6, [r4, #16]
 80069fa:	60c5      	str	r5, [r0, #12]
 80069fc:	f104 0914 	add.w	r9, r4, #20
 8006a00:	f108 0514 	add.w	r5, r8, #20
 8006a04:	f100 0e14 	add.w	lr, r0, #20
 8006a08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a10:	f108 0210 	add.w	r2, r8, #16
 8006a14:	46f2      	mov	sl, lr
 8006a16:	2100      	movs	r1, #0
 8006a18:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a20:	fa1f f883 	uxth.w	r8, r3
 8006a24:	fa11 f18b 	uxtah	r1, r1, fp
 8006a28:	0c1b      	lsrs	r3, r3, #16
 8006a2a:	eba1 0808 	sub.w	r8, r1, r8
 8006a2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a36:	fa1f f888 	uxth.w	r8, r8
 8006a3a:	1419      	asrs	r1, r3, #16
 8006a3c:	454e      	cmp	r6, r9
 8006a3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a42:	f84a 3b04 	str.w	r3, [sl], #4
 8006a46:	d8e7      	bhi.n	8006a18 <__mdiff+0x80>
 8006a48:	1b33      	subs	r3, r6, r4
 8006a4a:	3b15      	subs	r3, #21
 8006a4c:	f023 0303 	bic.w	r3, r3, #3
 8006a50:	3304      	adds	r3, #4
 8006a52:	3415      	adds	r4, #21
 8006a54:	42a6      	cmp	r6, r4
 8006a56:	bf38      	it	cc
 8006a58:	2304      	movcc	r3, #4
 8006a5a:	441d      	add	r5, r3
 8006a5c:	4473      	add	r3, lr
 8006a5e:	469e      	mov	lr, r3
 8006a60:	462e      	mov	r6, r5
 8006a62:	4566      	cmp	r6, ip
 8006a64:	d30e      	bcc.n	8006a84 <__mdiff+0xec>
 8006a66:	f10c 0203 	add.w	r2, ip, #3
 8006a6a:	1b52      	subs	r2, r2, r5
 8006a6c:	f022 0203 	bic.w	r2, r2, #3
 8006a70:	3d03      	subs	r5, #3
 8006a72:	45ac      	cmp	ip, r5
 8006a74:	bf38      	it	cc
 8006a76:	2200      	movcc	r2, #0
 8006a78:	441a      	add	r2, r3
 8006a7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006a7e:	b17b      	cbz	r3, 8006aa0 <__mdiff+0x108>
 8006a80:	6107      	str	r7, [r0, #16]
 8006a82:	e7a3      	b.n	80069cc <__mdiff+0x34>
 8006a84:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a88:	fa11 f288 	uxtah	r2, r1, r8
 8006a8c:	1414      	asrs	r4, r2, #16
 8006a8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a92:	b292      	uxth	r2, r2
 8006a94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a98:	f84e 2b04 	str.w	r2, [lr], #4
 8006a9c:	1421      	asrs	r1, r4, #16
 8006a9e:	e7e0      	b.n	8006a62 <__mdiff+0xca>
 8006aa0:	3f01      	subs	r7, #1
 8006aa2:	e7ea      	b.n	8006a7a <__mdiff+0xe2>
 8006aa4:	080077c3 	.word	0x080077c3
 8006aa8:	08007834 	.word	0x08007834

08006aac <__d2b>:
 8006aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	ec57 6b10 	vmov	r6, r7, d0
 8006ab8:	4690      	mov	r8, r2
 8006aba:	f7ff fccf 	bl	800645c <_Balloc>
 8006abe:	4604      	mov	r4, r0
 8006ac0:	b930      	cbnz	r0, 8006ad0 <__d2b+0x24>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	4b25      	ldr	r3, [pc, #148]	; (8006b5c <__d2b+0xb0>)
 8006ac6:	4826      	ldr	r0, [pc, #152]	; (8006b60 <__d2b+0xb4>)
 8006ac8:	f240 310a 	movw	r1, #778	; 0x30a
 8006acc:	f000 fbc0 	bl	8007250 <__assert_func>
 8006ad0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006ad4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ad8:	bb35      	cbnz	r5, 8006b28 <__d2b+0x7c>
 8006ada:	2e00      	cmp	r6, #0
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	d028      	beq.n	8006b32 <__d2b+0x86>
 8006ae0:	4668      	mov	r0, sp
 8006ae2:	9600      	str	r6, [sp, #0]
 8006ae4:	f7ff fd82 	bl	80065ec <__lo0bits>
 8006ae8:	9900      	ldr	r1, [sp, #0]
 8006aea:	b300      	cbz	r0, 8006b2e <__d2b+0x82>
 8006aec:	9a01      	ldr	r2, [sp, #4]
 8006aee:	f1c0 0320 	rsb	r3, r0, #32
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	430b      	orrs	r3, r1
 8006af8:	40c2      	lsrs	r2, r0
 8006afa:	6163      	str	r3, [r4, #20]
 8006afc:	9201      	str	r2, [sp, #4]
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	61a3      	str	r3, [r4, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bf14      	ite	ne
 8006b06:	2202      	movne	r2, #2
 8006b08:	2201      	moveq	r2, #1
 8006b0a:	6122      	str	r2, [r4, #16]
 8006b0c:	b1d5      	cbz	r5, 8006b44 <__d2b+0x98>
 8006b0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b12:	4405      	add	r5, r0
 8006b14:	f8c9 5000 	str.w	r5, [r9]
 8006b18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b1c:	f8c8 0000 	str.w	r0, [r8]
 8006b20:	4620      	mov	r0, r4
 8006b22:	b003      	add	sp, #12
 8006b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b2c:	e7d5      	b.n	8006ada <__d2b+0x2e>
 8006b2e:	6161      	str	r1, [r4, #20]
 8006b30:	e7e5      	b.n	8006afe <__d2b+0x52>
 8006b32:	a801      	add	r0, sp, #4
 8006b34:	f7ff fd5a 	bl	80065ec <__lo0bits>
 8006b38:	9b01      	ldr	r3, [sp, #4]
 8006b3a:	6163      	str	r3, [r4, #20]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	6122      	str	r2, [r4, #16]
 8006b40:	3020      	adds	r0, #32
 8006b42:	e7e3      	b.n	8006b0c <__d2b+0x60>
 8006b44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b4c:	f8c9 0000 	str.w	r0, [r9]
 8006b50:	6918      	ldr	r0, [r3, #16]
 8006b52:	f7ff fd2b 	bl	80065ac <__hi0bits>
 8006b56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b5a:	e7df      	b.n	8006b1c <__d2b+0x70>
 8006b5c:	080077c3 	.word	0x080077c3
 8006b60:	08007834 	.word	0x08007834

08006b64 <_calloc_r>:
 8006b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b66:	fba1 2402 	umull	r2, r4, r1, r2
 8006b6a:	b94c      	cbnz	r4, 8006b80 <_calloc_r+0x1c>
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	9201      	str	r2, [sp, #4]
 8006b70:	f000 f87a 	bl	8006c68 <_malloc_r>
 8006b74:	9a01      	ldr	r2, [sp, #4]
 8006b76:	4605      	mov	r5, r0
 8006b78:	b930      	cbnz	r0, 8006b88 <_calloc_r+0x24>
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	b003      	add	sp, #12
 8006b7e:	bd30      	pop	{r4, r5, pc}
 8006b80:	220c      	movs	r2, #12
 8006b82:	6002      	str	r2, [r0, #0]
 8006b84:	2500      	movs	r5, #0
 8006b86:	e7f8      	b.n	8006b7a <_calloc_r+0x16>
 8006b88:	4621      	mov	r1, r4
 8006b8a:	f7fe f84f 	bl	8004c2c <memset>
 8006b8e:	e7f4      	b.n	8006b7a <_calloc_r+0x16>

08006b90 <_free_r>:
 8006b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b92:	2900      	cmp	r1, #0
 8006b94:	d044      	beq.n	8006c20 <_free_r+0x90>
 8006b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b9a:	9001      	str	r0, [sp, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006ba2:	bfb8      	it	lt
 8006ba4:	18e4      	addlt	r4, r4, r3
 8006ba6:	f000 fcdf 	bl	8007568 <__malloc_lock>
 8006baa:	4a1e      	ldr	r2, [pc, #120]	; (8006c24 <_free_r+0x94>)
 8006bac:	9801      	ldr	r0, [sp, #4]
 8006bae:	6813      	ldr	r3, [r2, #0]
 8006bb0:	b933      	cbnz	r3, 8006bc0 <_free_r+0x30>
 8006bb2:	6063      	str	r3, [r4, #4]
 8006bb4:	6014      	str	r4, [r2, #0]
 8006bb6:	b003      	add	sp, #12
 8006bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bbc:	f000 bcda 	b.w	8007574 <__malloc_unlock>
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	d908      	bls.n	8006bd6 <_free_r+0x46>
 8006bc4:	6825      	ldr	r5, [r4, #0]
 8006bc6:	1961      	adds	r1, r4, r5
 8006bc8:	428b      	cmp	r3, r1
 8006bca:	bf01      	itttt	eq
 8006bcc:	6819      	ldreq	r1, [r3, #0]
 8006bce:	685b      	ldreq	r3, [r3, #4]
 8006bd0:	1949      	addeq	r1, r1, r5
 8006bd2:	6021      	streq	r1, [r4, #0]
 8006bd4:	e7ed      	b.n	8006bb2 <_free_r+0x22>
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	b10b      	cbz	r3, 8006be0 <_free_r+0x50>
 8006bdc:	42a3      	cmp	r3, r4
 8006bde:	d9fa      	bls.n	8006bd6 <_free_r+0x46>
 8006be0:	6811      	ldr	r1, [r2, #0]
 8006be2:	1855      	adds	r5, r2, r1
 8006be4:	42a5      	cmp	r5, r4
 8006be6:	d10b      	bne.n	8006c00 <_free_r+0x70>
 8006be8:	6824      	ldr	r4, [r4, #0]
 8006bea:	4421      	add	r1, r4
 8006bec:	1854      	adds	r4, r2, r1
 8006bee:	42a3      	cmp	r3, r4
 8006bf0:	6011      	str	r1, [r2, #0]
 8006bf2:	d1e0      	bne.n	8006bb6 <_free_r+0x26>
 8006bf4:	681c      	ldr	r4, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	6053      	str	r3, [r2, #4]
 8006bfa:	4421      	add	r1, r4
 8006bfc:	6011      	str	r1, [r2, #0]
 8006bfe:	e7da      	b.n	8006bb6 <_free_r+0x26>
 8006c00:	d902      	bls.n	8006c08 <_free_r+0x78>
 8006c02:	230c      	movs	r3, #12
 8006c04:	6003      	str	r3, [r0, #0]
 8006c06:	e7d6      	b.n	8006bb6 <_free_r+0x26>
 8006c08:	6825      	ldr	r5, [r4, #0]
 8006c0a:	1961      	adds	r1, r4, r5
 8006c0c:	428b      	cmp	r3, r1
 8006c0e:	bf04      	itt	eq
 8006c10:	6819      	ldreq	r1, [r3, #0]
 8006c12:	685b      	ldreq	r3, [r3, #4]
 8006c14:	6063      	str	r3, [r4, #4]
 8006c16:	bf04      	itt	eq
 8006c18:	1949      	addeq	r1, r1, r5
 8006c1a:	6021      	streq	r1, [r4, #0]
 8006c1c:	6054      	str	r4, [r2, #4]
 8006c1e:	e7ca      	b.n	8006bb6 <_free_r+0x26>
 8006c20:	b003      	add	sp, #12
 8006c22:	bd30      	pop	{r4, r5, pc}
 8006c24:	2000029c 	.word	0x2000029c

08006c28 <sbrk_aligned>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	4e0e      	ldr	r6, [pc, #56]	; (8006c64 <sbrk_aligned+0x3c>)
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	6831      	ldr	r1, [r6, #0]
 8006c30:	4605      	mov	r5, r0
 8006c32:	b911      	cbnz	r1, 8006c3a <sbrk_aligned+0x12>
 8006c34:	f000 f9e6 	bl	8007004 <_sbrk_r>
 8006c38:	6030      	str	r0, [r6, #0]
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f000 f9e1 	bl	8007004 <_sbrk_r>
 8006c42:	1c43      	adds	r3, r0, #1
 8006c44:	d00a      	beq.n	8006c5c <sbrk_aligned+0x34>
 8006c46:	1cc4      	adds	r4, r0, #3
 8006c48:	f024 0403 	bic.w	r4, r4, #3
 8006c4c:	42a0      	cmp	r0, r4
 8006c4e:	d007      	beq.n	8006c60 <sbrk_aligned+0x38>
 8006c50:	1a21      	subs	r1, r4, r0
 8006c52:	4628      	mov	r0, r5
 8006c54:	f000 f9d6 	bl	8007004 <_sbrk_r>
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d101      	bne.n	8006c60 <sbrk_aligned+0x38>
 8006c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8006c60:	4620      	mov	r0, r4
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	200002a0 	.word	0x200002a0

08006c68 <_malloc_r>:
 8006c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6c:	1ccd      	adds	r5, r1, #3
 8006c6e:	f025 0503 	bic.w	r5, r5, #3
 8006c72:	3508      	adds	r5, #8
 8006c74:	2d0c      	cmp	r5, #12
 8006c76:	bf38      	it	cc
 8006c78:	250c      	movcc	r5, #12
 8006c7a:	2d00      	cmp	r5, #0
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	db01      	blt.n	8006c84 <_malloc_r+0x1c>
 8006c80:	42a9      	cmp	r1, r5
 8006c82:	d905      	bls.n	8006c90 <_malloc_r+0x28>
 8006c84:	230c      	movs	r3, #12
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	2600      	movs	r6, #0
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c90:	4e2e      	ldr	r6, [pc, #184]	; (8006d4c <_malloc_r+0xe4>)
 8006c92:	f000 fc69 	bl	8007568 <__malloc_lock>
 8006c96:	6833      	ldr	r3, [r6, #0]
 8006c98:	461c      	mov	r4, r3
 8006c9a:	bb34      	cbnz	r4, 8006cea <_malloc_r+0x82>
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	f7ff ffc2 	bl	8006c28 <sbrk_aligned>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	d14d      	bne.n	8006d46 <_malloc_r+0xde>
 8006caa:	6834      	ldr	r4, [r6, #0]
 8006cac:	4626      	mov	r6, r4
 8006cae:	2e00      	cmp	r6, #0
 8006cb0:	d140      	bne.n	8006d34 <_malloc_r+0xcc>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	eb04 0803 	add.w	r8, r4, r3
 8006cbc:	f000 f9a2 	bl	8007004 <_sbrk_r>
 8006cc0:	4580      	cmp	r8, r0
 8006cc2:	d13a      	bne.n	8006d3a <_malloc_r+0xd2>
 8006cc4:	6821      	ldr	r1, [r4, #0]
 8006cc6:	3503      	adds	r5, #3
 8006cc8:	1a6d      	subs	r5, r5, r1
 8006cca:	f025 0503 	bic.w	r5, r5, #3
 8006cce:	3508      	adds	r5, #8
 8006cd0:	2d0c      	cmp	r5, #12
 8006cd2:	bf38      	it	cc
 8006cd4:	250c      	movcc	r5, #12
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	4638      	mov	r0, r7
 8006cda:	f7ff ffa5 	bl	8006c28 <sbrk_aligned>
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d02b      	beq.n	8006d3a <_malloc_r+0xd2>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	442b      	add	r3, r5
 8006ce6:	6023      	str	r3, [r4, #0]
 8006ce8:	e00e      	b.n	8006d08 <_malloc_r+0xa0>
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	1b52      	subs	r2, r2, r5
 8006cee:	d41e      	bmi.n	8006d2e <_malloc_r+0xc6>
 8006cf0:	2a0b      	cmp	r2, #11
 8006cf2:	d916      	bls.n	8006d22 <_malloc_r+0xba>
 8006cf4:	1961      	adds	r1, r4, r5
 8006cf6:	42a3      	cmp	r3, r4
 8006cf8:	6025      	str	r5, [r4, #0]
 8006cfa:	bf18      	it	ne
 8006cfc:	6059      	strne	r1, [r3, #4]
 8006cfe:	6863      	ldr	r3, [r4, #4]
 8006d00:	bf08      	it	eq
 8006d02:	6031      	streq	r1, [r6, #0]
 8006d04:	5162      	str	r2, [r4, r5]
 8006d06:	604b      	str	r3, [r1, #4]
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f104 060b 	add.w	r6, r4, #11
 8006d0e:	f000 fc31 	bl	8007574 <__malloc_unlock>
 8006d12:	f026 0607 	bic.w	r6, r6, #7
 8006d16:	1d23      	adds	r3, r4, #4
 8006d18:	1af2      	subs	r2, r6, r3
 8006d1a:	d0b6      	beq.n	8006c8a <_malloc_r+0x22>
 8006d1c:	1b9b      	subs	r3, r3, r6
 8006d1e:	50a3      	str	r3, [r4, r2]
 8006d20:	e7b3      	b.n	8006c8a <_malloc_r+0x22>
 8006d22:	6862      	ldr	r2, [r4, #4]
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	bf0c      	ite	eq
 8006d28:	6032      	streq	r2, [r6, #0]
 8006d2a:	605a      	strne	r2, [r3, #4]
 8006d2c:	e7ec      	b.n	8006d08 <_malloc_r+0xa0>
 8006d2e:	4623      	mov	r3, r4
 8006d30:	6864      	ldr	r4, [r4, #4]
 8006d32:	e7b2      	b.n	8006c9a <_malloc_r+0x32>
 8006d34:	4634      	mov	r4, r6
 8006d36:	6876      	ldr	r6, [r6, #4]
 8006d38:	e7b9      	b.n	8006cae <_malloc_r+0x46>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	603b      	str	r3, [r7, #0]
 8006d3e:	4638      	mov	r0, r7
 8006d40:	f000 fc18 	bl	8007574 <__malloc_unlock>
 8006d44:	e7a1      	b.n	8006c8a <_malloc_r+0x22>
 8006d46:	6025      	str	r5, [r4, #0]
 8006d48:	e7de      	b.n	8006d08 <_malloc_r+0xa0>
 8006d4a:	bf00      	nop
 8006d4c:	2000029c 	.word	0x2000029c

08006d50 <__sfputc_r>:
 8006d50:	6893      	ldr	r3, [r2, #8]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	b410      	push	{r4}
 8006d58:	6093      	str	r3, [r2, #8]
 8006d5a:	da08      	bge.n	8006d6e <__sfputc_r+0x1e>
 8006d5c:	6994      	ldr	r4, [r2, #24]
 8006d5e:	42a3      	cmp	r3, r4
 8006d60:	db01      	blt.n	8006d66 <__sfputc_r+0x16>
 8006d62:	290a      	cmp	r1, #10
 8006d64:	d103      	bne.n	8006d6e <__sfputc_r+0x1e>
 8006d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d6a:	f000 b99f 	b.w	80070ac <__swbuf_r>
 8006d6e:	6813      	ldr	r3, [r2, #0]
 8006d70:	1c58      	adds	r0, r3, #1
 8006d72:	6010      	str	r0, [r2, #0]
 8006d74:	7019      	strb	r1, [r3, #0]
 8006d76:	4608      	mov	r0, r1
 8006d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <__sfputs_r>:
 8006d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d80:	4606      	mov	r6, r0
 8006d82:	460f      	mov	r7, r1
 8006d84:	4614      	mov	r4, r2
 8006d86:	18d5      	adds	r5, r2, r3
 8006d88:	42ac      	cmp	r4, r5
 8006d8a:	d101      	bne.n	8006d90 <__sfputs_r+0x12>
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	e007      	b.n	8006da0 <__sfputs_r+0x22>
 8006d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d94:	463a      	mov	r2, r7
 8006d96:	4630      	mov	r0, r6
 8006d98:	f7ff ffda 	bl	8006d50 <__sfputc_r>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d1f3      	bne.n	8006d88 <__sfputs_r+0xa>
 8006da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006da4 <_vfiprintf_r>:
 8006da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da8:	460d      	mov	r5, r1
 8006daa:	b09d      	sub	sp, #116	; 0x74
 8006dac:	4614      	mov	r4, r2
 8006dae:	4698      	mov	r8, r3
 8006db0:	4606      	mov	r6, r0
 8006db2:	b118      	cbz	r0, 8006dbc <_vfiprintf_r+0x18>
 8006db4:	6983      	ldr	r3, [r0, #24]
 8006db6:	b90b      	cbnz	r3, 8006dbc <_vfiprintf_r+0x18>
 8006db8:	f7ff fa94 	bl	80062e4 <__sinit>
 8006dbc:	4b89      	ldr	r3, [pc, #548]	; (8006fe4 <_vfiprintf_r+0x240>)
 8006dbe:	429d      	cmp	r5, r3
 8006dc0:	d11b      	bne.n	8006dfa <_vfiprintf_r+0x56>
 8006dc2:	6875      	ldr	r5, [r6, #4]
 8006dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dc6:	07d9      	lsls	r1, r3, #31
 8006dc8:	d405      	bmi.n	8006dd6 <_vfiprintf_r+0x32>
 8006dca:	89ab      	ldrh	r3, [r5, #12]
 8006dcc:	059a      	lsls	r2, r3, #22
 8006dce:	d402      	bmi.n	8006dd6 <_vfiprintf_r+0x32>
 8006dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dd2:	f7ff fb2a 	bl	800642a <__retarget_lock_acquire_recursive>
 8006dd6:	89ab      	ldrh	r3, [r5, #12]
 8006dd8:	071b      	lsls	r3, r3, #28
 8006dda:	d501      	bpl.n	8006de0 <_vfiprintf_r+0x3c>
 8006ddc:	692b      	ldr	r3, [r5, #16]
 8006dde:	b9eb      	cbnz	r3, 8006e1c <_vfiprintf_r+0x78>
 8006de0:	4629      	mov	r1, r5
 8006de2:	4630      	mov	r0, r6
 8006de4:	f000 f9c6 	bl	8007174 <__swsetup_r>
 8006de8:	b1c0      	cbz	r0, 8006e1c <_vfiprintf_r+0x78>
 8006dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dec:	07dc      	lsls	r4, r3, #31
 8006dee:	d50e      	bpl.n	8006e0e <_vfiprintf_r+0x6a>
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	b01d      	add	sp, #116	; 0x74
 8006df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfa:	4b7b      	ldr	r3, [pc, #492]	; (8006fe8 <_vfiprintf_r+0x244>)
 8006dfc:	429d      	cmp	r5, r3
 8006dfe:	d101      	bne.n	8006e04 <_vfiprintf_r+0x60>
 8006e00:	68b5      	ldr	r5, [r6, #8]
 8006e02:	e7df      	b.n	8006dc4 <_vfiprintf_r+0x20>
 8006e04:	4b79      	ldr	r3, [pc, #484]	; (8006fec <_vfiprintf_r+0x248>)
 8006e06:	429d      	cmp	r5, r3
 8006e08:	bf08      	it	eq
 8006e0a:	68f5      	ldreq	r5, [r6, #12]
 8006e0c:	e7da      	b.n	8006dc4 <_vfiprintf_r+0x20>
 8006e0e:	89ab      	ldrh	r3, [r5, #12]
 8006e10:	0598      	lsls	r0, r3, #22
 8006e12:	d4ed      	bmi.n	8006df0 <_vfiprintf_r+0x4c>
 8006e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e16:	f7ff fb09 	bl	800642c <__retarget_lock_release_recursive>
 8006e1a:	e7e9      	b.n	8006df0 <_vfiprintf_r+0x4c>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e20:	2320      	movs	r3, #32
 8006e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e2a:	2330      	movs	r3, #48	; 0x30
 8006e2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ff0 <_vfiprintf_r+0x24c>
 8006e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e34:	f04f 0901 	mov.w	r9, #1
 8006e38:	4623      	mov	r3, r4
 8006e3a:	469a      	mov	sl, r3
 8006e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e40:	b10a      	cbz	r2, 8006e46 <_vfiprintf_r+0xa2>
 8006e42:	2a25      	cmp	r2, #37	; 0x25
 8006e44:	d1f9      	bne.n	8006e3a <_vfiprintf_r+0x96>
 8006e46:	ebba 0b04 	subs.w	fp, sl, r4
 8006e4a:	d00b      	beq.n	8006e64 <_vfiprintf_r+0xc0>
 8006e4c:	465b      	mov	r3, fp
 8006e4e:	4622      	mov	r2, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7ff ff93 	bl	8006d7e <__sfputs_r>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	f000 80aa 	beq.w	8006fb2 <_vfiprintf_r+0x20e>
 8006e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e60:	445a      	add	r2, fp
 8006e62:	9209      	str	r2, [sp, #36]	; 0x24
 8006e64:	f89a 3000 	ldrb.w	r3, [sl]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80a2 	beq.w	8006fb2 <_vfiprintf_r+0x20e>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f04f 32ff 	mov.w	r2, #4294967295
 8006e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e78:	f10a 0a01 	add.w	sl, sl, #1
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	9307      	str	r3, [sp, #28]
 8006e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e84:	931a      	str	r3, [sp, #104]	; 0x68
 8006e86:	4654      	mov	r4, sl
 8006e88:	2205      	movs	r2, #5
 8006e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8e:	4858      	ldr	r0, [pc, #352]	; (8006ff0 <_vfiprintf_r+0x24c>)
 8006e90:	f7f9 f9a6 	bl	80001e0 <memchr>
 8006e94:	9a04      	ldr	r2, [sp, #16]
 8006e96:	b9d8      	cbnz	r0, 8006ed0 <_vfiprintf_r+0x12c>
 8006e98:	06d1      	lsls	r1, r2, #27
 8006e9a:	bf44      	itt	mi
 8006e9c:	2320      	movmi	r3, #32
 8006e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ea2:	0713      	lsls	r3, r2, #28
 8006ea4:	bf44      	itt	mi
 8006ea6:	232b      	movmi	r3, #43	; 0x2b
 8006ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eac:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb2:	d015      	beq.n	8006ee0 <_vfiprintf_r+0x13c>
 8006eb4:	9a07      	ldr	r2, [sp, #28]
 8006eb6:	4654      	mov	r4, sl
 8006eb8:	2000      	movs	r0, #0
 8006eba:	f04f 0c0a 	mov.w	ip, #10
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ec4:	3b30      	subs	r3, #48	; 0x30
 8006ec6:	2b09      	cmp	r3, #9
 8006ec8:	d94e      	bls.n	8006f68 <_vfiprintf_r+0x1c4>
 8006eca:	b1b0      	cbz	r0, 8006efa <_vfiprintf_r+0x156>
 8006ecc:	9207      	str	r2, [sp, #28]
 8006ece:	e014      	b.n	8006efa <_vfiprintf_r+0x156>
 8006ed0:	eba0 0308 	sub.w	r3, r0, r8
 8006ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	9304      	str	r3, [sp, #16]
 8006edc:	46a2      	mov	sl, r4
 8006ede:	e7d2      	b.n	8006e86 <_vfiprintf_r+0xe2>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	1d19      	adds	r1, r3, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	9103      	str	r1, [sp, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bfbb      	ittet	lt
 8006eec:	425b      	neglt	r3, r3
 8006eee:	f042 0202 	orrlt.w	r2, r2, #2
 8006ef2:	9307      	strge	r3, [sp, #28]
 8006ef4:	9307      	strlt	r3, [sp, #28]
 8006ef6:	bfb8      	it	lt
 8006ef8:	9204      	strlt	r2, [sp, #16]
 8006efa:	7823      	ldrb	r3, [r4, #0]
 8006efc:	2b2e      	cmp	r3, #46	; 0x2e
 8006efe:	d10c      	bne.n	8006f1a <_vfiprintf_r+0x176>
 8006f00:	7863      	ldrb	r3, [r4, #1]
 8006f02:	2b2a      	cmp	r3, #42	; 0x2a
 8006f04:	d135      	bne.n	8006f72 <_vfiprintf_r+0x1ce>
 8006f06:	9b03      	ldr	r3, [sp, #12]
 8006f08:	1d1a      	adds	r2, r3, #4
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	9203      	str	r2, [sp, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	bfb8      	it	lt
 8006f12:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f16:	3402      	adds	r4, #2
 8006f18:	9305      	str	r3, [sp, #20]
 8006f1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007000 <_vfiprintf_r+0x25c>
 8006f1e:	7821      	ldrb	r1, [r4, #0]
 8006f20:	2203      	movs	r2, #3
 8006f22:	4650      	mov	r0, sl
 8006f24:	f7f9 f95c 	bl	80001e0 <memchr>
 8006f28:	b140      	cbz	r0, 8006f3c <_vfiprintf_r+0x198>
 8006f2a:	2340      	movs	r3, #64	; 0x40
 8006f2c:	eba0 000a 	sub.w	r0, r0, sl
 8006f30:	fa03 f000 	lsl.w	r0, r3, r0
 8006f34:	9b04      	ldr	r3, [sp, #16]
 8006f36:	4303      	orrs	r3, r0
 8006f38:	3401      	adds	r4, #1
 8006f3a:	9304      	str	r3, [sp, #16]
 8006f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f40:	482c      	ldr	r0, [pc, #176]	; (8006ff4 <_vfiprintf_r+0x250>)
 8006f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f46:	2206      	movs	r2, #6
 8006f48:	f7f9 f94a 	bl	80001e0 <memchr>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d03f      	beq.n	8006fd0 <_vfiprintf_r+0x22c>
 8006f50:	4b29      	ldr	r3, [pc, #164]	; (8006ff8 <_vfiprintf_r+0x254>)
 8006f52:	bb1b      	cbnz	r3, 8006f9c <_vfiprintf_r+0x1f8>
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	3307      	adds	r3, #7
 8006f58:	f023 0307 	bic.w	r3, r3, #7
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	9303      	str	r3, [sp, #12]
 8006f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f62:	443b      	add	r3, r7
 8006f64:	9309      	str	r3, [sp, #36]	; 0x24
 8006f66:	e767      	b.n	8006e38 <_vfiprintf_r+0x94>
 8006f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	2001      	movs	r0, #1
 8006f70:	e7a5      	b.n	8006ebe <_vfiprintf_r+0x11a>
 8006f72:	2300      	movs	r3, #0
 8006f74:	3401      	adds	r4, #1
 8006f76:	9305      	str	r3, [sp, #20]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	f04f 0c0a 	mov.w	ip, #10
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f84:	3a30      	subs	r2, #48	; 0x30
 8006f86:	2a09      	cmp	r2, #9
 8006f88:	d903      	bls.n	8006f92 <_vfiprintf_r+0x1ee>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0c5      	beq.n	8006f1a <_vfiprintf_r+0x176>
 8006f8e:	9105      	str	r1, [sp, #20]
 8006f90:	e7c3      	b.n	8006f1a <_vfiprintf_r+0x176>
 8006f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f96:	4604      	mov	r4, r0
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e7f0      	b.n	8006f7e <_vfiprintf_r+0x1da>
 8006f9c:	ab03      	add	r3, sp, #12
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	4b16      	ldr	r3, [pc, #88]	; (8006ffc <_vfiprintf_r+0x258>)
 8006fa4:	a904      	add	r1, sp, #16
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f7fd fee8 	bl	8004d7c <_printf_float>
 8006fac:	4607      	mov	r7, r0
 8006fae:	1c78      	adds	r0, r7, #1
 8006fb0:	d1d6      	bne.n	8006f60 <_vfiprintf_r+0x1bc>
 8006fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fb4:	07d9      	lsls	r1, r3, #31
 8006fb6:	d405      	bmi.n	8006fc4 <_vfiprintf_r+0x220>
 8006fb8:	89ab      	ldrh	r3, [r5, #12]
 8006fba:	059a      	lsls	r2, r3, #22
 8006fbc:	d402      	bmi.n	8006fc4 <_vfiprintf_r+0x220>
 8006fbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fc0:	f7ff fa34 	bl	800642c <__retarget_lock_release_recursive>
 8006fc4:	89ab      	ldrh	r3, [r5, #12]
 8006fc6:	065b      	lsls	r3, r3, #25
 8006fc8:	f53f af12 	bmi.w	8006df0 <_vfiprintf_r+0x4c>
 8006fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fce:	e711      	b.n	8006df4 <_vfiprintf_r+0x50>
 8006fd0:	ab03      	add	r3, sp, #12
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <_vfiprintf_r+0x258>)
 8006fd8:	a904      	add	r1, sp, #16
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7fe f972 	bl	80052c4 <_printf_i>
 8006fe0:	e7e4      	b.n	8006fac <_vfiprintf_r+0x208>
 8006fe2:	bf00      	nop
 8006fe4:	080077f4 	.word	0x080077f4
 8006fe8:	08007814 	.word	0x08007814
 8006fec:	080077d4 	.word	0x080077d4
 8006ff0:	0800798c 	.word	0x0800798c
 8006ff4:	08007996 	.word	0x08007996
 8006ff8:	08004d7d 	.word	0x08004d7d
 8006ffc:	08006d7f 	.word	0x08006d7f
 8007000:	08007992 	.word	0x08007992

08007004 <_sbrk_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4d06      	ldr	r5, [pc, #24]	; (8007020 <_sbrk_r+0x1c>)
 8007008:	2300      	movs	r3, #0
 800700a:	4604      	mov	r4, r0
 800700c:	4608      	mov	r0, r1
 800700e:	602b      	str	r3, [r5, #0]
 8007010:	f7fa fa6c 	bl	80014ec <_sbrk>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_sbrk_r+0x1a>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_sbrk_r+0x1a>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	200002a4 	.word	0x200002a4

08007024 <__sread>:
 8007024:	b510      	push	{r4, lr}
 8007026:	460c      	mov	r4, r1
 8007028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800702c:	f000 faa8 	bl	8007580 <_read_r>
 8007030:	2800      	cmp	r0, #0
 8007032:	bfab      	itete	ge
 8007034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007036:	89a3      	ldrhlt	r3, [r4, #12]
 8007038:	181b      	addge	r3, r3, r0
 800703a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800703e:	bfac      	ite	ge
 8007040:	6563      	strge	r3, [r4, #84]	; 0x54
 8007042:	81a3      	strhlt	r3, [r4, #12]
 8007044:	bd10      	pop	{r4, pc}

08007046 <__swrite>:
 8007046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800704a:	461f      	mov	r7, r3
 800704c:	898b      	ldrh	r3, [r1, #12]
 800704e:	05db      	lsls	r3, r3, #23
 8007050:	4605      	mov	r5, r0
 8007052:	460c      	mov	r4, r1
 8007054:	4616      	mov	r6, r2
 8007056:	d505      	bpl.n	8007064 <__swrite+0x1e>
 8007058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705c:	2302      	movs	r3, #2
 800705e:	2200      	movs	r2, #0
 8007060:	f000 f9f8 	bl	8007454 <_lseek_r>
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800706a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800706e:	81a3      	strh	r3, [r4, #12]
 8007070:	4632      	mov	r2, r6
 8007072:	463b      	mov	r3, r7
 8007074:	4628      	mov	r0, r5
 8007076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800707a:	f000 b869 	b.w	8007150 <_write_r>

0800707e <__sseek>:
 800707e:	b510      	push	{r4, lr}
 8007080:	460c      	mov	r4, r1
 8007082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007086:	f000 f9e5 	bl	8007454 <_lseek_r>
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	bf15      	itete	ne
 8007090:	6560      	strne	r0, [r4, #84]	; 0x54
 8007092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800709a:	81a3      	strheq	r3, [r4, #12]
 800709c:	bf18      	it	ne
 800709e:	81a3      	strhne	r3, [r4, #12]
 80070a0:	bd10      	pop	{r4, pc}

080070a2 <__sclose>:
 80070a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a6:	f000 b8f1 	b.w	800728c <_close_r>
	...

080070ac <__swbuf_r>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	460e      	mov	r6, r1
 80070b0:	4614      	mov	r4, r2
 80070b2:	4605      	mov	r5, r0
 80070b4:	b118      	cbz	r0, 80070be <__swbuf_r+0x12>
 80070b6:	6983      	ldr	r3, [r0, #24]
 80070b8:	b90b      	cbnz	r3, 80070be <__swbuf_r+0x12>
 80070ba:	f7ff f913 	bl	80062e4 <__sinit>
 80070be:	4b21      	ldr	r3, [pc, #132]	; (8007144 <__swbuf_r+0x98>)
 80070c0:	429c      	cmp	r4, r3
 80070c2:	d12b      	bne.n	800711c <__swbuf_r+0x70>
 80070c4:	686c      	ldr	r4, [r5, #4]
 80070c6:	69a3      	ldr	r3, [r4, #24]
 80070c8:	60a3      	str	r3, [r4, #8]
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	071a      	lsls	r2, r3, #28
 80070ce:	d52f      	bpl.n	8007130 <__swbuf_r+0x84>
 80070d0:	6923      	ldr	r3, [r4, #16]
 80070d2:	b36b      	cbz	r3, 8007130 <__swbuf_r+0x84>
 80070d4:	6923      	ldr	r3, [r4, #16]
 80070d6:	6820      	ldr	r0, [r4, #0]
 80070d8:	1ac0      	subs	r0, r0, r3
 80070da:	6963      	ldr	r3, [r4, #20]
 80070dc:	b2f6      	uxtb	r6, r6
 80070de:	4283      	cmp	r3, r0
 80070e0:	4637      	mov	r7, r6
 80070e2:	dc04      	bgt.n	80070ee <__swbuf_r+0x42>
 80070e4:	4621      	mov	r1, r4
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 f966 	bl	80073b8 <_fflush_r>
 80070ec:	bb30      	cbnz	r0, 800713c <__swbuf_r+0x90>
 80070ee:	68a3      	ldr	r3, [r4, #8]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	60a3      	str	r3, [r4, #8]
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	6022      	str	r2, [r4, #0]
 80070fa:	701e      	strb	r6, [r3, #0]
 80070fc:	6963      	ldr	r3, [r4, #20]
 80070fe:	3001      	adds	r0, #1
 8007100:	4283      	cmp	r3, r0
 8007102:	d004      	beq.n	800710e <__swbuf_r+0x62>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	07db      	lsls	r3, r3, #31
 8007108:	d506      	bpl.n	8007118 <__swbuf_r+0x6c>
 800710a:	2e0a      	cmp	r6, #10
 800710c:	d104      	bne.n	8007118 <__swbuf_r+0x6c>
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f000 f951 	bl	80073b8 <_fflush_r>
 8007116:	b988      	cbnz	r0, 800713c <__swbuf_r+0x90>
 8007118:	4638      	mov	r0, r7
 800711a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <__swbuf_r+0x9c>)
 800711e:	429c      	cmp	r4, r3
 8007120:	d101      	bne.n	8007126 <__swbuf_r+0x7a>
 8007122:	68ac      	ldr	r4, [r5, #8]
 8007124:	e7cf      	b.n	80070c6 <__swbuf_r+0x1a>
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <__swbuf_r+0xa0>)
 8007128:	429c      	cmp	r4, r3
 800712a:	bf08      	it	eq
 800712c:	68ec      	ldreq	r4, [r5, #12]
 800712e:	e7ca      	b.n	80070c6 <__swbuf_r+0x1a>
 8007130:	4621      	mov	r1, r4
 8007132:	4628      	mov	r0, r5
 8007134:	f000 f81e 	bl	8007174 <__swsetup_r>
 8007138:	2800      	cmp	r0, #0
 800713a:	d0cb      	beq.n	80070d4 <__swbuf_r+0x28>
 800713c:	f04f 37ff 	mov.w	r7, #4294967295
 8007140:	e7ea      	b.n	8007118 <__swbuf_r+0x6c>
 8007142:	bf00      	nop
 8007144:	080077f4 	.word	0x080077f4
 8007148:	08007814 	.word	0x08007814
 800714c:	080077d4 	.word	0x080077d4

08007150 <_write_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4d07      	ldr	r5, [pc, #28]	; (8007170 <_write_r+0x20>)
 8007154:	4604      	mov	r4, r0
 8007156:	4608      	mov	r0, r1
 8007158:	4611      	mov	r1, r2
 800715a:	2200      	movs	r2, #0
 800715c:	602a      	str	r2, [r5, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	f7f9 fdb9 	bl	8000cd6 <_write>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_write_r+0x1e>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_write_r+0x1e>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	200002a4 	.word	0x200002a4

08007174 <__swsetup_r>:
 8007174:	4b32      	ldr	r3, [pc, #200]	; (8007240 <__swsetup_r+0xcc>)
 8007176:	b570      	push	{r4, r5, r6, lr}
 8007178:	681d      	ldr	r5, [r3, #0]
 800717a:	4606      	mov	r6, r0
 800717c:	460c      	mov	r4, r1
 800717e:	b125      	cbz	r5, 800718a <__swsetup_r+0x16>
 8007180:	69ab      	ldr	r3, [r5, #24]
 8007182:	b913      	cbnz	r3, 800718a <__swsetup_r+0x16>
 8007184:	4628      	mov	r0, r5
 8007186:	f7ff f8ad 	bl	80062e4 <__sinit>
 800718a:	4b2e      	ldr	r3, [pc, #184]	; (8007244 <__swsetup_r+0xd0>)
 800718c:	429c      	cmp	r4, r3
 800718e:	d10f      	bne.n	80071b0 <__swsetup_r+0x3c>
 8007190:	686c      	ldr	r4, [r5, #4]
 8007192:	89a3      	ldrh	r3, [r4, #12]
 8007194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007198:	0719      	lsls	r1, r3, #28
 800719a:	d42c      	bmi.n	80071f6 <__swsetup_r+0x82>
 800719c:	06dd      	lsls	r5, r3, #27
 800719e:	d411      	bmi.n	80071c4 <__swsetup_r+0x50>
 80071a0:	2309      	movs	r3, #9
 80071a2:	6033      	str	r3, [r6, #0]
 80071a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071a8:	81a3      	strh	r3, [r4, #12]
 80071aa:	f04f 30ff 	mov.w	r0, #4294967295
 80071ae:	e03e      	b.n	800722e <__swsetup_r+0xba>
 80071b0:	4b25      	ldr	r3, [pc, #148]	; (8007248 <__swsetup_r+0xd4>)
 80071b2:	429c      	cmp	r4, r3
 80071b4:	d101      	bne.n	80071ba <__swsetup_r+0x46>
 80071b6:	68ac      	ldr	r4, [r5, #8]
 80071b8:	e7eb      	b.n	8007192 <__swsetup_r+0x1e>
 80071ba:	4b24      	ldr	r3, [pc, #144]	; (800724c <__swsetup_r+0xd8>)
 80071bc:	429c      	cmp	r4, r3
 80071be:	bf08      	it	eq
 80071c0:	68ec      	ldreq	r4, [r5, #12]
 80071c2:	e7e6      	b.n	8007192 <__swsetup_r+0x1e>
 80071c4:	0758      	lsls	r0, r3, #29
 80071c6:	d512      	bpl.n	80071ee <__swsetup_r+0x7a>
 80071c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071ca:	b141      	cbz	r1, 80071de <__swsetup_r+0x6a>
 80071cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071d0:	4299      	cmp	r1, r3
 80071d2:	d002      	beq.n	80071da <__swsetup_r+0x66>
 80071d4:	4630      	mov	r0, r6
 80071d6:	f7ff fcdb 	bl	8006b90 <_free_r>
 80071da:	2300      	movs	r3, #0
 80071dc:	6363      	str	r3, [r4, #52]	; 0x34
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071e4:	81a3      	strh	r3, [r4, #12]
 80071e6:	2300      	movs	r3, #0
 80071e8:	6063      	str	r3, [r4, #4]
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	f043 0308 	orr.w	r3, r3, #8
 80071f4:	81a3      	strh	r3, [r4, #12]
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	b94b      	cbnz	r3, 800720e <__swsetup_r+0x9a>
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007204:	d003      	beq.n	800720e <__swsetup_r+0x9a>
 8007206:	4621      	mov	r1, r4
 8007208:	4630      	mov	r0, r6
 800720a:	f000 f95b 	bl	80074c4 <__smakebuf_r>
 800720e:	89a0      	ldrh	r0, [r4, #12]
 8007210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007214:	f010 0301 	ands.w	r3, r0, #1
 8007218:	d00a      	beq.n	8007230 <__swsetup_r+0xbc>
 800721a:	2300      	movs	r3, #0
 800721c:	60a3      	str	r3, [r4, #8]
 800721e:	6963      	ldr	r3, [r4, #20]
 8007220:	425b      	negs	r3, r3
 8007222:	61a3      	str	r3, [r4, #24]
 8007224:	6923      	ldr	r3, [r4, #16]
 8007226:	b943      	cbnz	r3, 800723a <__swsetup_r+0xc6>
 8007228:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800722c:	d1ba      	bne.n	80071a4 <__swsetup_r+0x30>
 800722e:	bd70      	pop	{r4, r5, r6, pc}
 8007230:	0781      	lsls	r1, r0, #30
 8007232:	bf58      	it	pl
 8007234:	6963      	ldrpl	r3, [r4, #20]
 8007236:	60a3      	str	r3, [r4, #8]
 8007238:	e7f4      	b.n	8007224 <__swsetup_r+0xb0>
 800723a:	2000      	movs	r0, #0
 800723c:	e7f7      	b.n	800722e <__swsetup_r+0xba>
 800723e:	bf00      	nop
 8007240:	2000000c 	.word	0x2000000c
 8007244:	080077f4 	.word	0x080077f4
 8007248:	08007814 	.word	0x08007814
 800724c:	080077d4 	.word	0x080077d4

08007250 <__assert_func>:
 8007250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007252:	4614      	mov	r4, r2
 8007254:	461a      	mov	r2, r3
 8007256:	4b09      	ldr	r3, [pc, #36]	; (800727c <__assert_func+0x2c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4605      	mov	r5, r0
 800725c:	68d8      	ldr	r0, [r3, #12]
 800725e:	b14c      	cbz	r4, 8007274 <__assert_func+0x24>
 8007260:	4b07      	ldr	r3, [pc, #28]	; (8007280 <__assert_func+0x30>)
 8007262:	9100      	str	r1, [sp, #0]
 8007264:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007268:	4906      	ldr	r1, [pc, #24]	; (8007284 <__assert_func+0x34>)
 800726a:	462b      	mov	r3, r5
 800726c:	f000 f8e0 	bl	8007430 <fiprintf>
 8007270:	f000 f9a5 	bl	80075be <abort>
 8007274:	4b04      	ldr	r3, [pc, #16]	; (8007288 <__assert_func+0x38>)
 8007276:	461c      	mov	r4, r3
 8007278:	e7f3      	b.n	8007262 <__assert_func+0x12>
 800727a:	bf00      	nop
 800727c:	2000000c 	.word	0x2000000c
 8007280:	0800799d 	.word	0x0800799d
 8007284:	080079aa 	.word	0x080079aa
 8007288:	080079d8 	.word	0x080079d8

0800728c <_close_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d06      	ldr	r5, [pc, #24]	; (80072a8 <_close_r+0x1c>)
 8007290:	2300      	movs	r3, #0
 8007292:	4604      	mov	r4, r0
 8007294:	4608      	mov	r0, r1
 8007296:	602b      	str	r3, [r5, #0]
 8007298:	f7fa f8f3 	bl	8001482 <_close>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_close_r+0x1a>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_close_r+0x1a>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	200002a4 	.word	0x200002a4

080072ac <__sflush_r>:
 80072ac:	898a      	ldrh	r2, [r1, #12]
 80072ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b2:	4605      	mov	r5, r0
 80072b4:	0710      	lsls	r0, r2, #28
 80072b6:	460c      	mov	r4, r1
 80072b8:	d458      	bmi.n	800736c <__sflush_r+0xc0>
 80072ba:	684b      	ldr	r3, [r1, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dc05      	bgt.n	80072cc <__sflush_r+0x20>
 80072c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dc02      	bgt.n	80072cc <__sflush_r+0x20>
 80072c6:	2000      	movs	r0, #0
 80072c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ce:	2e00      	cmp	r6, #0
 80072d0:	d0f9      	beq.n	80072c6 <__sflush_r+0x1a>
 80072d2:	2300      	movs	r3, #0
 80072d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072d8:	682f      	ldr	r7, [r5, #0]
 80072da:	602b      	str	r3, [r5, #0]
 80072dc:	d032      	beq.n	8007344 <__sflush_r+0x98>
 80072de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072e0:	89a3      	ldrh	r3, [r4, #12]
 80072e2:	075a      	lsls	r2, r3, #29
 80072e4:	d505      	bpl.n	80072f2 <__sflush_r+0x46>
 80072e6:	6863      	ldr	r3, [r4, #4]
 80072e8:	1ac0      	subs	r0, r0, r3
 80072ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072ec:	b10b      	cbz	r3, 80072f2 <__sflush_r+0x46>
 80072ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072f0:	1ac0      	subs	r0, r0, r3
 80072f2:	2300      	movs	r3, #0
 80072f4:	4602      	mov	r2, r0
 80072f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072f8:	6a21      	ldr	r1, [r4, #32]
 80072fa:	4628      	mov	r0, r5
 80072fc:	47b0      	blx	r6
 80072fe:	1c43      	adds	r3, r0, #1
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	d106      	bne.n	8007312 <__sflush_r+0x66>
 8007304:	6829      	ldr	r1, [r5, #0]
 8007306:	291d      	cmp	r1, #29
 8007308:	d82c      	bhi.n	8007364 <__sflush_r+0xb8>
 800730a:	4a2a      	ldr	r2, [pc, #168]	; (80073b4 <__sflush_r+0x108>)
 800730c:	40ca      	lsrs	r2, r1
 800730e:	07d6      	lsls	r6, r2, #31
 8007310:	d528      	bpl.n	8007364 <__sflush_r+0xb8>
 8007312:	2200      	movs	r2, #0
 8007314:	6062      	str	r2, [r4, #4]
 8007316:	04d9      	lsls	r1, r3, #19
 8007318:	6922      	ldr	r2, [r4, #16]
 800731a:	6022      	str	r2, [r4, #0]
 800731c:	d504      	bpl.n	8007328 <__sflush_r+0x7c>
 800731e:	1c42      	adds	r2, r0, #1
 8007320:	d101      	bne.n	8007326 <__sflush_r+0x7a>
 8007322:	682b      	ldr	r3, [r5, #0]
 8007324:	b903      	cbnz	r3, 8007328 <__sflush_r+0x7c>
 8007326:	6560      	str	r0, [r4, #84]	; 0x54
 8007328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800732a:	602f      	str	r7, [r5, #0]
 800732c:	2900      	cmp	r1, #0
 800732e:	d0ca      	beq.n	80072c6 <__sflush_r+0x1a>
 8007330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007334:	4299      	cmp	r1, r3
 8007336:	d002      	beq.n	800733e <__sflush_r+0x92>
 8007338:	4628      	mov	r0, r5
 800733a:	f7ff fc29 	bl	8006b90 <_free_r>
 800733e:	2000      	movs	r0, #0
 8007340:	6360      	str	r0, [r4, #52]	; 0x34
 8007342:	e7c1      	b.n	80072c8 <__sflush_r+0x1c>
 8007344:	6a21      	ldr	r1, [r4, #32]
 8007346:	2301      	movs	r3, #1
 8007348:	4628      	mov	r0, r5
 800734a:	47b0      	blx	r6
 800734c:	1c41      	adds	r1, r0, #1
 800734e:	d1c7      	bne.n	80072e0 <__sflush_r+0x34>
 8007350:	682b      	ldr	r3, [r5, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0c4      	beq.n	80072e0 <__sflush_r+0x34>
 8007356:	2b1d      	cmp	r3, #29
 8007358:	d001      	beq.n	800735e <__sflush_r+0xb2>
 800735a:	2b16      	cmp	r3, #22
 800735c:	d101      	bne.n	8007362 <__sflush_r+0xb6>
 800735e:	602f      	str	r7, [r5, #0]
 8007360:	e7b1      	b.n	80072c6 <__sflush_r+0x1a>
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007368:	81a3      	strh	r3, [r4, #12]
 800736a:	e7ad      	b.n	80072c8 <__sflush_r+0x1c>
 800736c:	690f      	ldr	r7, [r1, #16]
 800736e:	2f00      	cmp	r7, #0
 8007370:	d0a9      	beq.n	80072c6 <__sflush_r+0x1a>
 8007372:	0793      	lsls	r3, r2, #30
 8007374:	680e      	ldr	r6, [r1, #0]
 8007376:	bf08      	it	eq
 8007378:	694b      	ldreq	r3, [r1, #20]
 800737a:	600f      	str	r7, [r1, #0]
 800737c:	bf18      	it	ne
 800737e:	2300      	movne	r3, #0
 8007380:	eba6 0807 	sub.w	r8, r6, r7
 8007384:	608b      	str	r3, [r1, #8]
 8007386:	f1b8 0f00 	cmp.w	r8, #0
 800738a:	dd9c      	ble.n	80072c6 <__sflush_r+0x1a>
 800738c:	6a21      	ldr	r1, [r4, #32]
 800738e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007390:	4643      	mov	r3, r8
 8007392:	463a      	mov	r2, r7
 8007394:	4628      	mov	r0, r5
 8007396:	47b0      	blx	r6
 8007398:	2800      	cmp	r0, #0
 800739a:	dc06      	bgt.n	80073aa <__sflush_r+0xfe>
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295
 80073a8:	e78e      	b.n	80072c8 <__sflush_r+0x1c>
 80073aa:	4407      	add	r7, r0
 80073ac:	eba8 0800 	sub.w	r8, r8, r0
 80073b0:	e7e9      	b.n	8007386 <__sflush_r+0xda>
 80073b2:	bf00      	nop
 80073b4:	20400001 	.word	0x20400001

080073b8 <_fflush_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	690b      	ldr	r3, [r1, #16]
 80073bc:	4605      	mov	r5, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	b913      	cbnz	r3, 80073c8 <_fflush_r+0x10>
 80073c2:	2500      	movs	r5, #0
 80073c4:	4628      	mov	r0, r5
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	b118      	cbz	r0, 80073d2 <_fflush_r+0x1a>
 80073ca:	6983      	ldr	r3, [r0, #24]
 80073cc:	b90b      	cbnz	r3, 80073d2 <_fflush_r+0x1a>
 80073ce:	f7fe ff89 	bl	80062e4 <__sinit>
 80073d2:	4b14      	ldr	r3, [pc, #80]	; (8007424 <_fflush_r+0x6c>)
 80073d4:	429c      	cmp	r4, r3
 80073d6:	d11b      	bne.n	8007410 <_fflush_r+0x58>
 80073d8:	686c      	ldr	r4, [r5, #4]
 80073da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0ef      	beq.n	80073c2 <_fflush_r+0xa>
 80073e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073e4:	07d0      	lsls	r0, r2, #31
 80073e6:	d404      	bmi.n	80073f2 <_fflush_r+0x3a>
 80073e8:	0599      	lsls	r1, r3, #22
 80073ea:	d402      	bmi.n	80073f2 <_fflush_r+0x3a>
 80073ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ee:	f7ff f81c 	bl	800642a <__retarget_lock_acquire_recursive>
 80073f2:	4628      	mov	r0, r5
 80073f4:	4621      	mov	r1, r4
 80073f6:	f7ff ff59 	bl	80072ac <__sflush_r>
 80073fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073fc:	07da      	lsls	r2, r3, #31
 80073fe:	4605      	mov	r5, r0
 8007400:	d4e0      	bmi.n	80073c4 <_fflush_r+0xc>
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	059b      	lsls	r3, r3, #22
 8007406:	d4dd      	bmi.n	80073c4 <_fflush_r+0xc>
 8007408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800740a:	f7ff f80f 	bl	800642c <__retarget_lock_release_recursive>
 800740e:	e7d9      	b.n	80073c4 <_fflush_r+0xc>
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <_fflush_r+0x70>)
 8007412:	429c      	cmp	r4, r3
 8007414:	d101      	bne.n	800741a <_fflush_r+0x62>
 8007416:	68ac      	ldr	r4, [r5, #8]
 8007418:	e7df      	b.n	80073da <_fflush_r+0x22>
 800741a:	4b04      	ldr	r3, [pc, #16]	; (800742c <_fflush_r+0x74>)
 800741c:	429c      	cmp	r4, r3
 800741e:	bf08      	it	eq
 8007420:	68ec      	ldreq	r4, [r5, #12]
 8007422:	e7da      	b.n	80073da <_fflush_r+0x22>
 8007424:	080077f4 	.word	0x080077f4
 8007428:	08007814 	.word	0x08007814
 800742c:	080077d4 	.word	0x080077d4

08007430 <fiprintf>:
 8007430:	b40e      	push	{r1, r2, r3}
 8007432:	b503      	push	{r0, r1, lr}
 8007434:	4601      	mov	r1, r0
 8007436:	ab03      	add	r3, sp, #12
 8007438:	4805      	ldr	r0, [pc, #20]	; (8007450 <fiprintf+0x20>)
 800743a:	f853 2b04 	ldr.w	r2, [r3], #4
 800743e:	6800      	ldr	r0, [r0, #0]
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	f7ff fcaf 	bl	8006da4 <_vfiprintf_r>
 8007446:	b002      	add	sp, #8
 8007448:	f85d eb04 	ldr.w	lr, [sp], #4
 800744c:	b003      	add	sp, #12
 800744e:	4770      	bx	lr
 8007450:	2000000c 	.word	0x2000000c

08007454 <_lseek_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4d07      	ldr	r5, [pc, #28]	; (8007474 <_lseek_r+0x20>)
 8007458:	4604      	mov	r4, r0
 800745a:	4608      	mov	r0, r1
 800745c:	4611      	mov	r1, r2
 800745e:	2200      	movs	r2, #0
 8007460:	602a      	str	r2, [r5, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	f7fa f834 	bl	80014d0 <_lseek>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_lseek_r+0x1e>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_lseek_r+0x1e>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	200002a4 	.word	0x200002a4

08007478 <__swhatbuf_r>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	460e      	mov	r6, r1
 800747c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007480:	2900      	cmp	r1, #0
 8007482:	b096      	sub	sp, #88	; 0x58
 8007484:	4614      	mov	r4, r2
 8007486:	461d      	mov	r5, r3
 8007488:	da08      	bge.n	800749c <__swhatbuf_r+0x24>
 800748a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	602a      	str	r2, [r5, #0]
 8007492:	061a      	lsls	r2, r3, #24
 8007494:	d410      	bmi.n	80074b8 <__swhatbuf_r+0x40>
 8007496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800749a:	e00e      	b.n	80074ba <__swhatbuf_r+0x42>
 800749c:	466a      	mov	r2, sp
 800749e:	f000 f895 	bl	80075cc <_fstat_r>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	dbf1      	blt.n	800748a <__swhatbuf_r+0x12>
 80074a6:	9a01      	ldr	r2, [sp, #4]
 80074a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074b0:	425a      	negs	r2, r3
 80074b2:	415a      	adcs	r2, r3
 80074b4:	602a      	str	r2, [r5, #0]
 80074b6:	e7ee      	b.n	8007496 <__swhatbuf_r+0x1e>
 80074b8:	2340      	movs	r3, #64	; 0x40
 80074ba:	2000      	movs	r0, #0
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	b016      	add	sp, #88	; 0x58
 80074c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080074c4 <__smakebuf_r>:
 80074c4:	898b      	ldrh	r3, [r1, #12]
 80074c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074c8:	079d      	lsls	r5, r3, #30
 80074ca:	4606      	mov	r6, r0
 80074cc:	460c      	mov	r4, r1
 80074ce:	d507      	bpl.n	80074e0 <__smakebuf_r+0x1c>
 80074d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	6123      	str	r3, [r4, #16]
 80074d8:	2301      	movs	r3, #1
 80074da:	6163      	str	r3, [r4, #20]
 80074dc:	b002      	add	sp, #8
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	ab01      	add	r3, sp, #4
 80074e2:	466a      	mov	r2, sp
 80074e4:	f7ff ffc8 	bl	8007478 <__swhatbuf_r>
 80074e8:	9900      	ldr	r1, [sp, #0]
 80074ea:	4605      	mov	r5, r0
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff fbbb 	bl	8006c68 <_malloc_r>
 80074f2:	b948      	cbnz	r0, 8007508 <__smakebuf_r+0x44>
 80074f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074f8:	059a      	lsls	r2, r3, #22
 80074fa:	d4ef      	bmi.n	80074dc <__smakebuf_r+0x18>
 80074fc:	f023 0303 	bic.w	r3, r3, #3
 8007500:	f043 0302 	orr.w	r3, r3, #2
 8007504:	81a3      	strh	r3, [r4, #12]
 8007506:	e7e3      	b.n	80074d0 <__smakebuf_r+0xc>
 8007508:	4b0d      	ldr	r3, [pc, #52]	; (8007540 <__smakebuf_r+0x7c>)
 800750a:	62b3      	str	r3, [r6, #40]	; 0x28
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	6020      	str	r0, [r4, #0]
 8007510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	9b00      	ldr	r3, [sp, #0]
 8007518:	6163      	str	r3, [r4, #20]
 800751a:	9b01      	ldr	r3, [sp, #4]
 800751c:	6120      	str	r0, [r4, #16]
 800751e:	b15b      	cbz	r3, 8007538 <__smakebuf_r+0x74>
 8007520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007524:	4630      	mov	r0, r6
 8007526:	f000 f863 	bl	80075f0 <_isatty_r>
 800752a:	b128      	cbz	r0, 8007538 <__smakebuf_r+0x74>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	f023 0303 	bic.w	r3, r3, #3
 8007532:	f043 0301 	orr.w	r3, r3, #1
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	89a0      	ldrh	r0, [r4, #12]
 800753a:	4305      	orrs	r5, r0
 800753c:	81a5      	strh	r5, [r4, #12]
 800753e:	e7cd      	b.n	80074dc <__smakebuf_r+0x18>
 8007540:	0800627d 	.word	0x0800627d

08007544 <__ascii_mbtowc>:
 8007544:	b082      	sub	sp, #8
 8007546:	b901      	cbnz	r1, 800754a <__ascii_mbtowc+0x6>
 8007548:	a901      	add	r1, sp, #4
 800754a:	b142      	cbz	r2, 800755e <__ascii_mbtowc+0x1a>
 800754c:	b14b      	cbz	r3, 8007562 <__ascii_mbtowc+0x1e>
 800754e:	7813      	ldrb	r3, [r2, #0]
 8007550:	600b      	str	r3, [r1, #0]
 8007552:	7812      	ldrb	r2, [r2, #0]
 8007554:	1e10      	subs	r0, r2, #0
 8007556:	bf18      	it	ne
 8007558:	2001      	movne	r0, #1
 800755a:	b002      	add	sp, #8
 800755c:	4770      	bx	lr
 800755e:	4610      	mov	r0, r2
 8007560:	e7fb      	b.n	800755a <__ascii_mbtowc+0x16>
 8007562:	f06f 0001 	mvn.w	r0, #1
 8007566:	e7f8      	b.n	800755a <__ascii_mbtowc+0x16>

08007568 <__malloc_lock>:
 8007568:	4801      	ldr	r0, [pc, #4]	; (8007570 <__malloc_lock+0x8>)
 800756a:	f7fe bf5e 	b.w	800642a <__retarget_lock_acquire_recursive>
 800756e:	bf00      	nop
 8007570:	20000298 	.word	0x20000298

08007574 <__malloc_unlock>:
 8007574:	4801      	ldr	r0, [pc, #4]	; (800757c <__malloc_unlock+0x8>)
 8007576:	f7fe bf59 	b.w	800642c <__retarget_lock_release_recursive>
 800757a:	bf00      	nop
 800757c:	20000298 	.word	0x20000298

08007580 <_read_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4d07      	ldr	r5, [pc, #28]	; (80075a0 <_read_r+0x20>)
 8007584:	4604      	mov	r4, r0
 8007586:	4608      	mov	r0, r1
 8007588:	4611      	mov	r1, r2
 800758a:	2200      	movs	r2, #0
 800758c:	602a      	str	r2, [r5, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	f7f9 ff5a 	bl	8001448 <_read>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	d102      	bne.n	800759e <_read_r+0x1e>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	b103      	cbz	r3, 800759e <_read_r+0x1e>
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	200002a4 	.word	0x200002a4

080075a4 <__ascii_wctomb>:
 80075a4:	b149      	cbz	r1, 80075ba <__ascii_wctomb+0x16>
 80075a6:	2aff      	cmp	r2, #255	; 0xff
 80075a8:	bf85      	ittet	hi
 80075aa:	238a      	movhi	r3, #138	; 0x8a
 80075ac:	6003      	strhi	r3, [r0, #0]
 80075ae:	700a      	strbls	r2, [r1, #0]
 80075b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80075b4:	bf98      	it	ls
 80075b6:	2001      	movls	r0, #1
 80075b8:	4770      	bx	lr
 80075ba:	4608      	mov	r0, r1
 80075bc:	4770      	bx	lr

080075be <abort>:
 80075be:	b508      	push	{r3, lr}
 80075c0:	2006      	movs	r0, #6
 80075c2:	f000 f84d 	bl	8007660 <raise>
 80075c6:	2001      	movs	r0, #1
 80075c8:	f7f9 ff34 	bl	8001434 <_exit>

080075cc <_fstat_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d07      	ldr	r5, [pc, #28]	; (80075ec <_fstat_r+0x20>)
 80075d0:	2300      	movs	r3, #0
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	4611      	mov	r1, r2
 80075d8:	602b      	str	r3, [r5, #0]
 80075da:	f7f9 ff5e 	bl	800149a <_fstat>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	d102      	bne.n	80075e8 <_fstat_r+0x1c>
 80075e2:	682b      	ldr	r3, [r5, #0]
 80075e4:	b103      	cbz	r3, 80075e8 <_fstat_r+0x1c>
 80075e6:	6023      	str	r3, [r4, #0]
 80075e8:	bd38      	pop	{r3, r4, r5, pc}
 80075ea:	bf00      	nop
 80075ec:	200002a4 	.word	0x200002a4

080075f0 <_isatty_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d06      	ldr	r5, [pc, #24]	; (800760c <_isatty_r+0x1c>)
 80075f4:	2300      	movs	r3, #0
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	f7f9 ff5d 	bl	80014ba <_isatty>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_isatty_r+0x1a>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_isatty_r+0x1a>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	200002a4 	.word	0x200002a4

08007610 <_raise_r>:
 8007610:	291f      	cmp	r1, #31
 8007612:	b538      	push	{r3, r4, r5, lr}
 8007614:	4604      	mov	r4, r0
 8007616:	460d      	mov	r5, r1
 8007618:	d904      	bls.n	8007624 <_raise_r+0x14>
 800761a:	2316      	movs	r3, #22
 800761c:	6003      	str	r3, [r0, #0]
 800761e:	f04f 30ff 	mov.w	r0, #4294967295
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007626:	b112      	cbz	r2, 800762e <_raise_r+0x1e>
 8007628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800762c:	b94b      	cbnz	r3, 8007642 <_raise_r+0x32>
 800762e:	4620      	mov	r0, r4
 8007630:	f000 f830 	bl	8007694 <_getpid_r>
 8007634:	462a      	mov	r2, r5
 8007636:	4601      	mov	r1, r0
 8007638:	4620      	mov	r0, r4
 800763a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800763e:	f000 b817 	b.w	8007670 <_kill_r>
 8007642:	2b01      	cmp	r3, #1
 8007644:	d00a      	beq.n	800765c <_raise_r+0x4c>
 8007646:	1c59      	adds	r1, r3, #1
 8007648:	d103      	bne.n	8007652 <_raise_r+0x42>
 800764a:	2316      	movs	r3, #22
 800764c:	6003      	str	r3, [r0, #0]
 800764e:	2001      	movs	r0, #1
 8007650:	e7e7      	b.n	8007622 <_raise_r+0x12>
 8007652:	2400      	movs	r4, #0
 8007654:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007658:	4628      	mov	r0, r5
 800765a:	4798      	blx	r3
 800765c:	2000      	movs	r0, #0
 800765e:	e7e0      	b.n	8007622 <_raise_r+0x12>

08007660 <raise>:
 8007660:	4b02      	ldr	r3, [pc, #8]	; (800766c <raise+0xc>)
 8007662:	4601      	mov	r1, r0
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	f7ff bfd3 	b.w	8007610 <_raise_r>
 800766a:	bf00      	nop
 800766c:	2000000c 	.word	0x2000000c

08007670 <_kill_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4d07      	ldr	r5, [pc, #28]	; (8007690 <_kill_r+0x20>)
 8007674:	2300      	movs	r3, #0
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	602b      	str	r3, [r5, #0]
 800767e:	f7f9 fec9 	bl	8001414 <_kill>
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	d102      	bne.n	800768c <_kill_r+0x1c>
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	b103      	cbz	r3, 800768c <_kill_r+0x1c>
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	bd38      	pop	{r3, r4, r5, pc}
 800768e:	bf00      	nop
 8007690:	200002a4 	.word	0x200002a4

08007694 <_getpid_r>:
 8007694:	f7f9 beb6 	b.w	8001404 <_getpid>

08007698 <_init>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	bf00      	nop
 800769c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769e:	bc08      	pop	{r3}
 80076a0:	469e      	mov	lr, r3
 80076a2:	4770      	bx	lr

080076a4 <_fini>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	bf00      	nop
 80076a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076aa:	bc08      	pop	{r3}
 80076ac:	469e      	mov	lr, r3
 80076ae:	4770      	bx	lr
